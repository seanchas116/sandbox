!function e(t,i,n){function r(o,a){if(!i[o]){if(!t[o]){var c="function"==typeof require&&require;if(!a&&c)return c(o,!0);if(s)return s(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var u=i[o]={exports:{}};t[o][0].call(u.exports,function(e){var i=t[o][1][e];return r(i?i:e)},u,u.exports,e,t,i,n)}return i[o].exports}for(var s="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e){var t;new(t=e("vue"))({el:"#test",data:{title:"Hello"}})},{vue:22}],2:[function(e,t){function i(){this.reset()}var n=e("./utils"),r=i.prototype;r.push=function(e){if(e.id&&this.has[e.id]){if(e.override){var t=this.has[e.id];t.cancelled=!0,this.queue.push(e),this.has[e.id]=e}}else this.queue.push(e),this.has[e.id]=e,this.waiting||(this.waiting=!0,n.nextTick(n.bind(this.flush,this)))},r.flush=function(){this._preFlush&&this._preFlush();for(var e=0;e<this.queue.length;e++){var t=this.queue[e];t.cancelled||t.execute()}this.reset()},r.reset=function(){this.has=n.hash(),this.queue=[],this.waiting=!1},t.exports=i},{"./utils":27}],3:[function(e,t){function i(e,t,i,n){this.id=s++,this.value=void 0,this.isExp=!!i,this.isFn=n,this.root=!this.isExp&&-1===t.indexOf("."),this.compiler=e,this.key=t,this.dirs=[],this.subs=[],this.deps=[],this.unbound=!1}var n=e("./batcher"),r=new n,s=1,o=i.prototype;o.update=function(e){if((!this.isComputed||this.isFn)&&(this.value=e),this.dirs.length||this.subs.length){var t=this;r.push({id:this.id,execute:function(){t.unbound||t._update()}})}},o._update=function(){for(var e=this.dirs.length,t=this.val();e--;)this.dirs[e].$update(t);this.pub()},o.val=function(){return this.isComputed&&!this.isFn?this.value.$get():this.value},o.pub=function(){for(var e=this.subs.length;e--;)this.subs[e].update()},o.unbind=function(){this.unbound=!0;for(var e=this.dirs.length;e--;)this.dirs[e].$unbind();e=this.deps.length;for(var t;e--;){t=this.deps[e].subs;var i=t.indexOf(this);i>-1&&t.splice(i,1)}},t.exports=i},{"./batcher":2}],4:[function(e,t){function i(e,t){var i,r,o=this;o.init=!0,o.destroyed=!1,t=o.options=t||{},c.processOptions(t),v(o,t.compilerOptions),o.repeat=o.repeat||!1,o.expCache=o.expCache||{};var a=o.el=o.setupElement(t);c.log("\nnew VM instance: "+a.tagName+"\n"),o.vm=a.vue_vm=e,o.bindings=c.hash(),o.dirs=[],o.deferred=[],o.computed=[],o.children=[],o.emitter=new s(e),e.$={},e.$el=a,e.$options=t,e.$compiler=o,e.$event=null;var l=t.parent;if(l&&(o.parent=l.$compiler,l.$compiler.children.push(o),e.$parent=l,"lazy"in t||(t.lazy=o.parent.options.lazy)),e.$root=n(o).vm,o.setupObserver(),t.methods)for(i in t.methods)o.createBinding(i);if(t.computed)for(i in t.computed)o.createBinding(i);var u=o.data=t.data||{},h=t.defaultData;if(h)for(i in h)m.call(u,i)||(u[i]=h[i]);var d=t.paramAttributes;if(d)for(r=d.length;r--;)u[d[r]]=c.checkNumber(o.eval(a.getAttribute(d[r])));v(e,u),e.$data=u,o.execHook("created"),u=o.data=e.$data;var p;for(i in e)p=e[i],"$"!==i.charAt(0)&&u[i]!==p&&"function"!=typeof p&&(u[i]=p);for(o.observeData(u),t.template&&this.resolveContent(),o.compile(a,!0),r=o.deferred.length;r--;)o.bindDirective(o.deferred[r]);o.deferred=null,this.computed.length&&f.parse(this.computed),o.init=!1,o.execHook("ready")}function n(e){for(;e.parent;)e=e.parent;return e}var r,s=e("./emitter"),o=e("./observer"),a=e("./config"),c=e("./utils"),l=e("./binding"),u=e("./directive"),h=e("./text-parser"),f=e("./deps-parser"),d=e("./exp-parser"),p=[].slice,v=c.extend,m={}.hasOwnProperty,g=Object.defineProperty,b=["created","ready","beforeDestroy","afterDestroy","attached","detached"],y=["if","repeat","view","component"],_=i.prototype;_.setupElement=function(e){var t,i,n,r,s,o="string"==typeof e.el?document.querySelector(e.el):e.el||document.createElement(e.tagName||"div"),a=e.template;if(a){if(o.hasChildNodes())for(this.rawContent=document.createElement("div");t=o.firstChild;)this.rawContent.appendChild(t);if(e.replace&&a.firstChild===a.lastChild){if(i=a.firstChild.cloneNode(!0),o.parentNode&&(o.parentNode.insertBefore(i,o),o.parentNode.removeChild(o)),o.hasAttributes())for(n=o.attributes.length;n--;)r=o.attributes[n],i.setAttribute(r.name,r.value);o=i}else o.appendChild(a.cloneNode(!0))}if(e.id&&(o.id=e.id),e.className&&(o.className=e.className),s=e.attributes)for(r in s)o.setAttribute(r,s[r]);return o},_.resolveContent=function(){function e(e,t){for(var i=e.parentNode,n=0,r=t.length;r>n;n++)i.insertBefore(t[n],e);i.removeChild(e)}var t,i,n,r,s,o=p.call(this.el.getElementsByTagName("content")),a=this.rawContent;if(n=o.length){for(;n--;)t=o[n],a?(i=t.getAttribute("select"),i?t.content=p.call(a.querySelectorAll(i)):s=t):t.content=p.call(t.childNodes);for(n=0,r=o.length;r>n;n++)t=o[n],t!==s&&e(t,t.content);a&&s&&e(s,p.call(a.childNodes))}this.rawContent=null},_.setupObserver=function(){function e(e){r(e),f.catcher.emit("get",a[e])}function t(e,t,i){l.emit("change:"+e,t,i),r(e),a[e].update(t)}function i(e,t){l.on("hook:"+e,function(){t.call(o.vm)})}function n(e){var t=o.children;if(t)for(var i,n=t.length;n--;)i=t[n],i.el.parentNode&&(e="hook:"+(e?"attached":"detached"),i.observer.emit(e),i.emitter.emit(e))}function r(e){a[e]||o.createBinding(e)}var o=this,a=o.bindings,c=o.options,l=o.observer=new s(o.vm);l.proxies={},l.on("get",e).on("set",t).on("mutate",t);for(var u,h,d,p=b.length;p--;)if(h=b[p],d=c[h],Array.isArray(d))for(u=d.length;u--;)i(h,d[u]);else d&&i(h,d);l.on("hook:attached",function(){n(1)}).on("hook:detached",function(){n(0)})},_.observeData=function(e){function t(e){"$data"!==e&&i()}function i(){s.update(n.data),r.emit("change:$data",n.data)}var n=this,r=n.observer;o.observe(e,"",r);var s=n.bindings.$data=new l(n,"$data");s.update(e),g(n.vm,"$data",{get:function(){return n.observer.emit("get","$data"),n.data},set:function(e){var t=n.data;o.unobserve(t,"",r),n.data=e,o.copyPaths(e,t),o.observe(e,"",r),i()}}),r.on("set",t).on("mutate",t)},_.compile=function(e,t){var i=e.nodeType;1===i&&"SCRIPT"!==e.tagName?this.compileElement(e,t):3===i&&a.interpolate&&this.compileTextNode(e)},_.checkPriorityDir=function(e,t,i){var n,r,s;return"component"===e&&i!==!0&&(s=this.resolveComponent(t,void 0,!0))?(r=this.parseDirective(e,"",t),r.Ctor=s):(n=c.attr(t,e),r=n&&this.parseDirective(e,n,t)),r?i===!0?void c.warn("Directive v-"+e+" cannot be used on an already instantiated VM's root node. Use it from the parent's template instead."):(this.deferred.push(r),!0):void 0},_.compileElement=function(e,t){if("TEXTAREA"===e.tagName&&e.value&&(e.value=this.eval(e.value)),e.hasAttributes()||e.tagName.indexOf("-")>-1){if(null!==c.attr(e,"pre"))return;var i,n,r,s;for(i=0,n=y.length;n>i;i++)if(this.checkPriorityDir(y[i],e,t))return;e.vue_trans=c.attr(e,"transition"),e.vue_anim=c.attr(e,"animation"),e.vue_effect=this.eval(c.attr(e,"effect"));var o,l,u,f,d,v,m,g=a.prefix+"-",b=this.options.paramAttributes;if(t){var _=c.attr(e,"with");if(_)for(d=this.parseDirective("with",_,e,!0),r=0,s=d.length;s>r;r++)this.bindDirective(d[r],this.parent)}var x=p.call(e.attributes);for(i=0,n=x.length;n>i;i++){if(o=x[i],l=o.name,u=!1,0===l.indexOf(g))for(u=!0,m=l.slice(g.length),d=this.parseDirective(m,o.value,e,!0),r=0,s=d.length;s>r;r++)this.bindDirective(d[r]);else a.interpolate&&(f=h.parseAttr(o.value),f&&(v=this.parseDirective("attr",f,e),v.arg=l,b&&b.indexOf(l)>-1?this.bindDirective(v,this.parent):this.bindDirective(v)));u&&"cloak"!==m&&e.removeAttribute(l)}}e.hasChildNodes()&&p.call(e.childNodes).forEach(this.compile,this)},_.compileTextNode=function(e){var t=h.parse(e.nodeValue);if(t){for(var i,n,r,s=0,o=t.length;o>s;s++)n=t[s],r=null,n.key?">"===n.key.charAt(0)?(i=document.createComment("ref"),r=this.parseDirective("partial",n.key.slice(1),i)):n.html?(i=document.createComment(a.prefix+"-html"),r=this.parseDirective("html",n.key,i)):(i=document.createTextNode(""),r=this.parseDirective("text",n.key,i)):i=document.createTextNode(n),e.parentNode.insertBefore(i,e),this.bindDirective(r);e.parentNode.removeChild(e)}},_.parseDirective=function(e,t,i,n){function r(t){return new u(e,t,o,s,i)}var s=this,o=s.getOption("directives",e);if(o){var a=u.parse(t);return n?a.map(r):r(a[0])}},_.bindDirective=function(e,t){if(e){if(this.dirs.push(e),e.isEmpty||e.isLiteral)return void(e.bind&&e.bind());var i,n=t||this,r=e.key;if(e.isExp)i=n.createBinding(r,e);else{for(;n&&!n.hasKey(r);)n=n.parent;n=n||this,i=n.bindings[r]||n.createBinding(r)}i.dirs.push(e),e.binding=i;var s=i.val();e.bind&&e.bind(s),e.$update(s,!0)}},_.createBinding=function(e,t){c.log("  created binding: "+e);var i=this,n=i.options.methods,r=t&&t.isExp,s=t&&t.isFn||n&&n[e],a=i.bindings,u=i.options.computed,h=new l(i,e,r,s);if(r)i.defineExp(e,h,t);else if(s)a[e]=h,i.defineVmProp(e,h,n[e]);else if(a[e]=h,h.root)u&&u[e]?i.defineComputed(e,h,u[e]):"$"!==e.charAt(0)?i.defineDataProp(e,h):(i.defineVmProp(e,h,i.data[e]),delete i.data[e]);else if(u&&u[c.baseKey(e)])i.defineExp(e,h);else{o.ensurePath(i.data,e);var f=e.slice(0,e.lastIndexOf("."));a[f]||i.createBinding(f)}return h},_.defineDataProp=function(e,t){var i=this,n=i.data,r=n.__emitter__;m.call(n,e)||(n[e]=void 0),r&&!m.call(r.values,e)&&o.convertKey(n,e),t.value=n[e],g(i.vm,e,{get:function(){return i.data[e]},set:function(t){i.data[e]=t}})},_.defineVmProp=function(e,t,i){var n=this.observer;t.value=i,g(this.vm,e,{get:function(){return o.shouldGet&&n.emit("get",e),t.value},set:function(t){n.emit("set",e,t)}})},_.defineExp=function(e,t,i){var n=i&&i.computedKey,r=n?i.expression:e,s=this.expCache[r];s||(s=this.expCache[r]=d.parse(n||e,this)),s&&this.markComputed(t,s)},_.defineComputed=function(e,t,i){this.markComputed(t,i),g(this.vm,e,{get:t.value.$get,set:t.value.$set})},_.markComputed=function(e,t){e.isComputed=!0,e.isFn?e.value=t:("function"==typeof t&&(t={$get:t}),e.value={$get:c.bind(t.$get,this.vm),$set:t.$set?c.bind(t.$set,this.vm):void 0}),this.computed.push(e)},_.getOption=function(e,t,i){var n=this.options,r=this.parent,s=a.globalAssets,o=n[e]&&n[e][t]||(r?r.getOption(e,t,i):s[e]&&s[e][t]);return o||i||"string"!=typeof t||c.warn("Unknown "+e.slice(0,-1)+": "+t),o},_.execHook=function(e){e="hook:"+e,this.observer.emit(e),this.emitter.emit(e)},_.hasKey=function(e){var t=c.baseKey(e);return m.call(this.data,t)||m.call(this.vm,t)},_.eval=function(e,t){var i=h.parseAttr(e);return i?d.eval(i,this,t):e},_.resolveComponent=function(t,i,n){r=r||e("./viewmodel");var s=c.attr(t,"component"),o=t.tagName,a=this.eval(s,i),l=o.indexOf("-")>0&&o.toLowerCase(),u=this.getOption("components",a||l,!0);return a&&!u&&c.warn("Unknown component: "+a),n?""===s?r:u:u||r},_.destroy=function(e){if(!this.destroyed){var t,i,n,r,s,a,c=this,l=c.vm,u=c.el,h=c.dirs,f=c.computed,d=c.bindings,p=c.children,v=c.parent;for(c.execHook("beforeDestroy"),o.unobserve(c.data,"",c.observer),t=p.length;t--;)p[t].destroy(!0);for(t=h.length;t--;)r=h[t],r.binding&&r.binding.compiler!==c&&(s=r.binding.dirs,s&&(i=s.indexOf(r),i>-1&&s.splice(i,1))),r.$unbind();for(t=f.length;t--;)f[t].unbind();for(n in d)a=d[n],a&&a.unbind();v&&(i=v.children.indexOf(c),i>-1&&v.children.splice(i,1)),e||(u===document.body?u.innerHTML="":l.$remove()),u.vue_vm=null,c.destroyed=!0,c.execHook("afterDestroy"),c.observer.off(),c.emitter.off()}},t.exports=i},{"./binding":3,"./config":5,"./deps-parser":6,"./directive":7,"./emitter":18,"./exp-parser":19,"./observer":23,"./text-parser":25,"./utils":27,"./viewmodel":28}],5:[function(e,t){var i=e("./text-parser");t.exports={prefix:"v",debug:!1,silent:!1,enterClass:"v-enter",leaveClass:"v-leave",interpolate:!0},Object.defineProperty(t.exports,"delimiters",{get:function(){return i.delimiters},set:function(e){i.setDelimiters(e)}})},{"./text-parser":25}],6:[function(e,t){function i(e){if(!e.isFn){s.log("\n- "+e.key);var t=s.hash();e.deps=[],a.on("get",function(i){var r=t[i.key];r&&r.compiler===i.compiler||i.compiler.repeat&&!n(i.compiler,e.compiler)||(t[i.key]=i,s.log("  - "+i.key),e.deps.push(i),i.subs.push(e))}),e.value.$get(),a.off("get")}}function n(e,t){for(;t;){if(e===t)return!0;t=t.parent}}var r=e("./emitter"),s=e("./utils"),o=e("./observer"),a=new r;t.exports={catcher:a,parse:function(e){s.log("\nparsing dependencies..."),o.shouldGet=!0,e.forEach(i),o.shouldGet=!1,s.log("\ndone.")}}},{"./emitter":18,"./observer":23,"./utils":27}],7:[function(e,t){function i(e,t,n,s,o){this.id=r++,this.name=e,this.compiler=s,this.vm=s.vm,this.el=o,this.computeFilters=!1,this.key=t.key,this.arg=t.arg,this.expression=t.expression;var l=""===this.expression;if("function"==typeof n)this[l?"bind":"update"]=n;else for(var h in n)this[h]=n[h];if(l||this.isEmpty)return void(this.isEmpty=!0);u.Regex.test(this.key)&&(this.key=s.eval(this.key),this.isLiteral&&(this.expression=this.key));var f,d,p,v,m,g=t.filters;if(g)for(this.filters=[],p=0,v=g.length;v>p;p++)f=g[p],d=this.compiler.getOption("filters",f.name),d&&(f.apply=d,this.filters.push(f),d.computed&&(m=!0));this.filters&&this.filters.length||(this.filters=null),m&&(this.computedKey=i.inlineFilters(this.key,this.filters),this.filters=null),this.isExp=m||!c.test(this.key)||a.test(this.key)}function n(e){return e.indexOf('"')>-1?e.replace(l,"'"):e}var r=1,s=/^[\w\$-]+$/,o=/[^\s'"]+|'[^']+'|"[^"]+"/g,a=/^\$(parent|root)\./,c=/^[\w\.$]+$/,l=/"/g,u=e("./text-parser"),h=i.prototype;h.$update=function(e,t){this.$lock||(t||e!==this.value||e&&"object"==typeof e)&&(this.value=e,this.update&&this.update(this.filters&&!this.computeFilters?this.$applyFilters(e):e,t))},h.$applyFilters=function(e){for(var t,i=e,n=0,r=this.filters.length;r>n;n++)t=this.filters[n],i=t.apply.apply(this.vm,[i].concat(t.args));return i},h.$unbind=function(){this.el&&this.vm&&(this.unbind&&this.unbind(),this.vm=this.el=this.binding=this.compiler=null)},i.parse=function(e){function t(){v.expression=e.slice(f,g).trim(),void 0===v.key?v.key=e.slice(d,g).trim():m!==f&&i(),(0===g||v.key)&&p.push(v)}function i(){var t,i=e.slice(m,g).trim();if(i){t={};var n=i.match(o);t.name=n[0],t.args=n.length>1?n.slice(1):null}t&&(v.filters=v.filters||[]).push(t),m=g+1}for(var n,r,a=!1,c=!1,l=0,u=0,h=0,f=0,d=0,p=[],v={},m=0,g=0,b=e.length;b>g;g++)r=e.charAt(g),a?"'"===r&&(a=!a):c?'"'===r&&(c=!c):","!==r||h||l||u?":"!==r||v.key||v.arg?"|"===r&&"|"!==e.charAt(g+1)&&"|"!==e.charAt(g-1)?void 0===v.key?(m=g+1,v.key=e.slice(d,g).trim()):i():'"'===r?c=!0:"'"===r?a=!0:"("===r?h++:")"===r?h--:"["===r?u++:"]"===r?u--:"{"===r?l++:"}"===r&&l--:(n=e.slice(f,g).trim(),s.test(n)&&(d=g+1,v.arg=n)):(t(),v={},f=d=m=g+1);return(0===g||f!==g)&&t(),p},i.inlineFilters=function(e,t){for(var i,r,s=0,o=t.length;o>s;s++)r=t[s],i=r.args?',"'+r.args.map(n).join('","')+'"':"",e='this.$compiler.getOption("filters", "'+r.name+'").call(this,'+e+i+")";return e},t.exports=i},{"./text-parser":25}],8:[function(e,t){var i=e("../utils"),n=[].slice;t.exports={bind:function(){8===this.el.nodeType&&(this.nodes=[])},update:function(e){e=i.guard(e),this.nodes?this.swap(e):this.el.innerHTML=e},swap:function(e){for(var t=this.el.parentNode,r=this.nodes,s=r.length;s--;)t.removeChild(r[s]);var o=i.toFragment(e);this.nodes=n.call(o.childNodes),t.insertBefore(o,this.el)}}},{"../utils":27}],9:[function(e,t){var i=e("../utils");t.exports={bind:function(){this.parent=this.el.parentNode,this.ref=document.createComment("vue-if"),this.Ctor=this.compiler.resolveComponent(this.el),this.parent.insertBefore(this.ref,this.el),this.parent.removeChild(this.el),i.attr(this.el,"view")&&i.warn("Conflict: v-if cannot be used together with v-view. Just set v-view's binding value to empty string to empty it."),i.attr(this.el,"repeat")&&i.warn("Conflict: v-if cannot be used together with v-repeat. Use `v-show` or the `filterBy` filter instead.")},update:function(e){e?this.childVM||(this.childVM=new this.Ctor({el:this.el.cloneNode(!0),parent:this.vm}),this.compiler.init?this.parent.insertBefore(this.childVM.$el,this.ref):this.childVM.$before(this.ref)):this.unbind()},unbind:function(){this.childVM&&(this.childVM.$destroy(),this.childVM=null)}}},{"../utils":27}],10:[function(e,t){var i=e("../utils"),n=e("../config"),r=e("../transition"),s=t.exports=i.hash();s.component={isLiteral:!0,bind:function(){this.el.vue_vm||(this.childVM=new this.Ctor({el:this.el,parent:this.vm}))},unbind:function(){this.childVM&&this.childVM.$destroy()}},s.attr={bind:function(){var e=this.vm.$options.paramAttributes;this.isParam=e&&e.indexOf(this.arg)>-1},update:function(e){e||0===e?this.el.setAttribute(this.arg,e):this.el.removeAttribute(this.arg),this.isParam&&(this.vm[this.arg]=i.checkNumber(e))}},s.text={bind:function(){this.attr=3===this.el.nodeType?"nodeValue":"textContent"},update:function(e){this.el[this.attr]=i.guard(e)}},s.show=function(e){var t=this.el,i=e?"":"none",n=function(){t.style.display=i};r(t,e?1:-1,n,this.compiler)},s["class"]=function(e){this.arg?i[e?"addClass":"removeClass"](this.el,this.arg):(this.lastVal&&i.removeClass(this.el,this.lastVal),e&&(i.addClass(this.el,e),this.lastVal=e))},s.cloak={isEmpty:!0,bind:function(){var e=this.el;this.compiler.observer.once("hook:ready",function(){e.removeAttribute(n.prefix+"-cloak")})}},s.ref={isLiteral:!0,bind:function(){var e=this.expression;e&&(this.vm.$parent.$[e]=this.vm)},unbind:function(){var e=this.expression;e&&delete this.vm.$parent.$[e]}},s.on=e("./on"),s.repeat=e("./repeat"),s.model=e("./model"),s["if"]=e("./if"),s["with"]=e("./with"),s.html=e("./html"),s.style=e("./style"),s.partial=e("./partial"),s.view=e("./view")},{"../config":5,"../transition":26,"../utils":27,"./html":8,"./if":9,"./model":11,"./on":12,"./partial":13,"./repeat":14,"./style":15,"./view":16,"./with":17}],11:[function(e,t){function i(e){return s.call(e.options,function(e){return e.selected}).map(function(e){return e.value||e.text})}var n=e("../utils"),r=navigator.userAgent.indexOf("MSIE 9.0")>0,s=[].filter;t.exports={bind:function(){var e=this,t=e.el,i=t.type,s=t.tagName;e.lock=!1,e.ownerVM=e.binding.compiler.vm,e.event=e.compiler.options.lazy||"SELECT"===s||"checkbox"===i||"radio"===i?"change":"input",e.attr="checkbox"===i?"checked":"INPUT"===s||"SELECT"===s||"TEXTAREA"===s?"value":"innerHTML","SELECT"===s&&t.hasAttribute("multiple")&&(this.multi=!0);var o=!1;e.cLock=function(){o=!0},e.cUnlock=function(){o=!1},t.addEventListener("compositionstart",this.cLock),t.addEventListener("compositionend",this.cUnlock),e.set=e.filters?function(){if(!o){var i;try{i=t.selectionStart}catch(r){}e._set(),n.nextTick(function(){void 0!==i&&t.setSelectionRange(i,i)})}}:function(){o||(e.lock=!0,e._set(),n.nextTick(function(){e.lock=!1}))},t.addEventListener(e.event,e.set),r&&(e.onCut=function(){n.nextTick(function(){e.set()})},e.onDel=function(t){(46===t.keyCode||8===t.keyCode)&&e.set()},t.addEventListener("cut",e.onCut),t.addEventListener("keyup",e.onDel))},_set:function(){this.ownerVM.$set(this.key,this.multi?i(this.el):this.el[this.attr])},update:function(e,t){if(t&&void 0===e)return this._set();if(!this.lock){var i=this.el;"SELECT"===i.tagName?(i.selectedIndex=-1,this.multi&&Array.isArray(e)?e.forEach(this.updateSelect,this):this.updateSelect(e)):"radio"===i.type?i.checked=e==i.value:"checkbox"===i.type?i.checked=!!e:i[this.attr]=n.guard(e)}},updateSelect:function(e){for(var t=this.el.options,i=t.length;i--;)if(t[i].value==e){t[i].selected=!0;break}},unbind:function(){var e=this.el;e.removeEventListener(this.event,this.set),e.removeEventListener("compositionstart",this.cLock),e.removeEventListener("compositionend",this.cUnlock),r&&(e.removeEventListener("cut",this.onCut),e.removeEventListener("keyup",this.onDel))}}},{"../utils":27}],12:[function(e,t){var i=e("../utils");t.exports={isFn:!0,bind:function(){if(this.context=this.binding.isExp?this.vm:this.binding.compiler.vm,"IFRAME"===this.el.tagName&&"load"!==this.arg){var e=this;this.iframeBind=function(){e.el.contentWindow.addEventListener(e.arg,e.handler)},this.el.addEventListener("load",this.iframeBind)}},update:function(e){if("function"!=typeof e)return void i.warn('Directive "v-on:'+this.expression+'" expects a method.');this.reset();var t=this.vm,n=this.context;this.handler=function(i){i.targetVM=t,n.$event=i;var r=e.call(n,i);return n.$event=null,r},this.iframeBind?this.iframeBind():this.el.addEventListener(this.arg,this.handler)},reset:function(){var e=this.iframeBind?this.el.contentWindow:this.el;this.handler&&e.removeEventListener(this.arg,this.handler)},unbind:function(){this.reset(),this.el.removeEventListener("load",this.iframeBind)}}},{"../utils":27}],13:[function(e,t){var i=e("../utils");t.exports={isLiteral:!0,bind:function(){var e=this.expression;if(e){var t=this.el,n=this.compiler,r=n.getOption("partials",e);if(!r)return void("yield"===e&&i.warn("{{>yield}} syntax has been deprecated. Use <content> tag instead."));if(r=r.cloneNode(!0),8===t.nodeType){var s=[].slice.call(r.childNodes),o=t.parentNode;o.insertBefore(r,t),o.removeChild(t),s.forEach(n.compile,n)}else t.innerHTML="",t.appendChild(r)}}}},{"../utils":27}],14:[function(e,t){function i(e,t){for(var i,n=0,r=e.length;r>n;n++)if(i=e[n],!i.$reused&&i.$value===t)return n;return-1}var n=e("../utils"),r=e("../config");t.exports={bind:function(){this.identifier="$r"+this.id,this.expCache=n.hash();var e=this.el,t=this.container=e.parentNode;this.childId=this.compiler.eval(n.attr(e,"ref")),this.ref=document.createComment(r.prefix+"-repeat-"+this.key),t.insertBefore(this.ref,e),t.removeChild(e),this.collection=null,this.vms=null},update:function(e){Array.isArray(e)||(n.isObject(e)?e=n.objectToArray(e):n.warn("v-repeat only accepts Array or Object values.")),this.oldVMs=this.vms,this.oldCollection=this.collection,e=this.collection=e||[];var t=e[0]&&n.isObject(e[0]);this.vms=this.oldCollection?this.diff(e,t):this.init(e,t),this.childId&&(this.vm.$[this.childId]=this.vms)},init:function(e,t){for(var i,n=[],r=0,s=e.length;s>r;r++)i=this.build(e[r],r,t),n.push(i),this.compiler.init?this.container.insertBefore(i.$el,this.ref):i.$before(this.ref);return n},diff:function(e,t){var n,r,s,o,a,c,l,u,h=this.container,f=this.oldVMs,d=[];for(d.length=e.length,n=0,r=e.length;r>n;n++)s=e[n],t?(s.$index=n,s.__emitter__&&s.__emitter__[this.identifier]?s.$reused=!0:d[n]=this.build(s,n,t)):(a=i(f,s),a>-1?(f[a].$reused=!0,f[a].$data.$index=n):d[n]=this.build(s,n,t));for(n=0,r=f.length;r>n;n++)o=f[n],s=this.arg?o.$data[this.arg]:o.$data,s.$reused&&(o.$reused=!0,delete s.$reused),o.$reused?(o.$index=s.$index,s.$key&&s.$key!==o.$key&&(o.$key=s.$key),d[o.$index]=o):(s.__emitter__&&delete s.__emitter__[this.identifier],o.$destroy());for(n=d.length;n--;)if(o=d[n],s=o.$data,c=d[n+1],o.$reused){for(u=o.$el.nextSibling;!u.vue_vm&&u!==this.ref;)u=u.nextSibling;if(l=u.vue_vm,l!==c)if(c){for(u=c.$el;!u.parentNode;)c=d[u.vue_vm.$index+1],u=c?c.$el:this.ref;h.insertBefore(o.$el,u)}else h.insertBefore(o.$el,this.ref);delete o.$reused,delete s.$index,delete s.$key}else o.$before(c?c.$el:this.ref);return d},build:function(e,t,i){var n,r,s=!i||this.arg;s&&(n=e,r=this.arg||"$value",e={},e[r]=n),e.$index=t;var o=this.el.cloneNode(!0),a=this.compiler.resolveComponent(o,e),c=new a({el:o,data:e,parent:this.vm,compilerOptions:{repeat:!0,expCache:this.expCache}});return i&&((n||e).__emitter__[this.identifier]=!0),c},unbind:function(){if(this.childId&&delete this.vm.$[this.childId],this.vms)for(var e=this.vms.length;e--;)this.vms[e].$destroy()}}},{"../config":5,"../utils":27}],15:[function(e,t){var i=["-webkit-","-moz-","-ms-"];t.exports={bind:function(){var e=this.arg;e&&("$"===e.charAt(0)&&(e=e.slice(1),this.prefixed=!0),this.prop=e)},update:function(e){var t,n=this.prop;if(null!=e&&(e+=""),n){if(e&&(t="!important"===e.slice(-10)?"important":"",t&&(e=e.slice(0,-10).trim())),this.el.style.setProperty(n,e,t),this.prefixed)for(var r=i.length;r--;)this.el.style.setProperty(i[r]+n,e,t)}else this.el.style.cssText=e}}},{}],16:[function(e,t){t.exports={bind:function(){var e=this.raw=this.el,t=e.parentNode,i=this.ref=document.createComment("v-view");t.insertBefore(i,e),t.removeChild(e);for(var n,r=this.inner=document.createElement("div");n=e.firstChild;)r.appendChild(n)},update:function(e){this.unbind();var t=this.compiler.getOption("components",e);t&&(this.childVM=new t({el:this.raw.cloneNode(!0),parent:this.vm,compilerOptions:{rawContent:this.inner.cloneNode(!0)}}),this.el=this.childVM.$el,this.compiler.init?this.ref.parentNode.insertBefore(this.el,this.ref):this.childVM.$before(this.ref))},unbind:function(){this.childVM&&this.childVM.$destroy()}}},{}],17:[function(e,t){var i=e("../utils");t.exports={bind:function(){var e=this,t=e.arg,n=e.key,r=e.compiler,s=e.binding.compiler;return r===s?void(this.alone=!0):void(t&&(r.bindings[t]||r.createBinding(t),r.observer.on("change:"+t,function(t){r.init||(e.lock||(e.lock=!0,i.nextTick(function(){e.lock=!1})),s.vm.$set(n,t))})))},update:function(e){this.alone||this.lock||(this.arg?this.vm.$set(this.arg,e):this.vm.$data!==e&&(this.vm.$data=e))}}},{"../utils":27}],18:[function(e,t){function i(e){this._ctx=e||this}var n=[].slice,r=i.prototype;r.on=function(e,t){return this._cbs=this._cbs||{},(this._cbs[e]=this._cbs[e]||[]).push(t),this},r.once=function(e,t){function i(){n.off(e,i),t.apply(this,arguments)}var n=this;return this._cbs=this._cbs||{},i.fn=t,this.on(e,i),this},r.off=function(e,t){if(this._cbs=this._cbs||{},!arguments.length)return this._cbs={},this;var i=this._cbs[e];if(!i)return this;if(1===arguments.length)return delete this._cbs[e],this;for(var n,r=0;r<i.length;r++)if(n=i[r],n===t||n.fn===t){i.splice(r,1);break}return this},r.emit=function(e,t,i,n){this._cbs=this._cbs||{};var r=this._cbs[e];if(r){r=r.slice(0);for(var s=0,o=r.length;o>s;s++)r[s].call(this._ctx,t,i,n)}return this},r.applyEmit=function(e){this._cbs=this._cbs||{};var t,i=this._cbs[e];if(i){i=i.slice(0),t=n.call(arguments,1);for(var r=0,s=i.length;s>r;r++)i[r].apply(this._ctx,t)}return this},t.exports=i},{}],19:[function(e,t,i){function n(e){return e=e.replace(v,"").replace(m,",").replace(p,"").replace(g,"").replace(b,""),e?e.split(/,+/):[]}function r(e,t,i){var n="",r=0,s=t;if(i&&void 0!==a.get(i,e))return"$temp.";for(;t&&!t.hasKey(e);)t=t.parent,r++;if(t){for(;r--;)n+="$parent.";t.bindings[e]||"$"===e.charAt(0)||t.createBinding(e)}else s.createBinding(e);return n}function s(e,t){var i;try{i=new Function(e)}catch(n){a.warn("Error parsing expression: "+t)}return i}function o(e){return"$"===e.charAt(0)?"\\"+e:e}var a=e("./utils"),c=/"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'/g,l=/"(\d+)"/g,u=/\n/g,h=new RegExp("constructor".split("").join("['\"+, ]*")),f=/\\u\d\d\d\d/,d="break,case,catch,continue,debugger,default,delete,do,else,false,finally,for,function,if,in,instanceof,new,null,return,switch,this,throw,true,try,typeof,var,void,while,with,undefined,abstract,boolean,byte,char,class,const,double,enum,export,extends,final,float,goto,implements,import,int,interface,long,native,package,private,protected,public,short,static,super,synchronized,throws,transient,volatile,arguments,let,yield,Math",p=new RegExp(["\\b"+d.replace(/,/g,"\\b|\\b")+"\\b"].join("|"),"g"),v=/\/\*(?:.|\n)*?\*\/|\/\/[^\n]*\n|\/\/[^\n]*$|'[^']*'|"[^"]*"|[\s\t\n]*\.[\s\t\n]*[$\w\.]+|[\{,]\s*[\w\$_]+\s*:/g,m=/[^\w$]+/g,g=/\b\d[^,]*/g,b=/^,+|,+$/g;i.parse=function(e,t,i){function d(e){var t=y.length;return y[t]=e.replace(u,"\\n"),'"'+t+'"'}function p(e){var n=e.charAt(0);e=e.slice(1);var s="this."+r(e,t,i)+e;return b[e]||(g+=s+";",b[e]=1),n+s}function v(e,t){return y[t]}if(f.test(e)||h.test(e))return void a.warn("Unsafe expression: "+e);var m=n(e);if(!m.length)return s("return "+e,e);m=a.unique(m);var g="",b=a.hash(),y=[],_=new RegExp("[^$\\w\\.]("+m.map(o).join("|")+")[$\\w\\.]*\\b","g"),x=(" "+e).replace(c,d).replace(_,p).replace(l,v);return x=g+"return "+x,s(x,e)},i.eval=function(e,t,n){var r,s=i.parse(e,t,n);return s&&(t.vm.$temp=n,r=s.call(t.vm),delete t.vm.$temp),r}},{"./utils":27}],20:[function(e,t){function i(e,t){if(r.isObject(e)){for(var n in e)if(i(e[n],t))return!0}else if(null!=e)return e.toString().toLowerCase().indexOf(t)>-1}function n(e){return a.test(e)?e.slice(1,-1):void 0}var r=e("./utils"),s=r.get,o=[].slice,a=/^'.*'$/,c=t.exports=r.hash();c.capitalize=function(e){return e||0===e?(e=e.toString(),e.charAt(0).toUpperCase()+e.slice(1)):""},c.uppercase=function(e){return e||0===e?e.toString().toUpperCase():""},c.lowercase=function(e){return e||0===e?e.toString().toLowerCase():""},c.currency=function(e,t){if(e=parseFloat(e),!e&&0!==e)return"";t=t||"$";var i=Math.floor(e).toString(),n=i.length%3,r=n>0?i.slice(0,n)+(i.length>3?",":""):"",s="."+e.toFixed(2).slice(-2);return t+r+i.slice(n).replace(/(\d{3})(?=\d)/g,"$1,")+s},c.pluralize=function(e){var t=o.call(arguments,1);return t.length>1?t[e-1]||t[t.length-1]:t[e-1]||t[0]+"s"};var l={enter:13,tab:9,"delete":46,up:38,left:37,right:39,down:40,esc:27};c.key=function(e,t){if(e){var i=l[t];return i||(i=parseInt(t,10)),function(t){return t.keyCode===i?e.call(this,t):void 0}}},c.filterBy=function(e,t,o,a){o&&"in"!==o&&(a=o);var c=n(t)||this.$get(t);return c?(c=c.toLowerCase(),a=a&&(n(a)||this.$get(a)),Array.isArray(e)||(e=r.objectToArray(e)),e.filter(function(e){return a?i(s(e,a),c):i(e,c)})):e},c.filterBy.computed=!0,c.orderBy=function(e,t,i){var o=n(t)||this.$get(t);if(!o)return e;Array.isArray(e)||(e=r.objectToArray(e));var a=1;return i&&("-1"===i?a=-1:"!"===i.charAt(0)?(i=i.slice(1),a=this.$get(i)?1:-1):a=this.$get(i)?-1:1),e.slice().sort(function(e,t){return e=s(e,o),t=s(t,o),e===t?0:e>t?a:-a})},c.orderBy.computed=!0},{"./utils":27}],21:[function(e,t){var i={legend:[1,"<fieldset>","</fieldset>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],_default:[0,"",""]};i.td=i.th=[3,"<table><tbody><tr>","</tr></tbody></table>"],i.option=i.optgroup=[1,'<select multiple="multiple">',"</select>"],i.thead=i.tbody=i.colgroup=i.caption=i.tfoot=[1,"<table>","</table>"],i.text=i.circle=i.ellipse=i.line=i.path=i.polygon=i.polyline=i.rect=[1,'<svg xmlns="http://www.w3.org/2000/svg" version="1.1">',"</svg>"];var n=/<([\w:]+)/;t.exports=function(e){var t=document.createDocumentFragment(),r=n.exec(e);if(!r)return t.appendChild(document.createTextNode(e)),t;var s=r[1],o=i[s]||i._default,a=o[0],c=o[1],l=o[2],u=document.createElement("div");for(u.innerHTML=c+e.trim()+l;a--;)u=u.lastChild;if(u.firstChild===u.lastChild)return t.appendChild(u.firstChild),t;for(var h;h=u.firstChild;)1===u.nodeType&&t.appendChild(h);return t}},{}],22:[function(e,t){function i(e){var t=this;e.data&&(e.defaultData=e.data,delete e.data),t!==s&&(e=n(e,t.options,!0)),o.processOptions(e);var r=function(i,r){r||(i=n(i,e,!0)),t.call(this,i,!0)},a=r.prototype=Object.create(t.prototype);return o.defProtected(a,"constructor",r),r.extend=i,r.super=t,r.options=e,c.forEach(function(e){r[e]=s[e]}),r.use=s.use,r.require=s.require,r}function n(e,t,i){if(e=e||{},!t)return e;for(var r in t)if("el"!==r){var a=e[r],c=t[r];i&&"function"==typeof a&&c?(e[r]=[a],Array.isArray(c)?e[r]=e[r].concat(c):e[r].push(c)):!i||!o.isTrueObject(a)&&!o.isTrueObject(c)||c instanceof s?void 0===a&&(e[r]=c):e[r]=n(a,c)}return e}var r=e("./config"),s=e("./viewmodel"),o=e("./utils"),a=o.hash,c=["directive","filter","partial","effect","component"],l={utils:o,config:r,transition:e("./transition"),observer:e("./observer")};s.options=r.globalAssets={directives:e("./directives"),filters:e("./filters"),partials:a(),effects:a(),components:a()},c.forEach(function(e){s[e]=function(t,i){var n=this.options[e+"s"];return n||(n=this.options[e+"s"]=a()),i?("partial"===e?i=o.parseTemplateOption(i):"component"===e?i=o.toConstructor(i):"filter"===e&&o.checkFilter(i),n[t]=i,this):n[t]}}),s.config=function(e,t){if("string"==typeof e){if(void 0===t)return r[e];r[e]=t}else o.extend(r,e);return this},s.use=function(t){if("string"==typeof t)try{t=e(t)}catch(i){return void o.warn("Cannot find plugin: "+t)}var n=[].slice.call(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):t.apply(null,n),this},s.require=function(e){return l[e]},s.extend=i,s.nextTick=o.nextTick,t.exports=s},{"./config":5,"./directives":10,"./filters":20,"./observer":23,"./transition":26,"./utils":27,"./viewmodel":28}],23:[function(e,t){function i(e){_(O,e,function(){var t,i,s=C.call(arguments),o=Array.prototype[e].apply(this,s);
return"push"===e||"unshift"===e?t=s:"pop"===e||"shift"===e?i=[o]:"splice"===e&&(t=s.slice(2),i=o),n(this,t),r(this,i),this.__emitter__.emit("mutate","",this,{method:e,args:s,result:o,inserted:t,removed:i}),o},!E)}function n(e,t){if(t)for(var i,n,r=t.length;r--;)i=t[r],s(i)&&(i.__emitter__||(o(i),c(i)),n=i.__emitter__.owners,n.indexOf(e)<0&&n.push(e))}function r(e,t){if(t)for(var i,n=t.length;n--;)if(i=t[n],i&&i.__emitter__){var r=i.__emitter__.owners;r&&r.splice(r.indexOf(e))}}function s(e){return"object"==typeof e&&e&&!e.$compiler}function o(e){if(e.__emitter__)return!0;var t=new b;return _(e,"__emitter__",t),t.on("set",function(t,i,n){n&&a(e)}).on("mutate",function(){a(e)}),t.values=y.hash(),t.owners=[],!1}function a(e){for(var t=e.__emitter__.owners,i=t.length;i--;)t[i].__emitter__.emit("set","","",!0)}function c(e){$(e)?h(e):u(e)}function l(e,t){if(E)e.__proto__=t;else for(var i in t)_(e,i,t[i])}function u(e){l(e,A);for(var t in e)f(e,t)}function h(e){l(e,O),n(e,e)}function f(e,t,i){function n(e,i){o[t]=e,s.emit("set",t,e,i),$(e)&&s.emit("set",t+".length",e.length,i),m(e,t,s)}var r=t.charAt(0);if("$"!==r&&"_"!==r){var s=e.__emitter__,o=s.values;n(e[t],i),k(e,t,{enumerable:!0,configurable:!0,get:function(){var e=o[t];return N.shouldGet&&s.emit("get",t),e},set:function(e){var i=o[t];g(i,t,s),p(e,i),n(e,!0)}})}}function d(e){var t=e&&e.__emitter__;if(t)if($(e))t.emit("set","length",e.length);else{var i,n;for(i in e)n=e[i],t.emit("set",i,n),d(n)}}function p(e,t){if(x(e)&&x(t)){var i,n,r;for(i in t)w.call(e,i)||(n=t[i],$(n)?e[i]=[]:x(n)?(r=e[i]={},p(r,n)):e[i]=void 0)}}function v(e,t){for(var i,n=t.split("."),r=0,s=n.length-1;s>r;r++)i=n[r],e[i]||(e[i]={},e.__emitter__&&f(e,i)),e=e[i];x(e)&&(i=n[r],w.call(e,i)||(e[i]=void 0,e.__emitter__&&f(e,i)))}function m(e,t,i){if(s(e)){var n=t?t+".":"",r=o(e),a=e.__emitter__;i.proxies=i.proxies||{};var l=i.proxies[n]={get:function(e){i.emit("get",n+e)},set:function(r,s,o){r&&i.emit("set",n+r,s),t&&o&&i.emit("set",t,e,!0)},mutate:function(e,r,s){var o=e?n+e:t;i.emit("mutate",o,r,s);var a=s.method;"sort"!==a&&"reverse"!==a&&i.emit("set",o+".length",r.length)}};a.on("get",l.get).on("set",l.set).on("mutate",l.mutate),r?d(e):c(e)}}function g(e,t,i){if(e&&e.__emitter__){t=t?t+".":"";var n=i.proxies[t];n&&(e.__emitter__.off("get",n.get).off("set",n.set).off("mutate",n.mutate),i.proxies[t]=null)}}var b=e("./emitter"),y=e("./utils"),_=y.defProtected,x=y.isObject,$=Array.isArray,w={}.hasOwnProperty,k=Object.defineProperty,C=[].slice,E={}.__proto__,O=Object.create(Array.prototype);["push","pop","shift","unshift","splice","sort","reverse"].forEach(i),_(O,"$set",function(e,t){return this.splice(e,1,t)[0]},!E),_(O,"$remove",function(e){return"number"!=typeof e&&(e=this.indexOf(e)),e>-1?this.splice(e,1)[0]:void 0},!E);var A=Object.create(Object.prototype);_(A,"$add",function(e,t){w.call(this,e)||(this[e]=t,f(this,e,!0))},!E),_(A,"$delete",function(e){w.call(this,e)&&(this[e]=void 0,delete this[e],this.__emitter__.emit("delete",e))},!E);var N=t.exports={shouldGet:!1,observe:m,unobserve:g,ensurePath:v,copyPaths:p,watch:c,convert:o,convertKey:f}},{"./emitter":18,"./utils":27}],24:[function(e,t){var i=e("./fragment");t.exports=function(e){var t;if(e instanceof window.DocumentFragment)return e;if("string"==typeof e){if("#"!==e.charAt(0))return i(e);if(t=document.getElementById(e.slice(1)),!t)return}else{if(!e.nodeType)return;t=e}return"TEMPLATE"===t.tagName&&t.content?t.content:i("SCRIPT"===t.tagName?t.innerHTML:t.outerHTML)}},{"./fragment":21}],25:[function(e,t,i){function n(){var e=r(u),t=r(h);return new RegExp(e+e+e+"?(.+?)"+t+"?"+t+t)}function r(e){return e.replace(f,"\\$&")}function s(e){u=e[0],h=e[1],i.delimiters=e,i.Regex=n()}function o(e){if(!i.Regex.test(e))return null;for(var t,n,r,s,o=[];t=e.match(i.Regex);)n=t.index,n>0&&o.push(e.slice(0,n)),r={key:t[1].trim()},s=t[0],r.html=s.charAt(2)===u&&s.charAt(s.length-3)===h,o.push(r),e=e.slice(n+t[0].length);return e.length&&o.push(e),o}function a(t){l=l||e("./directive");var i=o(t);if(!i)return null;if(1===i.length)return i[0].key;for(var n,r=[],s=0,a=i.length;a>s;s++)n=i[s],r.push(n.key?c(n.key):'"'+n+'"');return r.join("+")}function c(e){if(e.indexOf("|")>-1){var t=l.parse(e),i=t&&t[0];i&&i.filters&&(e=l.inlineFilters(i.key,i.filters))}return"("+e+")"}var l,u="{",h="}",f=/[-.*+?^${}()|[\]\/\\]/g;i.Regex=n(),i.parse=o,i.parseAttr=a,i.setDelimiters=s,i.delimiters=[u,h]},{"./directive":7}],26:[function(e,t){function i(e,t,i,n){if(!s.trans)return i(),h.CSS_SKIP;var r,a=e.classList,l=e.vue_trans_cb,u=o.enterClass,f=o.leaveClass,d=n?s.anim:s.trans;return l&&(e.removeEventListener(d,l),a.remove(u),a.remove(f),e.vue_trans_cb=null),t>0?(a.add(u),i(),n?(r=function(t){t.target===e&&(e.removeEventListener(d,r),e.vue_trans_cb=null,a.remove(u))},e.addEventListener(d,r),e.vue_trans_cb=r):c.push({execute:function(){a.remove(u)}}),h.CSS_E):(e.offsetWidth||e.offsetHeight?(a.add(f),r=function(t){t.target===e&&(e.removeEventListener(d,r),e.vue_trans_cb=null,i(),a.remove(f))},e.addEventListener(d,r),e.vue_trans_cb=r):i(),h.CSS_L)}function n(e,t,i,n,r){function s(t,i){var n=l(function(){t(),f.splice(f.indexOf(n),1),f.length||(e.vue_timeouts=null)},i);f.push(n)}var o=r.getOption("effects",n);if(!o)return i(),h.JS_SKIP;var a=o.enter,c=o.leave,f=e.vue_timeouts;if(f)for(var d=f.length;d--;)u(f[d]);return f=e.vue_timeouts=[],t>0?"function"!=typeof a?(i(),h.JS_SKIP_E):(a(e,i,s),h.JS_E):"function"!=typeof c?(i(),h.JS_SKIP_L):(c(e,i,s),h.JS_L)}function r(){var e=document.createElement("vue"),t="transitionend",i={webkitTransition:"webkitTransitionEnd",transition:t,mozTransition:t},n={};for(var r in i)if(void 0!==e.style[r]){n.trans=i[r];break}return n.anim=""===e.style.animation?"animationend":"webkitAnimationEnd",n}var s=r(),o=e("./config"),a=e("./batcher"),c=new a,l=window.setTimeout,u=window.clearTimeout,h={CSS_E:1,CSS_L:2,JS_E:3,JS_L:4,CSS_SKIP:-1,JS_SKIP:-2,JS_SKIP_E:-3,JS_SKIP_L:-4,INIT:-5,SKIP:-6};c._preFlush=function(){document.body.offsetHeight};var f=t.exports=function(e,t,r,s){var o=function(){r(),s.execHook(t>0?"attached":"detached")};if(s.init)return o(),h.INIT;var a=""===e.vue_trans,c=""===e.vue_anim,l=e.vue_effect;return l?n(e,t,o,l,s):a||c?i(e,t,o,c):(o(),h.SKIP)};f.codes=h,f.sniff=r},{"./batcher":2,"./config":5}],27:[function(e,t){function i(e){return e.indexOf("[")<0?e:e.replace(f,".$1").replace(d,".$1")}function n(){m.log=function(e){s.debug&&c&&c.log(e)},m.warn=function(e){!s.silent&&c&&(c.warn(e),s.debug&&c.trace&&c.trace())}}var r,s=e("./config"),o={}.toString,a=window,c=a.console,l=Object.defineProperty,u="object",h=/[^\w]this[^\w]/,f=/\['([^']+)'\]/g,d=/\["([^"]+)"\]/g,p="classList"in document.documentElement,v=a.requestAnimationFrame||a.webkitRequestAnimationFrame||a.setTimeout,m=t.exports={toFragment:e("./fragment"),parseTemplateOption:e("./template-parser.js"),get:function(e,t){if(t=i(t),t.indexOf(".")<0)return e[t];for(var n=t.split("."),r=-1,s=n.length;++r<s&&null!=e;)e=e[n[r]];return e},set:function(e,t,n){if(t=i(t),t.indexOf(".")<0)return void(e[t]=n);for(var r=t.split("."),s=-1,o=r.length-1;++s<o;)null==e[r[s]]&&(e[r[s]]={}),e=e[r[s]];e[r[s]]=n},baseKey:function(e){return e.indexOf(".")>0?e.split(".")[0]:e},hash:function(){return Object.create(null)},attr:function(e,t){var i=s.prefix+"-"+t,n=e.getAttribute(i);return null!==n&&e.removeAttribute(i),n},defProtected:function(e,t,i,n,r){l(e,t,{value:i,enumerable:n,writable:r,configurable:!0})},isObject:function(e){return typeof e===u&&e&&!Array.isArray(e)},isTrueObject:function(e){return"[object Object]"===o.call(e)},bind:function(e,t){return function(i){return e.call(t,i)}},guard:function(e){return null==e?"":"object"==typeof e?JSON.stringify(e):e},checkNumber:function(e){return isNaN(e)||null===e||"boolean"==typeof e?e:Number(e)},extend:function(e,t){for(var i in t)e[i]!==t[i]&&(e[i]=t[i]);return e},unique:function(e){for(var t,i=m.hash(),n=e.length,r=[];n--;)t=e[n],i[t]||(i[t]=1,r.push(t));return r},toConstructor:function(t){return r=r||e("./viewmodel"),m.isObject(t)?r.extend(t):"function"==typeof t?t:null},checkFilter:function(e){h.test(e.toString())&&(e.computed=!0)},processOptions:function(e){var t,i=e.components,n=e.partials,r=e.template,s=e.filters;if(i)for(t in i)i[t]=m.toConstructor(i[t]);if(n)for(t in n)n[t]=m.parseTemplateOption(n[t]);if(s)for(t in s)m.checkFilter(s[t]);r&&(e.template=m.parseTemplateOption(r))},nextTick:function(e){v(e,0)},addClass:function(e,t){if(p)e.classList.add(t);else{var i=" "+e.className+" ";i.indexOf(" "+t+" ")<0&&(e.className=(i+t).trim())}},removeClass:function(e,t){if(p)e.classList.remove(t);else{for(var i=" "+e.className+" ",n=" "+t+" ";i.indexOf(n)>=0;)i=i.replace(n," ");e.className=i.trim()}},objectToArray:function(e){var t,i,n=[];for(var r in e)t=e[r],i=m.isObject(t)?t:{$value:t},i.$key=r,n.push(i);return n}};n()},{"./config":5,"./fragment":21,"./template-parser.js":24,"./viewmodel":28}],28:[function(e,t){function i(e){e!==!1&&new r(this,e)}function n(e){return"string"==typeof e?document.querySelector(e):e}var r=e("./compiler"),s=e("./utils"),o=e("./transition"),a=e("./batcher"),c=[].slice,l=s.defProtected,u=s.nextTick,h=new a,f=1,d=i.prototype;l(d,"$init",function(e){new r(this,e)}),l(d,"$get",function(e){var t=s.get(this,e);return void 0===t&&this.$parent?this.$parent.$get(e):t}),l(d,"$set",function(e,t){s.set(this,e,t)}),l(d,"$watch",function(e,t){function i(){var e=c.call(arguments);h.push({id:n,override:!0,execute:function(){t.apply(r,e)}})}var n=f++,r=this;t._fn=i,r.$compiler.observer.on("change:"+e,i)}),l(d,"$unwatch",function(e,t){var i=["change:"+e],n=this.$compiler.observer;t&&i.push(t._fn),n.off.apply(n,i)}),l(d,"$destroy",function(e){this.$compiler.destroy(e)}),l(d,"$broadcast",function(){for(var e,t=this.$compiler.children,i=t.length;i--;)e=t[i],e.emitter.applyEmit.apply(e.emitter,arguments),e.vm.$broadcast.apply(e.vm,arguments)}),l(d,"$dispatch",function(){var e=this.$compiler,t=e.emitter,i=e.parent;t.applyEmit.apply(t,arguments),i&&i.vm.$dispatch.apply(i.vm,arguments)}),["emit","on","off","once"].forEach(function(e){var t="emit"===e?"applyEmit":e;l(d,"$"+e,function(){var e=this.$compiler.emitter;e[t].apply(e,arguments)})}),l(d,"$appendTo",function(e,t){e=n(e);var i=this.$el;o(i,1,function(){e.appendChild(i),t&&u(t)},this.$compiler)}),l(d,"$remove",function(e){var t=this.$el;o(t,-1,function(){t.parentNode&&t.parentNode.removeChild(t),e&&u(e)},this.$compiler)}),l(d,"$before",function(e,t){e=n(e);var i=this.$el;o(i,1,function(){e.parentNode.insertBefore(i,e),t&&u(t)},this.$compiler)}),l(d,"$after",function(e,t){e=n(e);var i=this.$el;o(i,1,function(){e.nextSibling?e.parentNode.insertBefore(i,e.nextSibling):e.parentNode.appendChild(i),t&&u(t)},this.$compiler)}),t.exports=i},{"./batcher":2,"./compiler":4,"./transition":26,"./utils":27}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXguY29mZmVlIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvYmF0Y2hlci5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2JpbmRpbmcuanMiLCJub2RlX21vZHVsZXMvdnVlL3NyYy9jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2NvbmZpZy5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2RlcHMtcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvZGlyZWN0aXZlLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvZGlyZWN0aXZlcy9odG1sLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvZGlyZWN0aXZlcy9pZi5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2RpcmVjdGl2ZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvdnVlL3NyYy9kaXJlY3RpdmVzL21vZGVsLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvZGlyZWN0aXZlcy9vbi5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2RpcmVjdGl2ZXMvcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2RpcmVjdGl2ZXMvcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvZGlyZWN0aXZlcy9zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2RpcmVjdGl2ZXMvdmlldy5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2RpcmVjdGl2ZXMvd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2VtaXR0ZXIuanMiLCJub2RlX21vZHVsZXMvdnVlL3NyYy9leHAtcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvZmlsdGVycy5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL2ZyYWdtZW50LmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy92dWUvc3JjL29ic2VydmVyLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvdGVtcGxhdGUtcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvdGV4dC1wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvdnVlL3NyYy90cmFuc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9zcmMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvdnVlL3NyYy92aWV3bW9kZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUFBLFFBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUEsQ0FBQSxJQUFBLEVBQUEsR0FBQSxDQUFBLEdBQUEsR0FBQSxrQkFBQSxVQUFBLE9BQUEsS0FBQSxHQUFBLEVBQUEsTUFBQSxHQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxHQUFBLEdBQUEsRUFBQSxJQUFBLEdBQUEsR0FBQSxPQUFBLHVCQUFBLEVBQUEsSUFBQSxNQUFBLEdBQUEsS0FBQSxtQkFBQSxFQUFBLEdBQUEsR0FBQSxFQUFBLElBQUEsV0FBQSxHQUFBLEdBQUEsR0FBQSxLQUFBLEVBQUEsUUFBQSxTQUFBLEdBQUEsR0FBQSxHQUFBLEVBQUEsR0FBQSxHQUFBLEVBQUEsT0FBQSxHQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsTUFBQSxHQUFBLEdBQUEsUUFBQSxJQUFBLEdBQUEsR0FBQSxrQkFBQSxVQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLElBQUEsRUFBQSxFQUFBLEdBQUEsT0FBQSxLQUFBLEdBQUEsU0FBQSxHQ0FBLEdBQUEsRUFBQSxLQUFBLEVBQU0sRUFBUSxTQUdaLEdBQUksUUFDSixNQUNFLE1BQU8sdUNDSFgsUUFBQSxLQUNBLEtBQUEsUUFIQSxHQUFBLEdBQUEsRUFBQSxXQU1BLEVBQUEsRUFBQSxTQUVBLEdBQUEsS0FBQSxTQUFBLEdBQ0EsR0FBQSxFQUFBLElBQUEsS0FBQSxJQUFBLEVBQUEsS0FPQSxHQUFBLEVBQUEsU0FBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLElBQUEsRUFBQSxHQUNBLEdBQUEsV0FBQSxFQUNBLEtBQUEsTUFBQSxLQUFBLEdBQ0EsS0FBQSxJQUFBLEVBQUEsSUFBQSxPQVZBLE1BQUEsTUFBQSxLQUFBLEdBQ0EsS0FBQSxJQUFBLEVBQUEsSUFBQSxFQUNBLEtBQUEsVUFDQSxLQUFBLFNBQUEsRUFDQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEtBQUEsTUFBQSxTQVVBLEVBQUEsTUFBQSxXQUVBLEtBQUEsV0FBQSxLQUFBLFdBR0EsS0FBQSxHQUFBLEdBQUEsRUFBQSxFQUFBLEtBQUEsTUFBQSxPQUFBLElBQUEsQ0FDQSxHQUFBLEdBQUEsS0FBQSxNQUFBLEVBQ0EsR0FBQSxXQUNBLEVBQUEsVUFHQSxLQUFBLFNBR0EsRUFBQSxNQUFBLFdBQ0EsS0FBQSxJQUFBLEVBQUEsT0FDQSxLQUFBLFNBQ0EsS0FBQSxTQUFBLEdBR0EsRUFBQSxRQUFBLG9DQ2pDQSxRQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxLQUFBLEdBQUEsSUFDQSxLQUFBLE1BQUEsT0FDQSxLQUFBLFFBQUEsRUFDQSxLQUFBLEtBQUEsRUFDQSxLQUFBLE1BQUEsS0FBQSxPQUFBLEtBQUEsRUFBQSxRQUFBLEtBQ0EsS0FBQSxTQUFBLEVBQ0EsS0FBQSxJQUFBLEVBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxTQUFBLEVBdEJBLEdBQUEsR0FBQSxFQUFBLGFBQ0EsRUFBQSxHQUFBLEdBQ0EsRUFBQSxFQXVCQSxFQUFBLEVBQUEsU0FLQSxHQUFBLE9BQUEsU0FBQSxHQUlBLEtBSEEsS0FBQSxZQUFBLEtBQUEsUUFDQSxLQUFBLE1BQUEsR0FFQSxLQUFBLEtBQUEsUUFBQSxLQUFBLEtBQUEsT0FBQSxDQUNBLEdBQUEsR0FBQSxJQUNBLEdBQUEsTUFDQSxHQUFBLEtBQUEsR0FDQSxRQUFBLFdBQ0EsRUFBQSxTQUNBLEVBQUEsZUFVQSxFQUFBLFFBQUEsV0FHQSxJQUZBLEdBQUEsR0FBQSxLQUFBLEtBQUEsT0FDQSxFQUFBLEtBQUEsTUFDQSxLQUNBLEtBQUEsS0FBQSxHQUFBLFFBQUEsRUFFQSxNQUFBLE9BT0EsRUFBQSxJQUFBLFdBQ0EsTUFBQSxNQUFBLGFBQUEsS0FBQSxLQUNBLEtBQUEsTUFBQSxPQUNBLEtBQUEsT0FPQSxFQUFBLElBQUEsV0FFQSxJQURBLEdBQUEsR0FBQSxLQUFBLEtBQUEsT0FDQSxLQUNBLEtBQUEsS0FBQSxHQUFBLFVBT0EsRUFBQSxPQUFBLFdBS0EsS0FBQSxTQUFBLENBRUEsS0FEQSxHQUFBLEdBQUEsS0FBQSxLQUFBLE9BQ0EsS0FDQSxLQUFBLEtBQUEsR0FBQSxTQUVBLEdBQUEsS0FBQSxLQUFBLE1BRUEsS0FEQSxHQUFBLEdBQ0EsS0FBQSxDQUNBLEVBQUEsS0FBQSxLQUFBLEdBQUEsSUFDQSxJQUFBLEdBQUEsRUFBQSxRQUFBLEtBQ0EsR0FBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEtBSUEsRUFBQSxRQUFBLHFDQ2pFQSxRQUFBLEdBQUEsRUFBQSxHQUVBLEdBQ0EsR0FBQSxFQURBLEVBQUEsSUFJQSxHQUFBLE1BQUEsRUFDQSxFQUFBLFdBQUEsRUFHQSxFQUFBLEVBQUEsUUFBQSxNQUNBLEVBQUEsZUFBQSxHQUdBLEVBQUEsRUFBQSxFQUFBLGlCQUVBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFFQSxFQUFBLFNBQUEsRUFBQSxZQUdBLElBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxhQUFBLEVBQ0EsR0FBQSxJQUFBLHNCQUFBLEVBQUEsUUFBQSxNQUdBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFDQSxFQUFBLFNBQUEsRUFBQSxPQUNBLEVBQUEsUUFDQSxFQUFBLFlBQ0EsRUFBQSxZQUNBLEVBQUEsWUFDQSxFQUFBLFFBQUEsR0FBQSxHQUFBLEdBS0EsRUFBQSxLQUNBLEVBQUEsSUFBQSxFQUNBLEVBQUEsU0FBQSxFQUNBLEVBQUEsVUFBQSxFQUNBLEVBQUEsT0FBQSxJQUdBLElBQUEsR0FBQSxFQUFBLE1BbUJBLElBbEJBLElBQ0EsRUFBQSxPQUFBLEVBQUEsVUFDQSxFQUFBLFVBQUEsU0FBQSxLQUFBLEdBQ0EsRUFBQSxRQUFBLEVBRUEsUUFBQSxLQUNBLEVBQUEsS0FBQSxFQUFBLE9BQUEsUUFBQSxPQUdBLEVBQUEsTUFBQSxFQUFBLEdBQUEsR0FNQSxFQUFBLGdCQUdBLEVBQUEsUUFDQSxJQUFBLElBQUEsR0FBQSxRQUNBLEVBQUEsY0FBQSxFQUtBLElBQUEsRUFBQSxTQUNBLElBQUEsSUFBQSxHQUFBLFNBQ0EsRUFBQSxjQUFBLEVBS0EsSUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLFNBQ0EsRUFBQSxFQUFBLFdBQ0EsSUFBQSxFQUNBLElBQUEsSUFBQSxHQUNBLEVBQUEsS0FBQSxFQUFBLEtBQ0EsRUFBQSxHQUFBLEVBQUEsR0FNQSxJQUFBLEdBQUEsRUFBQSxlQUNBLElBQUEsRUFFQSxJQURBLEVBQUEsRUFBQSxPQUNBLEtBQ0EsRUFBQSxFQUFBLElBQUEsRUFBQSxZQUNBLEVBQUEsS0FDQSxFQUFBLGFBQUEsRUFBQSxLQVFBLEdBQUEsRUFBQSxHQUNBLEVBQUEsTUFBQSxFQUdBLEVBQUEsU0FBQSxXQUdBLEVBQUEsRUFBQSxLQUFBLEVBQUEsS0FJQSxJQUFBLEVBQ0EsS0FBQSxJQUFBLEdBQ0EsRUFBQSxFQUFBLEdBRUEsTUFBQSxFQUFBLE9BQUEsSUFDQSxFQUFBLEtBQUEsR0FDQSxrQkFBQSxLQUVBLEVBQUEsR0FBQSxFQTBCQSxLQWxCQSxFQUFBLFlBQUEsR0FLQSxFQUFBLFVBQ0EsS0FBQSxpQkFNQSxFQUFBLFFBQUEsR0FBQSxHQUtBLEVBQUEsRUFBQSxTQUFBLE9BQ0EsS0FDQSxFQUFBLGNBQUEsRUFBQSxTQUFBLEdBRUEsR0FBQSxTQUFBLEtBS0EsS0FBQSxTQUFBLFFBQ0EsRUFBQSxNQUFBLEtBQUEsVUFJQSxFQUFBLE1BQUEsRUFHQSxFQUFBLFNBQUEsU0E4ekJBLFFBQUEsR0FBQSxHQUNBLEtBQUEsRUFBQSxRQUNBLEVBQUEsRUFBQSxNQUVBLE9BQUEsR0F6Z0NBLEdBU0EsR0FUQSxFQUFBLEVBQUEsYUFDQSxFQUFBLEVBQUEsY0FDQSxFQUFBLEVBQUEsWUFDQSxFQUFBLEVBQUEsV0FDQSxFQUFBLEVBQUEsYUFDQSxFQUFBLEVBQUEsZUFDQSxFQUFBLEVBQUEsaUJBQ0EsRUFBQSxFQUFBLGlCQUNBLEVBQUEsRUFBQSxnQkFJQSxLQUFBLE1BQ0EsRUFBQSxFQUFBLE9BQ0EsS0FBQSxlQUNBLEVBQUEsT0FBQSxlQUdBLEdBQ0EsVUFBQSxRQUNBLGdCQUFBLGVBQ0EsV0FBQSxZQUtBLEdBQ0EsS0FDQSxTQUNBLE9BQ0EsYUE0S0EsRUFBQSxFQUFBLFNBTUEsR0FBQSxhQUFBLFNBQUEsR0FFQSxHQUtBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFMQSxFQUFBLGdCQUFBLEdBQUEsR0FDQSxTQUFBLGNBQUEsRUFBQSxJQUNBLEVBQUEsSUFBQSxTQUFBLGNBQUEsRUFBQSxTQUFBLE9BRUEsRUFBQSxFQUFBLFFBR0EsSUFBQSxFQUFBLENBRUEsR0FBQSxFQUFBLGdCQUdBLElBRkEsS0FBQSxXQUFBLFNBQUEsY0FBQSxPQUVBLEVBQUEsRUFBQSxZQUNBLEtBQUEsV0FBQSxZQUFBLEVBS0EsSUFBQSxFQUFBLFNBQUEsRUFBQSxhQUFBLEVBQUEsVUFBQSxDQU9BLEdBTkEsRUFBQSxFQUFBLFdBQUEsV0FBQSxHQUNBLEVBQUEsYUFDQSxFQUFBLFdBQUEsYUFBQSxFQUFBLEdBQ0EsRUFBQSxXQUFBLFlBQUEsSUFHQSxFQUFBLGdCQUVBLElBREEsRUFBQSxFQUFBLFdBQUEsT0FDQSxLQUNBLEVBQUEsRUFBQSxXQUFBLEdBQ0EsRUFBQSxhQUFBLEVBQUEsS0FBQSxFQUFBLE1BSUEsR0FBQSxNQUVBLEdBQUEsWUFBQSxFQUFBLFdBQUEsSUFTQSxHQUhBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxJQUNBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxXQUNBLEVBQUEsRUFBQSxXQUVBLElBQUEsSUFBQSxHQUNBLEVBQUEsYUFBQSxFQUFBLEVBQUEsR0FJQSxPQUFBLElBT0EsRUFBQSxlQUFBLFdBcUNBLFFBQUEsR0FBQSxFQUFBLEdBR0EsSUFGQSxHQUFBLEdBQUEsRUFBQSxXQUNBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FDQSxFQUFBLEVBQUEsSUFDQSxFQUFBLGFBQUEsRUFBQSxHQUFBLEVBRUEsR0FBQSxZQUFBLEdBekNBLEdBRUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUZBLEVBQUEsRUFBQSxLQUFBLEtBQUEsR0FBQSxxQkFBQSxZQUNBLEVBQUEsS0FBQSxVQUlBLElBREEsRUFBQSxFQUFBLE9BQ0EsQ0FHQSxLQUFBLEtBQ0EsRUFBQSxFQUFBLEdBQ0EsR0FDQSxFQUFBLEVBQUEsYUFBQSxVQUNBLEVBQ0EsRUFBQSxRQUNBLEVBQUEsS0FBQSxFQUFBLGlCQUFBLElBRUEsRUFBQSxHQUdBLEVBQUEsUUFDQSxFQUFBLEtBQUEsRUFBQSxXQUlBLEtBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxJQUNBLEVBQUEsRUFBQSxHQUNBLElBQUEsR0FDQSxFQUFBLEVBQUEsRUFBQSxRQUdBLElBQUEsR0FDQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsYUFhQSxLQUFBLFdBQUEsTUFTQSxFQUFBLGNBQUEsV0EyQ0EsUUFBQSxHQUFBLEdBQ0EsRUFBQSxHQUNBLEVBQUEsUUFBQSxLQUFBLE1BQUEsRUFBQSxJQUdBLFFBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsVUFBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEdBQ0EsRUFBQSxHQUFBLE9BQUEsR0FHQSxRQUFBLEdBQUEsRUFBQSxHQUNBLEVBQUEsR0FBQSxRQUFBLEVBQUEsV0FDQSxFQUFBLEtBQUEsRUFBQSxNQUlBLFFBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFFBQ0EsSUFBQSxFQUVBLElBREEsR0FBQSxHQUFBLEVBQUEsRUFBQSxPQUNBLEtBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxHQUFBLGFBQ0EsRUFBQSxTQUFBLEVBQUEsV0FBQSxZQUNBLEVBQUEsU0FBQSxLQUFBLEdBQ0EsRUFBQSxRQUFBLEtBQUEsSUFNQSxRQUFBLEdBQUEsR0FDQSxFQUFBLElBQ0EsRUFBQSxjQUFBLEdBM0VBLEdBQUEsR0FBQSxLQUNBLEVBQUEsRUFBQSxTQUNBLEVBQUEsRUFBQSxRQUNBLEVBQUEsRUFBQSxTQUFBLEdBQUEsR0FBQSxFQUFBLEdBSUEsR0FBQSxXQUdBLEVBQ0EsR0FBQSxNQUFBLEdBQ0EsR0FBQSxNQUFBLEdBQ0EsR0FBQSxTQUFBLEVBSUEsS0FEQSxHQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUNBLEtBR0EsR0FGQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsR0FDQSxNQUFBLFFBQUEsR0FJQSxJQUhBLEVBQUEsRUFBQSxPQUdBLEtBQ0EsRUFBQSxFQUFBLEVBQUEsUUFFQSxJQUNBLEVBQUEsRUFBQSxFQUtBLEdBQ0EsR0FBQSxnQkFBQSxXQUNBLEVBQUEsS0FFQSxHQUFBLGdCQUFBLFdBQ0EsRUFBQSxNQTBDQSxFQUFBLFlBQUEsU0FBQSxHQWtDQSxRQUFBLEdBQUEsR0FDQSxVQUFBLEdBQUEsSUFHQSxRQUFBLEtBQ0EsRUFBQSxPQUFBLEVBQUEsTUFDQSxFQUFBLEtBQUEsZUFBQSxFQUFBLE1BdENBLEdBQUEsR0FBQSxLQUNBLEVBQUEsRUFBQSxRQUdBLEdBQUEsUUFBQSxFQUFBLEdBQUEsRUFJQSxJQUFBLEdBQUEsRUFBQSxTQUFBLE1BQUEsR0FBQSxHQUFBLEVBQUEsUUFDQSxHQUFBLE9BQUEsR0FHQSxFQUFBLEVBQUEsR0FBQSxTQUNBLElBQUEsV0FFQSxNQURBLEdBQUEsU0FBQSxLQUFBLE1BQUEsU0FDQSxFQUFBLE1BRUEsSUFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsSUFDQSxHQUFBLFVBQUEsRUFBQSxHQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQUEsR0FDQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEdBQ0EsT0FLQSxFQUNBLEdBQUEsTUFBQSxHQUNBLEdBQUEsU0FBQSxJQWVBLEVBQUEsUUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxRQUNBLEtBQUEsR0FBQSxXQUFBLEVBQUEsUUFDQSxLQUFBLGVBQUEsRUFBQSxHQUNBLElBQUEsR0FBQSxFQUFBLGFBQ0EsS0FBQSxnQkFBQSxJQVFBLEVBQUEsaUJBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxDQVlBLE9BVkEsY0FBQSxHQUNBLEtBQUEsSUFDQSxFQUFBLEtBQUEsaUJBQUEsRUFBQSxRQUFBLEtBRUEsRUFBQSxLQUFBLGVBQUEsRUFBQSxHQUFBLEdBQ0EsRUFBQSxLQUFBLElBRUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxHQUNBLEVBQUEsR0FBQSxLQUFBLGVBQUEsRUFBQSxFQUFBLElBRUEsRUFDQSxLQUFBLE1BQ0EsR0FBQSxLQUNBLGVBQUEsRUFBQSwwR0FLQSxLQUFBLFNBQUEsS0FBQSxJQUNBLEdBVEEsUUFnQkEsRUFBQSxlQUFBLFNBQUEsRUFBQSxHQVlBLEdBUEEsYUFBQSxFQUFBLFNBQUEsRUFBQSxRQUNBLEVBQUEsTUFBQSxLQUFBLEtBQUEsRUFBQSxRQU1BLEVBQUEsaUJBQUEsRUFBQSxRQUFBLFFBQUEsS0FBQSxHQUFBLENBR0EsR0FBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLE9BQ0EsTUFHQSxJQUFBLEdBQUEsRUFBQSxFQUFBLENBS0EsS0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsR0FBQSxLQUFBLGlCQUFBLEVBQUEsR0FBQSxFQUFBLEdBQ0EsTUFLQSxHQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsY0FDQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsYUFDQSxFQUFBLFdBQUEsS0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBRUEsSUFFQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUZBLEVBQUEsRUFBQSxPQUFBLElBQ0EsRUFBQSxLQUFBLFFBQUEsZUFPQSxJQUFBLEVBQUEsQ0FDQSxHQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsT0FDQSxJQUFBLEVBRUEsSUFEQSxFQUFBLEtBQUEsZUFBQSxPQUFBLEVBQUEsR0FBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFDQSxLQUFBLGNBQUEsRUFBQSxHQUFBLEtBQUEsUUFLQSxHQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsV0FDQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFBQSxDQU1BLEdBSkEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEtBQ0EsR0FBQSxFQUVBLElBQUEsRUFBQSxRQUFBLEdBUUEsSUFOQSxHQUFBLEVBQ0EsRUFBQSxFQUFBLE1BQUEsRUFBQSxRQUVBLEVBQUEsS0FBQSxlQUFBLEVBQUEsRUFBQSxNQUFBLEdBQUEsR0FHQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsS0FBQSxjQUFBLEVBQUEsUUFFQSxHQUFBLGNBRUEsRUFBQSxFQUFBLFVBQUEsRUFBQSxPQUNBLElBQ0EsRUFBQSxLQUFBLGVBQUEsT0FBQSxFQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQ0EsR0FBQSxFQUFBLFFBQUEsR0FBQSxHQUdBLEtBQUEsY0FBQSxFQUFBLEtBQUEsUUFFQSxLQUFBLGNBQUEsSUFLQSxJQUFBLFVBQUEsR0FDQSxFQUFBLGdCQUFBLElBT0EsRUFBQSxpQkFDQSxFQUFBLEtBQUEsRUFBQSxZQUFBLFFBQUEsS0FBQSxRQUFBLE9BT0EsRUFBQSxnQkFBQSxTQUFBLEdBRUEsR0FBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLFVBQ0EsSUFBQSxFQUFBLENBR0EsSUFBQSxHQUZBLEdBQUEsRUFBQSxFQUVBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFFQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBRUEsRUFBQSxJQUNBLE1BQUEsRUFBQSxJQUFBLE9BQUEsSUFDQSxFQUFBLFNBQUEsY0FBQSxPQUNBLEVBQUEsS0FBQSxlQUFBLFVBQUEsRUFBQSxJQUFBLE1BQUEsR0FBQSxJQUVBLEVBQUEsTUFJQSxFQUFBLFNBQUEsY0FBQSxFQUFBLE9BQUEsU0FDQSxFQUFBLEtBQUEsZUFBQSxPQUFBLEVBQUEsSUFBQSxLQUpBLEVBQUEsU0FBQSxlQUFBLElBQ0EsRUFBQSxLQUFBLGVBQUEsT0FBQSxFQUFBLElBQUEsSUFPQSxFQUFBLFNBQUEsZUFBQSxHQUlBLEVBQUEsV0FBQSxhQUFBLEVBQUEsR0FFQSxLQUFBLGNBQUEsRUFHQSxHQUFBLFdBQUEsWUFBQSxLQU9BLEVBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBVUEsUUFBQSxHQUFBLEdBQ0EsTUFBQSxJQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQVZBLEdBQUEsR0FBQSxLQUNBLEVBQUEsRUFBQSxVQUFBLGFBQUEsRUFDQSxJQUFBLEVBQUEsQ0FFQSxHQUFBLEdBQUEsRUFBQSxNQUFBLEVBQ0EsT0FBQSxHQUNBLEVBQUEsSUFBQSxHQUNBLEVBQUEsRUFBQSxNQVVBLEVBQUEsY0FBQSxTQUFBLEVBQUEsR0FFQSxHQUFBLEVBQUEsQ0FPQSxHQUpBLEtBQUEsS0FBQSxLQUFBLEdBSUEsRUFBQSxTQUFBLEVBQUEsVUFFQSxZQURBLEVBQUEsTUFBQSxFQUFBLE9BS0EsSUFBQSxHQUNBLEVBQUEsR0FBQSxLQUNBLEVBQUEsRUFBQSxHQUVBLElBQUEsRUFBQSxNQUVBLEVBQUEsRUFBQSxjQUFBLEVBQUEsT0FDQSxDQUVBLEtBQUEsSUFDQSxFQUFBLE9BQUEsSUFHQSxFQUFBLEVBQUEsTUFHQSxHQUFBLEdBQUEsS0FDQSxFQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsY0FBQSxHQUVBLEVBQUEsS0FBQSxLQUFBLEdBQ0EsRUFBQSxRQUFBLENBRUEsSUFBQSxHQUFBLEVBQUEsS0FFQSxHQUFBLE1BQ0EsRUFBQSxLQUFBLEdBR0EsRUFBQSxRQUFBLEdBQUEsS0FNQSxFQUFBLGNBQUEsU0FBQSxFQUFBLEdBRUEsRUFBQSxJQUFBLHNCQUFBLEVBRUEsSUFBQSxHQUFBLEtBQ0EsRUFBQSxFQUFBLFFBQUEsUUFDQSxFQUFBLEdBQUEsRUFBQSxNQUNBLEVBQUEsR0FBQSxFQUFBLE1BQUEsR0FBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLFNBQ0EsRUFBQSxFQUFBLFFBQUEsU0FDQSxFQUFBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUVBLElBQUEsRUFFQSxFQUFBLFVBQUEsRUFBQSxFQUFBLE9BQ0EsSUFBQSxFQUNBLEVBQUEsR0FBQSxFQUNBLEVBQUEsYUFBQSxFQUFBLEVBQUEsRUFBQSxRQUdBLElBREEsRUFBQSxHQUFBLEVBQ0EsRUFBQSxLQUVBLEdBQUEsRUFBQSxHQUVBLEVBQUEsZUFBQSxFQUFBLEVBQUEsRUFBQSxJQUNBLE1BQUEsRUFBQSxPQUFBLEdBRUEsRUFBQSxlQUFBLEVBQUEsSUFJQSxFQUFBLGFBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxVQUNBLEdBQUEsS0FBQSxRQUVBLElBQUEsR0FBQSxFQUFBLEVBQUEsUUFBQSxJQUVBLEVBQUEsVUFBQSxFQUFBLE9BQ0EsQ0FJQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQ0EsSUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsWUFBQSxLQUNBLEdBQUEsSUFHQSxFQUFBLGNBQUEsR0FJQSxNQUFBLElBT0EsRUFBQSxlQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxLQUNBLEVBQUEsRUFBQSxLQUNBLEVBQUEsRUFBQSxXQUlBLEdBQUEsS0FBQSxFQUFBLEtBQ0EsRUFBQSxHQUFBLFFBS0EsSUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLElBQ0EsRUFBQSxXQUFBLEVBQUEsR0FHQSxFQUFBLE1BQUEsRUFBQSxHQUVBLEVBQUEsRUFBQSxHQUFBLEdBQ0EsSUFBQSxXQUNBLE1BQUEsR0FBQSxLQUFBLElBRUEsSUFBQSxTQUFBLEdBQ0EsRUFBQSxLQUFBLEdBQUEsTUFVQSxFQUFBLGFBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxRQUNBLEdBQUEsTUFBQSxFQUNBLEVBQUEsS0FBQSxHQUFBLEdBQ0EsSUFBQSxXQUVBLE1BREEsR0FBQSxXQUFBLEVBQUEsS0FBQSxNQUFBLEdBQ0EsRUFBQSxPQUVBLElBQUEsU0FBQSxHQUNBLEVBQUEsS0FBQSxNQUFBLEVBQUEsT0FTQSxFQUFBLFVBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxFQUFBLFlBQ0EsRUFBQSxFQUFBLEVBQUEsV0FBQSxFQUNBLEVBQUEsS0FBQSxTQUFBLEVBQ0EsS0FDQSxFQUFBLEtBQUEsU0FBQSxHQUFBLEVBQUEsTUFBQSxHQUFBLEVBQUEsT0FFQSxHQUNBLEtBQUEsYUFBQSxFQUFBLElBT0EsRUFBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxhQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsR0FBQSxHQUNBLElBQUEsRUFBQSxNQUFBLEtBQ0EsSUFBQSxFQUFBLE1BQUEsUUFRQSxFQUFBLGFBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxZQUFBLEVBRUEsRUFBQSxLQUNBLEVBQUEsTUFBQSxHQUVBLGtCQUFBLEtBQ0EsR0FBQSxLQUFBLElBRUEsRUFBQSxPQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxLQUFBLElBQ0EsS0FBQSxFQUFBLEtBQ0EsRUFBQSxLQUFBLEVBQUEsS0FBQSxLQUFBLElBQ0EsU0FJQSxLQUFBLFNBQUEsS0FBQSxJQU1BLEVBQUEsVUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxLQUFBLFFBQ0EsRUFBQSxLQUFBLE9BQ0EsRUFBQSxFQUFBLGFBQ0EsRUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEtBQ0EsRUFDQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsR0FBQSxHQUtBLE9BSEEsSUFBQSxHQUFBLGdCQUFBLElBQ0EsRUFBQSxLQUFBLFdBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxLQUFBLEdBRUEsR0FNQSxFQUFBLFNBQUEsU0FBQSxHQUNBLEVBQUEsUUFBQSxFQUNBLEtBQUEsU0FBQSxLQUFBLEdBQ0EsS0FBQSxRQUFBLEtBQUEsSUFNQSxFQUFBLE9BQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFFBQUEsRUFDQSxPQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsSUFDQSxFQUFBLEtBQUEsS0FBQSxHQUFBLElBU0EsRUFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFVBQUEsRUFDQSxPQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQUEsS0FBQSxHQUNBLEdBT0EsRUFBQSxpQkFBQSxTQUFBLEVBQUEsRUFBQSxHQUdBLEVBQUEsR0FBQSxFQUFBLGNBRUEsSUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLGFBQ0EsRUFBQSxFQUFBLFFBQ0EsRUFBQSxLQUFBLEtBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxRQUFBLEtBQUEsR0FBQSxFQUFBLGNBQ0EsRUFBQSxLQUFBLFVBQUEsYUFBQSxHQUFBLEdBQUEsRUFNQSxPQUpBLEtBQUEsR0FDQSxFQUFBLEtBQUEsc0JBQUEsR0FHQSxFQUNBLEtBQUEsRUFDQSxFQUNBLEVBQ0EsR0FBQSxHQU1BLEVBQUEsUUFBQSxTQUFBLEdBSUEsSUFBQSxLQUFBLFVBQUEsQ0FFQSxHQUNBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQURBLEVBQUEsS0FFQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsS0FDQSxFQUFBLEVBQUEsU0FDQSxFQUFBLEVBQUEsU0FDQSxFQUFBLEVBQUEsU0FDQSxFQUFBLEVBQUEsTUFXQSxLQVRBLEVBQUEsU0FBQSxpQkFHQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEdBQUEsRUFBQSxVQUtBLEVBQUEsRUFBQSxPQUNBLEtBQ0EsRUFBQSxHQUFBLFNBQUEsRUFLQSxLQURBLEVBQUEsRUFBQSxPQUNBLEtBQ0EsRUFBQSxFQUFBLEdBS0EsRUFBQSxTQUFBLEVBQUEsUUFBQSxXQUFBLElBQ0EsRUFBQSxFQUFBLFFBQUEsS0FDQSxJQUNBLEVBQUEsRUFBQSxRQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEtBR0EsRUFBQSxTQUtBLEtBREEsRUFBQSxFQUFBLE9BQ0EsS0FDQSxFQUFBLEdBQUEsUUFJQSxLQUFBLElBQUEsR0FDQSxFQUFBLEVBQUEsR0FDQSxHQUNBLEVBQUEsUUFLQSxLQUNBLEVBQUEsRUFBQSxTQUFBLFFBQUEsR0FDQSxFQUFBLElBQUEsRUFBQSxTQUFBLE9BQUEsRUFBQSxJQUlBLElBQ0EsSUFBQSxTQUFBLEtBQ0EsRUFBQSxVQUFBLEdBRUEsRUFBQSxXQUdBLEVBQUEsT0FBQSxLQUVBLEVBQUEsV0FBQSxFQUVBLEVBQUEsU0FBQSxnQkFHQSxFQUFBLFNBQUEsTUFDQSxFQUFBLFFBQUEsUUFlQSxFQUFBLFFBQUEsc0xDNWdDQSxHQUFBLEdBQUEsRUFBQSxnQkFFQSxHQUFBLFNBQ0EsT0FBQSxJQUNBLE9BQUEsRUFDQSxRQUFBLEVBQ0EsV0FBQSxVQUNBLFdBQUEsVUFDQSxhQUFBLEdBR0EsT0FBQSxlQUFBLEVBQUEsUUFBQSxjQUNBLElBQUEsV0FDQSxNQUFBLEdBQUEsWUFFQSxJQUFBLFNBQUEsR0FDQSxFQUFBLGNBQUEsOENDUEEsUUFBQSxHQUFBLEdBQ0EsSUFBQSxFQUFBLEtBQUEsQ0FDQSxFQUFBLElBQUEsT0FBQSxFQUFBLElBQ0EsSUFBQSxHQUFBLEVBQUEsTUFDQSxHQUFBLFFBQ0EsRUFBQSxHQUFBLE1BQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLEVBQUEsSUFHQSxJQUFBLEVBQUEsV0FBQSxFQUFBLFVBR0EsRUFBQSxTQUFBLFNBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxZQUlBLEVBQUEsRUFBQSxLQUFBLEVBQ0EsRUFBQSxJQUFBLE9BQUEsRUFBQSxLQUNBLEVBQUEsS0FBQSxLQUFBLEdBQ0EsRUFBQSxLQUFBLEtBQUEsTUFFQSxFQUFBLE1BQUEsT0FDQSxFQUFBLElBQUEsUUFNQSxRQUFBLEdBQUEsRUFBQSxHQUNBLEtBQUEsR0FBQSxDQUNBLEdBQUEsSUFBQSxFQUNBLE9BQUEsQ0FFQSxHQUFBLEVBQUEsUUExQ0EsR0FBQSxHQUFBLEVBQUEsYUFDQSxFQUFBLEVBQUEsV0FDQSxFQUFBLEVBQUEsY0FDQSxFQUFBLEdBQUEsRUEyQ0EsR0FBQSxTQUtBLFFBQUEsRUFLQSxNQUFBLFNBQUEsR0FDQSxFQUFBLElBQUEsNkJBQ0EsRUFBQSxXQUFBLEVBQ0EsRUFBQSxRQUFBLEdBQ0EsRUFBQSxXQUFBLEVBQ0EsRUFBQSxJQUFBLDhFQ2pEQSxRQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUVBLEtBQUEsR0FBQSxJQUNBLEtBQUEsS0FBQSxFQUNBLEtBQUEsU0FBQSxFQUNBLEtBQUEsR0FBQSxFQUFBLEdBQ0EsS0FBQSxHQUFBLEVBQ0EsS0FBQSxnQkFBQSxFQUNBLEtBQUEsSUFBQSxFQUFBLElBQ0EsS0FBQSxJQUFBLEVBQUEsSUFDQSxLQUFBLFdBQUEsRUFBQSxVQUVBLElBQUEsR0FBQSxLQUFBLEtBQUEsVUFHQSxJQUFBLGtCQUFBLEdBQ0EsS0FBQSxFQUFBLE9BQUEsVUFBQSxNQUVBLEtBQUEsR0FBQSxLQUFBLEdBQ0EsS0FBQSxHQUFBLEVBQUEsRUFLQSxJQUFBLEdBQUEsS0FBQSxRQUVBLFlBREEsS0FBQSxTQUFBLEVBSUEsR0FBQSxNQUFBLEtBQUEsS0FBQSxPQUNBLEtBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxLQUNBLEtBQUEsWUFDQSxLQUFBLFdBQUEsS0FBQSxLQUlBLElBQ0EsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQURBLEVBQUEsRUFBQSxPQUVBLElBQUEsRUFFQSxJQURBLEtBQUEsV0FDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxLQUFBLFNBQUEsVUFBQSxVQUFBLEVBQUEsTUFDQSxJQUNBLEVBQUEsTUFBQSxFQUNBLEtBQUEsUUFBQSxLQUFBLEdBQ0EsRUFBQSxXQUNBLEdBQUEsR0FNQSxNQUFBLFNBQUEsS0FBQSxRQUFBLFNBQ0EsS0FBQSxRQUFBLE1BR0EsSUFDQSxLQUFBLFlBQUEsRUFBQSxjQUFBLEtBQUEsSUFBQSxLQUFBLFNBQ0EsS0FBQSxRQUFBLE1BR0EsS0FBQSxNQUNBLElBQ0EsRUFBQSxLQUFBLEtBQUEsTUFDQSxFQUFBLEtBQUEsS0FBQSxLQThLQSxRQUFBLEdBQUEsR0FDQSxNQUFBLEdBQUEsUUFBQSxLQUFBLEdBQ0EsRUFBQSxRQUFBLEVBQUEsS0FDQSxFQTlQQSxHQUFBLEdBQUEsRUFDQSxFQUFBLGFBQ0EsRUFBQSw0QkFDQSxFQUFBLHFCQUNBLEVBQUEsYUFDQSxFQUFBLEtBQ0EsRUFBQSxFQUFBLGlCQTJFQSxFQUFBLEVBQUEsU0FPQSxHQUFBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsS0FBQSxRQUNBLEdBQUEsSUFBQSxLQUFBLE9BQUEsR0FBQSxnQkFBQSxNQUNBLEtBQUEsTUFBQSxFQUNBLEtBQUEsUUFDQSxLQUFBLE9BQ0EsS0FBQSxVQUFBLEtBQUEsZUFDQSxLQUFBLGNBQUEsR0FDQSxFQUNBLEtBU0EsRUFBQSxjQUFBLFNBQUEsR0FFQSxJQUFBLEdBREEsR0FBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsS0FBQSxRQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxLQUFBLFFBQUEsR0FDQSxFQUFBLEVBQUEsTUFBQSxNQUFBLEtBQUEsSUFBQSxHQUFBLE9BQUEsRUFBQSxNQUVBLE9BQUEsSUFNQSxFQUFBLFFBQUEsV0FFQSxLQUFBLElBQUEsS0FBQSxLQUNBLEtBQUEsUUFBQSxLQUFBLFNBQ0EsS0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBLFFBQUEsS0FBQSxTQUFBLE9BU0EsRUFBQSxNQUFBLFNBQUEsR0FrRUEsUUFBQSxLQUNBLEVBQUEsV0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLE9BQ0EsU0FBQSxFQUFBLElBQ0EsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsT0FDQSxJQUFBLEdBQ0EsS0FFQSxJQUFBLEdBQUEsRUFBQSxNQUNBLEVBQUEsS0FBQSxHQUlBLFFBQUEsS0FDQSxHQUNBLEdBREEsRUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLE1BRUEsSUFBQSxFQUFBLENBQ0EsSUFDQSxJQUFBLEdBQUEsRUFBQSxNQUFBLEVBQ0EsR0FBQSxLQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxNQUFBLEdBQUEsS0FFQSxJQUNBLEVBQUEsUUFBQSxFQUFBLGFBQUEsS0FBQSxHQUVBLEVBQUEsRUFBQSxFQTVFQSxJQUFBLEdBRkEsR0FFQSxFQVpBLEdBQUEsRUFDQSxHQUFBLEVBQ0EsRUFBQSxFQUNBLEVBQUEsRUFDQSxFQUFBLEVBQ0EsRUFBQSxFQUNBLEVBQUEsRUFDQSxLQUNBLEtBQ0EsRUFBQSxFQUdBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEVBQUEsT0FBQSxHQUNBLEVBRUEsTUFBQSxJQUFBLEdBQUEsR0FDQSxFQUVBLE1BQUEsSUFBQSxHQUFBLEdBQ0EsTUFBQSxHQUFBLEdBQUEsR0FBQSxFQU1BLE1BQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxJQU9BLE1BQUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxHQUNBLFNBQUEsRUFBQSxLQUVBLEVBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLFFBR0EsSUFFQSxNQUFBLEVBQ0EsR0FBQSxFQUNBLE1BQUEsRUFDQSxHQUFBLEVBQ0EsTUFBQSxFQUNBLElBQ0EsTUFBQSxFQUNBLElBQ0EsTUFBQSxFQUNBLElBQ0EsTUFBQSxFQUNBLElBQ0EsTUFBQSxFQUNBLElBQ0EsTUFBQSxHQUNBLEtBN0JBLEVBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxPQUNBLEVBQUEsS0FBQSxLQUNBLEVBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxLQVRBLElBRUEsS0FDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBa0VBLFFBL0JBLElBQUEsR0FBQSxJQUFBLElBQ0EsSUE4QkEsR0FPQSxFQUFBLGNBQUEsU0FBQSxFQUFBLEdBRUEsSUFBQSxHQURBLEdBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEtBQ0EsS0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEtBQUEsT0FBQSxJQUNBLEdBQ0EsRUFBQSx3Q0FDQSxFQUFBLEtBQ0EsZ0JBQ0EsRUFBQSxFQUNBLEdBRUEsT0FBQSxJQWFBLEVBQUEsUUFBQSwwQ0NqUUEsR0FBQSxHQUFBLEVBQUEsWUFDQSxLQUFBLEtBS0EsR0FBQSxTQUVBLEtBQUEsV0FHQSxJQUFBLEtBQUEsR0FBQSxXQUVBLEtBQUEsV0FJQSxPQUFBLFNBQUEsR0FDQSxFQUFBLEVBQUEsTUFBQSxHQUNBLEtBQUEsTUFDQSxLQUFBLEtBQUEsR0FFQSxLQUFBLEdBQUEsVUFBQSxHQUlBLEtBQUEsU0FBQSxHQUtBLElBSkEsR0FBQSxHQUFBLEtBQUEsR0FBQSxXQUNBLEVBQUEsS0FBQSxNQUNBLEVBQUEsRUFBQSxPQUVBLEtBQ0EsRUFBQSxZQUFBLEVBQUEsR0FHQSxJQUFBLEdBQUEsRUFBQSxXQUFBLEVBRUEsTUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFlBQ0EsRUFBQSxhQUFBLEVBQUEsS0FBQSx5Q0N0Q0EsR0FBQSxHQUFBLEVBQUEsV0FLQSxHQUFBLFNBRUEsS0FBQSxXQUVBLEtBQUEsT0FBQSxLQUFBLEdBQUEsV0FDQSxLQUFBLElBQUEsU0FBQSxjQUFBLFVBQ0EsS0FBQSxLQUFBLEtBQUEsU0FBQSxpQkFBQSxLQUFBLElBR0EsS0FBQSxPQUFBLGFBQUEsS0FBQSxJQUFBLEtBQUEsSUFDQSxLQUFBLE9BQUEsWUFBQSxLQUFBLElBRUEsRUFBQSxLQUFBLEtBQUEsR0FBQSxTQUNBLEVBQUEsS0FDQSxvSEFJQSxFQUFBLEtBQUEsS0FBQSxHQUFBLFdBQ0EsRUFBQSxLQUNBLHlHQU1BLE9BQUEsU0FBQSxHQUVBLEVBRUEsS0FBQSxVQUNBLEtBQUEsUUFBQSxHQUFBLE1BQUEsTUFDQSxHQUFBLEtBQUEsR0FBQSxXQUFBLEdBQ0EsT0FBQSxLQUFBLEtBRUEsS0FBQSxTQUFBLEtBQ0EsS0FBQSxPQUFBLGFBQUEsS0FBQSxRQUFBLElBQUEsS0FBQSxLQUVBLEtBQUEsUUFBQSxRQUFBLEtBQUEsTUFUQSxLQUFBLFVBZUEsT0FBQSxXQUNBLEtBQUEsVUFDQSxLQUFBLFFBQUEsV0FDQSxLQUFBLFFBQUEsNENDcERBLEdBQUEsR0FBQSxFQUFBLFlBQ0EsRUFBQSxFQUFBLGFBQ0EsRUFBQSxFQUFBLGlCQUNBLEVBQUEsRUFBQSxRQUFBLEVBQUEsTUFLQSxHQUFBLFdBQ0EsV0FBQSxFQUNBLEtBQUEsV0FDQSxLQUFBLEdBQUEsU0FDQSxLQUFBLFFBQUEsR0FBQSxNQUFBLE1BQ0EsR0FBQSxLQUFBLEdBQ0EsT0FBQSxLQUFBLE9BSUEsT0FBQSxXQUNBLEtBQUEsU0FDQSxLQUFBLFFBQUEsYUFRQSxFQUFBLE1BQ0EsS0FBQSxXQUNBLEdBQUEsR0FBQSxLQUFBLEdBQUEsU0FBQSxlQUNBLE1BQUEsUUFBQSxHQUFBLEVBQUEsUUFBQSxLQUFBLEtBQUEsSUFFQSxPQUFBLFNBQUEsR0FDQSxHQUFBLElBQUEsRUFDQSxLQUFBLEdBQUEsYUFBQSxLQUFBLElBQUEsR0FFQSxLQUFBLEdBQUEsZ0JBQUEsS0FBQSxLQUVBLEtBQUEsVUFDQSxLQUFBLEdBQUEsS0FBQSxLQUFBLEVBQUEsWUFBQSxNQVFBLEVBQUEsTUFDQSxLQUFBLFdBQ0EsS0FBQSxLQUFBLElBQUEsS0FBQSxHQUFBLFNBQ0EsWUFDQSxlQUVBLE9BQUEsU0FBQSxHQUNBLEtBQUEsR0FBQSxLQUFBLE1BQUEsRUFBQSxNQUFBLEtBT0EsRUFBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxHQUNBLEVBQUEsRUFBQSxHQUFBLE9BQ0EsRUFBQSxXQUNBLEVBQUEsTUFBQSxRQUFBLEVBRUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxXQU1BLEVBQUEsU0FBQSxTQUFBLEdBQ0EsS0FBQSxJQUNBLEVBQUEsRUFBQSxXQUFBLGVBQUEsS0FBQSxHQUFBLEtBQUEsTUFFQSxLQUFBLFNBQ0EsRUFBQSxZQUFBLEtBQUEsR0FBQSxLQUFBLFNBRUEsSUFDQSxFQUFBLFNBQUEsS0FBQSxHQUFBLEdBQ0EsS0FBQSxRQUFBLEtBUUEsRUFBQSxPQUNBLFNBQUEsRUFDQSxLQUFBLFdBQ0EsR0FBQSxHQUFBLEtBQUEsRUFDQSxNQUFBLFNBQUEsU0FBQSxLQUFBLGFBQUEsV0FDQSxFQUFBLGdCQUFBLEVBQUEsT0FBQSxjQVFBLEVBQUEsS0FDQSxXQUFBLEVBQ0EsS0FBQSxXQUNBLEdBQUEsR0FBQSxLQUFBLFVBQ0EsS0FDQSxLQUFBLEdBQUEsUUFBQSxFQUFBLEdBQUEsS0FBQSxLQUdBLE9BQUEsV0FDQSxHQUFBLEdBQUEsS0FBQSxVQUNBLFVBQ0EsTUFBQSxHQUFBLFFBQUEsRUFBQSxLQUtBLEVBQUEsR0FBQSxFQUFBLFFBQ0EsRUFBQSxPQUFBLEVBQUEsWUFDQSxFQUFBLE1BQUEsRUFBQSxXQUNBLEVBQUEsTUFBQSxFQUFBLFFBQ0EsRUFBQSxRQUFBLEVBQUEsVUFDQSxFQUFBLEtBQUEsRUFBQSxVQUNBLEVBQUEsTUFBQSxFQUFBLFdBQ0EsRUFBQSxRQUFBLEVBQUEsYUFDQSxFQUFBLEtBQUEsRUFBQSw0TEN6SEEsUUFBQSxHQUFBLEdBQ0EsTUFBQSxHQUNBLEtBQUEsRUFBQSxRQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsV0FFQSxJQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsT0FBQSxFQUFBLE9BYkEsR0FBQSxHQUFBLEVBQUEsWUFDQSxFQUFBLFVBQUEsVUFBQSxRQUFBLFlBQUEsRUFDQSxLQUFBLE1Ba0JBLEdBQUEsU0FFQSxLQUFBLFdBRUEsR0FBQSxHQUFBLEtBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEtBQ0EsRUFBQSxFQUFBLE9BRUEsR0FBQSxNQUFBLEVBQ0EsRUFBQSxRQUFBLEVBQUEsUUFBQSxTQUFBLEdBR0EsRUFBQSxNQUNBLEVBQUEsU0FBQSxRQUFBLE1BQ0EsV0FBQSxHQUNBLGFBQUEsR0FBQSxVQUFBLEVBQ0EsU0FDQSxRQUdBLEVBQUEsS0FBQSxhQUFBLEVBQ0EsVUFDQSxVQUFBLEdBQUEsV0FBQSxHQUFBLGFBQUEsRUFDQSxRQUNBLFlBR0EsV0FBQSxHQUFBLEVBQUEsYUFBQSxjQUNBLEtBQUEsT0FBQSxFQUdBLElBQUEsSUFBQSxDQUNBLEdBQUEsTUFBQSxXQUNBLEdBQUEsR0FFQSxFQUFBLFFBQUEsV0FDQSxHQUFBLEdBRUEsRUFBQSxpQkFBQSxtQkFBQSxLQUFBLE9BQ0EsRUFBQSxpQkFBQSxpQkFBQSxLQUFBLFNBR0EsRUFBQSxJQUFBLEVBQUEsUUFDQSxXQUNBLElBQUEsRUFBQSxDQU9BLEdBQUEsRUFDQSxLQUFBLEVBQUEsRUFBQSxlQUFBLE1BQUEsSUFFQSxFQUFBLE9BSUEsRUFBQSxTQUFBLFdBQ0EsU0FBQSxHQUNBLEVBQUEsa0JBQUEsRUFBQSxPQUlBLFdBQ0EsSUFFQSxFQUFBLE1BQUEsRUFFQSxFQUFBLE9BRUEsRUFBQSxTQUFBLFdBQ0EsRUFBQSxNQUFBLE1BR0EsRUFBQSxpQkFBQSxFQUFBLE1BQUEsRUFBQSxLQUlBLElBQ0EsRUFBQSxNQUFBLFdBRUEsRUFBQSxTQUFBLFdBQ0EsRUFBQSxTQUdBLEVBQUEsTUFBQSxTQUFBLElBQ0EsS0FBQSxFQUFBLFNBQUEsSUFBQSxFQUFBLFVBQ0EsRUFBQSxPQUdBLEVBQUEsaUJBQUEsTUFBQSxFQUFBLE9BQ0EsRUFBQSxpQkFBQSxRQUFBLEVBQUEsU0FJQSxLQUFBLFdBQ0EsS0FBQSxRQUFBLEtBQ0EsS0FBQSxJQUFBLEtBQUEsTUFDQSxFQUFBLEtBQUEsSUFDQSxLQUFBLEdBQUEsS0FBQSxRQUlBLE9BQUEsU0FBQSxFQUFBLEdBR0EsR0FBQSxHQUFBLFNBQUEsRUFDQSxNQUFBLE1BQUEsTUFFQSxLQUFBLEtBQUEsS0FBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLEVBQ0EsWUFBQSxFQUFBLFNBQ0EsRUFBQSxjQUFBLEdBQ0EsS0FBQSxPQUFBLE1BQUEsUUFBQSxHQUNBLEVBQUEsUUFBQSxLQUFBLGFBQUEsTUFFQSxLQUFBLGFBQUEsSUFFQSxVQUFBLEVBQUEsS0FDQSxFQUFBLFFBQUEsR0FBQSxFQUFBLE1BQ0EsYUFBQSxFQUFBLEtBQ0EsRUFBQSxVQUFBLEVBRUEsRUFBQSxLQUFBLE1BQUEsRUFBQSxNQUFBLEtBSUEsYUFBQSxTQUFBLEdBTUEsSUFGQSxHQUFBLEdBQUEsS0FBQSxHQUFBLFFBQ0EsRUFBQSxFQUFBLE9BQ0EsS0FDQSxHQUFBLEVBQUEsR0FBQSxPQUFBLEVBQUEsQ0FDQSxFQUFBLEdBQUEsVUFBQSxDQUNBLFNBS0EsT0FBQSxXQUNBLEdBQUEsR0FBQSxLQUFBLEVBQ0EsR0FBQSxvQkFBQSxLQUFBLE1BQUEsS0FBQSxLQUNBLEVBQUEsb0JBQUEsbUJBQUEsS0FBQSxPQUNBLEVBQUEsb0JBQUEsaUJBQUEsS0FBQSxTQUNBLElBQ0EsRUFBQSxvQkFBQSxNQUFBLEtBQUEsT0FDQSxFQUFBLG9CQUFBLFFBQUEsS0FBQSw4Q0MxS0EsR0FBQSxHQUFBLEVBQUEsV0FLQSxHQUFBLFNBRUEsTUFBQSxFQUVBLEtBQUEsV0FJQSxHQUhBLEtBQUEsUUFBQSxLQUFBLFFBQUEsTUFDQSxLQUFBLEdBQ0EsS0FBQSxRQUFBLFNBQUEsR0FDQSxXQUFBLEtBQUEsR0FBQSxTQUFBLFNBQUEsS0FBQSxJQUFBLENBQ0EsR0FBQSxHQUFBLElBQ0EsTUFBQSxXQUFBLFdBQ0EsRUFBQSxHQUFBLGNBQUEsaUJBQUEsRUFBQSxJQUFBLEVBQUEsVUFFQSxLQUFBLEdBQUEsaUJBQUEsT0FBQSxLQUFBLGNBSUEsT0FBQSxTQUFBLEdBQ0EsR0FBQSxrQkFBQSxHQUVBLFdBREEsR0FBQSxLQUFBLG1CQUFBLEtBQUEsV0FBQSxzQkFHQSxNQUFBLE9BQ0EsSUFBQSxHQUFBLEtBQUEsR0FDQSxFQUFBLEtBQUEsT0FDQSxNQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsU0FBQSxFQUNBLEVBQUEsT0FBQSxDQUNBLElBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxFQUVBLE9BREEsR0FBQSxPQUFBLEtBQ0EsR0FFQSxLQUFBLFdBQ0EsS0FBQSxhQUVBLEtBQUEsR0FBQSxpQkFBQSxLQUFBLElBQUEsS0FBQSxVQUlBLE1BQUEsV0FDQSxHQUFBLEdBQUEsS0FBQSxXQUNBLEtBQUEsR0FBQSxjQUNBLEtBQUEsRUFDQSxNQUFBLFNBQ0EsRUFBQSxvQkFBQSxLQUFBLElBQUEsS0FBQSxVQUlBLE9BQUEsV0FDQSxLQUFBLFFBQ0EsS0FBQSxHQUFBLG9CQUFBLE9BQUEsS0FBQSxrREN2REEsR0FBQSxHQUFBLEVBQUEsV0FLQSxHQUFBLFNBRUEsV0FBQSxFQUVBLEtBQUEsV0FFQSxHQUFBLEdBQUEsS0FBQSxVQUNBLElBQUEsRUFBQSxDQUVBLEdBQUEsR0FBQSxLQUFBLEdBQ0EsRUFBQSxLQUFBLFNBQ0EsRUFBQSxFQUFBLFVBQUEsV0FBQSxFQUVBLEtBQUEsRUFJQSxZQUhBLFVBQUEsR0FDQSxFQUFBLEtBQUEscUVBUUEsSUFIQSxFQUFBLEVBQUEsV0FBQSxHQUdBLElBQUEsRUFBQSxTQUFBLENBR0EsR0FBQSxNQUFBLE1BQUEsS0FBQSxFQUFBLFlBQ0EsRUFBQSxFQUFBLFVBQ0EsR0FBQSxhQUFBLEVBQUEsR0FDQSxFQUFBLFlBQUEsR0FJQSxFQUFBLFFBQUEsRUFBQSxRQUFBLE9BS0EsR0FBQSxVQUFBLEdBQ0EsRUFBQSxZQUFBLDBDQ2lNQSxRQUFBLEdBQUEsRUFBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFFQSxHQURBLEVBQUEsRUFBQSxJQUNBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFDQSxNQUFBLEVBR0EsT0FBQSxHQXBQQSxHQUFBLEdBQUEsRUFBQSxZQUNBLEVBQUEsRUFBQSxZQUtBLEdBQUEsU0FFQSxLQUFBLFdBRUEsS0FBQSxXQUFBLEtBQUEsS0FBQSxHQUlBLEtBQUEsU0FBQSxFQUFBLE1BRUEsSUFBQSxHQUFBLEtBQUEsR0FDQSxFQUFBLEtBQUEsVUFBQSxFQUFBLFVBR0EsTUFBQSxRQUFBLEtBQUEsU0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFFBR0EsS0FBQSxJQUFBLFNBQUEsY0FBQSxFQUFBLE9BQUEsV0FBQSxLQUFBLEtBQ0EsRUFBQSxhQUFBLEtBQUEsSUFBQSxHQUNBLEVBQUEsWUFBQSxHQUVBLEtBQUEsV0FBQSxLQUNBLEtBQUEsSUFBQSxNQUlBLE9BQUEsU0FBQSxHQUVBLE1BQUEsUUFBQSxLQUNBLEVBQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxjQUFBLEdBRUEsRUFBQSxLQUFBLGtEQU1BLEtBQUEsT0FBQSxLQUFBLElBQ0EsS0FBQSxjQUFBLEtBQUEsV0FDQSxFQUFBLEtBQUEsV0FBQSxLQUVBLElBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLElBQUEsS0FBQSxjQUNBLEtBQUEsS0FBQSxFQUFBLEdBQ0EsS0FBQSxLQUFBLEVBQUEsR0FFQSxLQUFBLFVBQ0EsS0FBQSxHQUFBLEVBQUEsS0FBQSxTQUFBLEtBQUEsTUFLQSxLQUFBLFNBQUEsRUFBQSxHQUVBLElBQUEsR0FEQSxHQUFBLEtBQ0EsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxJQUNBLEVBQUEsS0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLEdBQ0EsRUFBQSxLQUFBLEdBQ0EsS0FBQSxTQUFBLEtBQ0EsS0FBQSxVQUFBLGFBQUEsRUFBQSxJQUFBLEtBQUEsS0FFQSxFQUFBLFFBQUEsS0FBQSxJQUdBLE9BQUEsSUFPQSxLQUFBLFNBQUEsRUFBQSxHQUVBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQUEsS0FBQSxVQUNBLEVBQUEsS0FBQSxPQUNBLElBS0EsS0FIQSxFQUFBLE9BQUEsRUFBQSxPQUdBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEVBQUEsR0FDQSxHQUNBLEVBQUEsT0FBQSxFQUNBLEVBQUEsYUFBQSxFQUFBLFlBQUEsS0FBQSxZQUdBLEVBQUEsU0FBQSxFQUVBLEVBQUEsR0FBQSxLQUFBLE1BQUEsRUFBQSxFQUFBLEtBS0EsRUFBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLElBRUEsRUFBQSxHQUFBLFNBQUEsRUFDQSxFQUFBLEdBQUEsTUFBQSxPQUFBLEdBRUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxFQUFBLEVBQUEsR0FNQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsSUFDQSxFQUFBLE1BQUEsS0FBQSxLQUNBLEVBQUEsTUFDQSxFQUFBLFVBQ0EsRUFBQSxTQUFBLFFBQ0EsR0FBQSxTQUVBLEVBQUEsU0FFQSxFQUFBLE9BQUEsRUFBQSxPQUVBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxPQUNBLEVBQUEsS0FBQSxFQUFBLE1BRUEsRUFBQSxFQUFBLFFBQUEsSUFHQSxFQUFBLG1CQUNBLEdBQUEsWUFBQSxLQUFBLFlBRUEsRUFBQSxXQU1BLEtBREEsRUFBQSxFQUFBLE9BQ0EsS0FJQSxHQUhBLEVBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxNQUNBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLENBSUEsSUFIQSxFQUFBLEVBQUEsSUFBQSxhQUdBLEVBQUEsUUFBQSxJQUFBLEtBQUEsS0FDQSxFQUFBLEVBQUEsV0FHQSxJQURBLEVBQUEsRUFBQSxPQUNBLElBQUEsRUFDQSxHQUFBLEVBRUEsQ0FJQSxJQUhBLEVBQUEsRUFBQSxLQUdBLEVBQUEsWUFDQSxFQUFBLEVBQUEsRUFBQSxPQUFBLE9BQUEsR0FDQSxFQUFBLEVBQ0EsRUFBQSxJQUNBLEtBQUEsR0FFQSxHQUFBLGFBQUEsRUFBQSxJQUFBLE9BWEEsR0FBQSxhQUFBLEVBQUEsSUFBQSxLQUFBLFdBY0EsR0FBQSxjQUNBLEdBQUEsYUFDQSxHQUFBLFNBRUEsR0FBQSxRQUFBLEVBQUEsRUFBQSxJQUFBLEtBQUEsSUFJQSxPQUFBLElBR0EsTUFBQSxTQUFBLEVBQUEsRUFBQSxHQUdBLEdBQUEsR0FBQSxFQUNBLEdBQUEsR0FBQSxLQUFBLEdBQ0EsS0FDQSxFQUFBLEVBQ0EsRUFBQSxLQUFBLEtBQUEsU0FDQSxLQUNBLEVBQUEsR0FBQSxHQUVBLEVBQUEsT0FBQSxDQUVBLElBQUEsR0FBQSxLQUFBLEdBQUEsV0FBQSxHQUNBLEVBQUEsS0FBQSxTQUFBLGlCQUFBLEVBQUEsR0FDQSxFQUFBLEdBQUEsSUFDQSxHQUFBLEVBQ0EsS0FBQSxFQUNBLE9BQUEsS0FBQSxHQUNBLGlCQUNBLFFBQUEsRUFDQSxTQUFBLEtBQUEsV0FTQSxPQUxBLE1BRUEsR0FBQSxHQUFBLFlBQUEsS0FBQSxhQUFBLEdBR0EsR0FJQSxPQUFBLFdBSUEsR0FIQSxLQUFBLGVBQ0EsTUFBQSxHQUFBLEVBQUEsS0FBQSxTQUVBLEtBQUEsSUFFQSxJQURBLEdBQUEsR0FBQSxLQUFBLElBQUEsT0FDQSxLQUNBLEtBQUEsSUFBQSxHQUFBLCtEQ2pPQSxHQUFBLElBQUEsV0FBQSxRQUFBLE9BS0EsR0FBQSxTQUVBLEtBQUEsV0FDQSxHQUFBLEdBQUEsS0FBQSxHQUNBLEtBQ0EsTUFBQSxFQUFBLE9BQUEsS0FFQSxFQUFBLEVBQUEsTUFBQSxHQUNBLEtBQUEsVUFBQSxHQUVBLEtBQUEsS0FBQSxJQUdBLE9BQUEsU0FBQSxHQUNBLEdBQ0EsR0FEQSxFQUFBLEtBQUEsSUFLQSxJQURBLE1BQUEsSUFBQSxHQUFBLElBQ0EsR0FVQSxHQVRBLElBQ0EsRUFBQSxlQUFBLEVBQUEsTUFBQSxLQUNBLFlBQ0EsR0FDQSxJQUNBLEVBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxTQUdBLEtBQUEsR0FBQSxNQUFBLFlBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxTQUVBLElBREEsR0FBQSxHQUFBLEVBQUEsT0FDQSxLQUNBLEtBQUEsR0FBQSxNQUFBLFlBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxPQUlBLE1BQUEsR0FBQSxNQUFBLFFBQUEsMkJDckNBLEVBQUEsU0FFQSxLQUFBLFdBR0EsR0FBQSxHQUFBLEtBQUEsSUFBQSxLQUFBLEdBQ0EsRUFBQSxFQUFBLFdBQ0EsRUFBQSxLQUFBLElBQUEsU0FBQSxjQUFBLFNBQ0EsR0FBQSxhQUFBLEVBQUEsR0FDQSxFQUFBLFlBQUEsRUFNQSxLQUZBLEdBQUEsR0FDQSxFQUFBLEtBQUEsTUFBQSxTQUFBLGNBQUEsT0FDQSxFQUFBLEVBQUEsWUFDQSxFQUFBLFlBQUEsSUFLQSxPQUFBLFNBQUEsR0FFQSxLQUFBLFFBRUEsSUFBQSxHQUFBLEtBQUEsU0FBQSxVQUFBLGFBQUEsRUFDQSxLQUVBLEtBQUEsUUFBQSxHQUFBLElBQ0EsR0FBQSxLQUFBLElBQUEsV0FBQSxHQUNBLE9BQUEsS0FBQSxHQUNBLGlCQUNBLFdBQUEsS0FBQSxNQUFBLFdBQUEsTUFJQSxLQUFBLEdBQUEsS0FBQSxRQUFBLElBQ0EsS0FBQSxTQUFBLEtBQ0EsS0FBQSxJQUFBLFdBQUEsYUFBQSxLQUFBLEdBQUEsS0FBQSxLQUVBLEtBQUEsUUFBQSxRQUFBLEtBQUEsT0FLQSxPQUFBLFdBQ0EsS0FBQSxTQUNBLEtBQUEsUUFBQSxvQ0NuREEsR0FBQSxHQUFBLEVBQUEsV0FLQSxHQUFBLFNBRUEsS0FBQSxXQUVBLEdBQUEsR0FBQSxLQUNBLEVBQUEsRUFBQSxJQUNBLEVBQUEsRUFBQSxJQUNBLEVBQUEsRUFBQSxTQUNBLEVBQUEsRUFBQSxRQUFBLFFBRUEsT0FBQSxLQUFBLE9BQ0EsS0FBQSxPQUFBLFFBSUEsSUFDQSxFQUFBLFNBQUEsSUFDQSxFQUFBLGNBQUEsR0FHQSxFQUFBLFNBQUEsR0FBQSxVQUFBLEVBQUEsU0FBQSxHQUNBLEVBQUEsT0FDQSxFQUFBLE9BQ0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxTQUFBLFdBQ0EsRUFBQSxNQUFBLEtBR0EsRUFBQSxHQUFBLEtBQUEsRUFBQSxTQUtBLE9BQUEsU0FBQSxHQUVBLEtBQUEsT0FBQSxLQUFBLE9BQ0EsS0FBQSxJQUNBLEtBQUEsR0FBQSxLQUFBLEtBQUEsSUFBQSxHQUNBLEtBQUEsR0FBQSxRQUFBLElBQ0EsS0FBQSxHQUFBLE1BQUEsMENDMUNBLFFBQUEsR0FBQSxHQUNBLEtBQUEsS0FBQSxHQUFBLEtBSEEsR0FBQSxNQUFBLE1BTUEsRUFBQSxFQUFBLFNBRUEsR0FBQSxHQUFBLFNBQUEsRUFBQSxHQUlBLE1BSEEsTUFBQSxLQUFBLEtBQUEsVUFDQSxLQUFBLEtBQUEsR0FBQSxLQUFBLEtBQUEsUUFDQSxLQUFBLEdBQ0EsTUFHQSxFQUFBLEtBQUEsU0FBQSxFQUFBLEdBSUEsUUFBQSxLQUNBLEVBQUEsSUFBQSxFQUFBLEdBQ0EsRUFBQSxNQUFBLEtBQUEsV0FMQSxHQUFBLEdBQUEsSUFVQSxPQVRBLE1BQUEsS0FBQSxLQUFBLFNBT0EsRUFBQSxHQUFBLEVBQ0EsS0FBQSxHQUFBLEVBQUEsR0FDQSxNQUdBLEVBQUEsSUFBQSxTQUFBLEVBQUEsR0FJQSxHQUhBLEtBQUEsS0FBQSxLQUFBLFVBR0EsVUFBQSxPQUVBLE1BREEsTUFBQSxRQUNBLElBSUEsSUFBQSxHQUFBLEtBQUEsS0FBQSxFQUNBLEtBQUEsRUFBQSxNQUFBLEtBR0EsSUFBQSxJQUFBLFVBQUEsT0FFQSxhQURBLE1BQUEsS0FBQSxHQUNBLElBS0EsS0FBQSxHQURBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLElBRUEsR0FEQSxFQUFBLEVBQUEsR0FDQSxJQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FDQSxFQUFBLE9BQUEsRUFBQSxFQUNBLE9BR0EsTUFBQSxPQU9BLEVBQUEsS0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxLQUFBLEtBQUEsUUFDQSxJQUFBLEdBQUEsS0FBQSxLQUFBLEVBRUEsSUFBQSxFQUFBLENBQ0EsRUFBQSxFQUFBLE1BQUEsRUFDQSxLQUFBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxJQUNBLEVBQUEsR0FBQSxLQUFBLEtBQUEsS0FBQSxFQUFBLEVBQUEsR0FJQSxNQUFBLE9BTUEsRUFBQSxVQUFBLFNBQUEsR0FDQSxLQUFBLEtBQUEsS0FBQSxRQUNBLElBQUEsR0FBQSxFQUFBLEtBQUEsS0FBQSxFQUVBLElBQUEsRUFBQSxDQUNBLEVBQUEsRUFBQSxNQUFBLEdBQ0EsRUFBQSxFQUFBLEtBQUEsVUFBQSxFQUNBLEtBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxHQUFBLE1BQUEsS0FBQSxLQUFBLEdBSUEsTUFBQSxPQUdBLEVBQUEsUUFBQSwyQkMvREEsUUFBQSxHQUFBLEdBT0EsTUFOQSxHQUFBLEVBQ0EsUUFBQSxFQUFBLElBQ0EsUUFBQSxFQUFBLEtBQ0EsUUFBQSxFQUFBLElBQ0EsUUFBQSxFQUFBLElBQ0EsUUFBQSxFQUFBLElBQ0EsRUFDQSxFQUFBLE1BQUEsU0FlQSxRQUFBLEdBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEdBQ0EsRUFBQSxFQUNBLEVBQUEsQ0FFQSxJQUFBLEdBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxHQUVBLE1BQUEsUUFHQSxNQUFBLElBQ0EsRUFBQSxPQUFBLElBR0EsRUFBQSxFQUFBLE9BQ0EsR0FHQSxJQUFBLEVBQUEsQ0FDQSxLQUFBLEtBQ0EsR0FBQSxVQUVBLEdBQUEsU0FBQSxJQUFBLE1BQUEsRUFBQSxPQUFBLElBQ0EsRUFBQSxjQUFBLE9BR0EsR0FBQSxjQUFBLEVBRUEsT0FBQSxHQVFBLFFBQUEsR0FBQSxFQUFBLEdBQ0EsR0FBQSxFQUNBLEtBQ0EsRUFBQSxHQUFBLFVBQUEsR0FDQSxNQUFBLEdBQ0EsRUFBQSxLQUFBLDZCQUFBLEdBRUEsTUFBQSxHQU1BLFFBQUEsR0FBQSxHQUNBLE1BQUEsTUFBQSxFQUFBLE9BQUEsR0FDQSxLQUFBLEVBQ0EsRUE1R0EsR0FBQSxHQUFBLEVBQUEsV0FDQSxFQUFBLHVDQUNBLEVBQUEsV0FDQSxFQUFBLE1BQ0EsRUFBQSxHQUFBLFFBQUEsY0FBQSxNQUFBLElBQUEsS0FBQSxjQUNBLEVBQUEsY0FJQSxFQUVBLDJhQWFBLEVBQUEsR0FBQSxTQUFBLE1BQUEsRUFBQSxRQUFBLEtBQUEsV0FBQSxPQUFBLEtBQUEsS0FBQSxLQUNBLEVBQUEsaUhBQ0EsRUFBQSxXQUNBLEVBQUEsYUFDQSxFQUFBLFVBd0ZBLEdBQUEsTUFBQSxTQUFBLEVBQUEsRUFBQSxHQStCQSxRQUFBLEdBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxNQUlBLE9BREEsR0FBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLE9BQ0EsSUFBQSxFQUFBLElBR0EsUUFBQSxHQUFBLEdBRUEsR0FBQSxHQUFBLEVBQUEsT0FBQSxFQUNBLEdBQUEsRUFBQSxNQUFBLEVBQ0EsSUFBQSxHQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxDQU1BLE9BTEEsR0FBQSxLQUNBLEdBQUEsRUFBQSxJQUNBLEVBQUEsR0FBQSxHQUdBLEVBQUEsRUFHQSxRQUFBLEdBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxHQW5EQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEVBQUEsS0FBQSxHQUVBLFdBREEsR0FBQSxLQUFBLHNCQUFBLEVBSUEsSUFBQSxHQUFBLEVBQUEsRUFDQSxLQUFBLEVBQUEsT0FDQSxNQUFBLEdBQUEsVUFBQSxFQUFBLEVBRUEsR0FBQSxFQUFBLE9BQUEsRUFFQSxJQUFBLEdBQUEsR0FDQSxFQUFBLEVBQUEsT0FDQSxLQUlBLEVBQUEsR0FBQSxRQUNBLGNBQ0EsRUFBQSxJQUFBLEdBQUEsS0FBQSxLQUNBLGlCQUFBLEtBRUEsR0FBQSxJQUFBLEdBQ0EsUUFBQSxFQUFBLEdBQ0EsUUFBQSxFQUFBLEdBQ0EsUUFBQSxFQUFBLEVBNkJBLE9BM0JBLEdBQUEsRUFBQSxVQUFBLEVBMkJBLEVBQUEsRUFBQSxJQU9BLEVBQUEsS0FBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsRUFRQSxPQVBBLEtBR0EsRUFBQSxHQUFBLE1BQUEsRUFDQSxFQUFBLEVBQUEsS0FBQSxFQUFBLFVBQ0EsR0FBQSxHQUFBLE9BRUEsc0NDbkJBLFFBQUEsR0FBQSxFQUFBLEdBRUEsR0FBQSxFQUFBLFNBQUEsSUFDQSxJQUFBLEdBQUEsS0FBQSxHQUNBLEdBQUEsRUFBQSxFQUFBLEdBQUEsR0FDQSxPQUFBLE1BR0EsSUFBQSxNQUFBLEVBQ0EsTUFBQSxHQUFBLFdBQUEsY0FBQSxRQUFBLEdBQUEsR0FRQSxRQUFBLEdBQUEsR0FDQSxNQUFBLEdBQUEsS0FBQSxHQUNBLEVBQUEsTUFBQSxFQUFBLElBREEsT0EzTEEsR0FBQSxHQUFBLEVBQUEsV0FDQSxFQUFBLEVBQUEsSUFDQSxLQUFBLE1BQ0EsRUFBQSxTQUNBLEVBQUEsRUFBQSxRQUFBLEVBQUEsTUFLQSxHQUFBLFdBQUEsU0FBQSxHQUNBLE1BQUEsSUFBQSxJQUFBLEdBQ0EsRUFBQSxFQUFBLFdBQ0EsRUFBQSxPQUFBLEdBQUEsY0FBQSxFQUFBLE1BQUEsSUFGQSxJQVFBLEVBQUEsVUFBQSxTQUFBLEdBQ0EsTUFBQSxJQUFBLElBQUEsRUFDQSxFQUFBLFdBQUEsY0FDQSxJQU1BLEVBQUEsVUFBQSxTQUFBLEdBQ0EsTUFBQSxJQUFBLElBQUEsRUFDQSxFQUFBLFdBQUEsY0FDQSxJQU1BLEVBQUEsU0FBQSxTQUFBLEVBQUEsR0FFQSxHQURBLEVBQUEsV0FBQSxJQUNBLEdBQUEsSUFBQSxFQUFBLE1BQUEsRUFDQSxHQUFBLEdBQUEsR0FDQSxJQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsV0FDQSxFQUFBLEVBQUEsT0FBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxJQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsUUFBQSxHQUFBLE1BQUEsR0FDQSxPQUFBLEdBQUEsRUFBQSxFQUFBLE1BQUEsR0FBQSxRQUFBLGlCQUFBLE9BQUEsR0FZQSxFQUFBLFVBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLEtBQUEsVUFBQSxFQUNBLE9BQUEsR0FBQSxPQUFBLEVBQ0EsRUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBLE9BQUEsR0FDQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsSUFVQSxJQUFBLElBQ0EsTUFBQSxHQUNBLElBQUEsRUFDQSxTQUFBLEdBQ0EsR0FBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLEdBQ0EsS0FBQSxHQUNBLElBQUEsR0FHQSxHQUFBLElBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxFQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsRUFJQSxPQUhBLEtBQ0EsRUFBQSxTQUFBLEVBQUEsS0FFQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLFVBQUEsRUFDQSxFQUFBLEtBQUEsS0FBQSxHQURBLFVBU0EsRUFBQSxTQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FJQSxHQUFBLE9BQUEsSUFDQSxFQUFBLEVBSUEsSUFBQSxHQUFBLEVBQUEsSUFBQSxLQUFBLEtBQUEsRUFDQSxPQUFBLElBQ0EsRUFBQSxFQUFBLGNBR0EsRUFBQSxJQUFBLEVBQUEsSUFBQSxLQUFBLEtBQUEsSUFHQSxNQUFBLFFBQUEsS0FDQSxFQUFBLEVBQUEsY0FBQSxJQUdBLEVBQUEsT0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEdBQUEsR0FDQSxFQUFBLEVBQUEsTUFkQSxHQW1CQSxFQUFBLFNBQUEsVUFBQSxFQUtBLEVBQUEsUUFBQSxTQUFBLEVBQUEsRUFBQSxHQUVBLEdBQUEsR0FBQSxFQUFBLElBQUEsS0FBQSxLQUFBLEVBQ0EsS0FBQSxFQUFBLE1BQUEsRUFHQSxPQUFBLFFBQUEsS0FDQSxFQUFBLEVBQUEsY0FBQSxHQUdBLElBQUEsR0FBQSxDQWFBLE9BWkEsS0FDQSxPQUFBLEVBQ0EsRUFBQSxHQUNBLE1BQUEsRUFBQSxPQUFBLElBQ0EsRUFBQSxFQUFBLE1BQUEsR0FDQSxFQUFBLEtBQUEsS0FBQSxHQUFBLEVBQUEsSUFFQSxFQUFBLEtBQUEsS0FBQSxHQUFBLEdBQUEsR0FLQSxFQUFBLFFBQUEsS0FBQSxTQUFBLEVBQUEsR0FHQSxNQUZBLEdBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsR0FDQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxLQUtBLEVBQUEsUUFBQSxVQUFBLHFDQ2hLQSxHQUFBLElBQ0EsUUFBQSxFQUFBLGFBQUEsZUFDQSxJQUFBLEVBQUEsaUJBQUEsb0JBQ0EsS0FBQSxFQUFBLG1DQUFBLHVCQUNBLFVBQUEsRUFBQSxHQUFBLElBR0EsR0FBQSxHQUNBLEVBQUEsSUFBQSxFQUFBLHFCQUFBLHlCQUVBLEVBQUEsT0FDQSxFQUFBLFVBQUEsRUFBQSwrQkFBQSxhQUVBLEVBQUEsTUFDQSxFQUFBLE1BQ0EsRUFBQSxTQUNBLEVBQUEsUUFDQSxFQUFBLE9BQUEsRUFBQSxVQUFBLFlBRUEsRUFBQSxLQUNBLEVBQUEsT0FDQSxFQUFBLFFBQ0EsRUFBQSxLQUNBLEVBQUEsS0FDQSxFQUFBLFFBQ0EsRUFBQSxTQUNBLEVBQUEsTUFBQSxFQUFBLHlEQUFBLFNBRUEsSUFBQSxHQUFBLFdBRUEsR0FBQSxRQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsU0FBQSx5QkFDQSxFQUFBLEVBQUEsS0FBQSxFQUVBLEtBQUEsRUFFQSxNQURBLEdBQUEsWUFBQSxTQUFBLGVBQUEsSUFDQSxDQUdBLElBQUEsR0FBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLElBQUEsRUFBQSxTQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsU0FBQSxjQUFBLE1BR0EsS0FEQSxFQUFBLFVBQUEsRUFBQSxFQUFBLE9BQUEsRUFDQSxLQUFBLEVBQUEsRUFBQSxTQUdBLElBQUEsRUFBQSxhQUFBLEVBQUEsVUFFQSxNQURBLEdBQUEsWUFBQSxFQUFBLFlBQ0EsQ0FNQSxLQUZBLEdBQUEsR0FFQSxFQUFBLEVBQUEsWUFDQSxJQUFBLEVBQUEsVUFDQSxFQUFBLFlBQUEsRUFHQSxPQUFBLDJCQ2lDQSxRQUFBLEdBQUEsR0FFQSxHQUFBLEdBQUEsSUFJQSxHQUFBLE9BQ0EsRUFBQSxZQUFBLEVBQUEsV0FDQSxHQUFBLE1BS0EsSUFBQSxJQUNBLEVBQUEsRUFBQSxFQUFBLEVBQUEsU0FBQSxJQUVBLEVBQUEsZUFBQSxFQUVBLElBQUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxJQUNBLEVBQUEsRUFBQSxFQUFBLEdBQUEsSUFFQSxFQUFBLEtBQUEsS0FBQSxHQUFBLElBSUEsRUFBQSxFQUFBLFVBQUEsT0FBQSxPQUFBLEVBQUEsVUFpQkEsT0FoQkEsR0FBQSxhQUFBLEVBQUEsY0FBQSxHQUdBLEVBQUEsT0FBQSxFQUNBLEVBQUEsTUFBQSxFQUNBLEVBQUEsUUFBQSxFQUdBLEVBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxHQUFBLEVBQUEsS0FJQSxFQUFBLElBQUEsRUFBQSxJQUNBLEVBQUEsUUFBQSxFQUFBLFFBRUEsRUFnQkEsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUVBLEdBREEsRUFBQSxPQUNBLEVBQUEsTUFBQSxFQUNBLEtBQUEsR0FBQSxLQUFBLEdBQ0EsR0FBQSxPQUFBLEVBQUEsQ0FDQSxHQUFBLEdBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxFQUNBLElBQUEsa0JBQUEsSUFBQSxHQUVBLEVBQUEsSUFBQSxHQUNBLE1BQUEsUUFBQSxHQUNBLEVBQUEsR0FBQSxFQUFBLEdBQUEsT0FBQSxHQUVBLEVBQUEsR0FBQSxLQUFBLEtBR0EsSUFDQSxFQUFBLGFBQUEsS0FBQSxFQUFBLGFBQUEsSUFDQSxZQUFBLEdBSUEsU0FBQSxJQUVBLEVBQUEsR0FBQSxHQUhBLEVBQUEsR0FBQSxFQUFBLEVBQUEsR0FNQSxNQUFBLEdBeExBLEdBQUEsR0FBQSxFQUFBLFlBQ0EsRUFBQSxFQUFBLGVBQ0EsRUFBQSxFQUFBLFdBQ0EsRUFBQSxFQUFBLEtBQ0EsR0FBQSxZQUFBLFNBQUEsVUFBQSxTQUFBLGFBRUEsR0FDQSxNQUFBLEVBQ0EsT0FBQSxFQUNBLFdBQUEsRUFBQSxnQkFDQSxTQUFBLEVBQUEsY0FHQSxHQUFBLFFBQUEsRUFBQSxjQUNBLFdBQUEsRUFBQSxnQkFDQSxRQUFBLEVBQUEsYUFDQSxTQUFBLElBQ0EsUUFBQSxJQUNBLFdBQUEsS0FNQSxFQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxRQUFBLEVBQUEsSUFJQSxPQUhBLEtBQ0EsRUFBQSxLQUFBLFFBQUEsRUFBQSxLQUFBLEtBRUEsR0FDQSxZQUFBLEVBQ0EsRUFBQSxFQUFBLG9CQUFBLEdBQ0EsY0FBQSxFQUNBLEVBQUEsRUFBQSxjQUFBLEdBQ0EsV0FBQSxHQUNBLEVBQUEsWUFBQSxHQUVBLEVBQUEsR0FBQSxFQUNBLE1BVEEsRUFBQSxNQWdCQSxFQUFBLE9BQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxnQkFBQSxHQUFBLENBQ0EsR0FBQSxTQUFBLEVBQ0EsTUFBQSxHQUFBLEVBRUEsR0FBQSxHQUFBLE1BR0EsR0FBQSxPQUFBLEVBQUEsRUFFQSxPQUFBLE9BTUEsRUFBQSxJQUFBLFNBQUEsR0FDQSxHQUFBLGdCQUFBLEdBQ0EsSUFDQSxFQUFBLEVBQUEsR0FDQSxNQUFBLEdBRUEsV0FEQSxHQUFBLEtBQUEsdUJBQUEsR0FNQSxHQUFBLE1BQUEsTUFBQSxLQUFBLFVBQUEsRUFRQSxPQVBBLEdBQUEsUUFBQSxNQUVBLGtCQUFBLEdBQUEsUUFDQSxFQUFBLFFBQUEsTUFBQSxFQUFBLEdBRUEsRUFBQSxNQUFBLEtBQUEsR0FFQSxNQU1BLEVBQUEsUUFBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLElBR0EsRUFBQSxPQUFBLEVBQ0EsRUFBQSxTQUFBLEVBQUEsU0ErRkEsRUFBQSxRQUFBLHNJQ3RJQSxRQUFBLEdBQUEsR0FDQSxFQUFBLEVBQUEsRUFBQSxXQUVBLEdBRUEsR0FBQSxFQUZBLEVBQUEsRUFBQSxLQUFBLFdBQ0EsRUFBQSxNQUFBLFVBQUEsR0FBQSxNQUFBLEtBQUEsRUEwQkE7TUF0QkEsU0FBQSxHQUFBLFlBQUEsRUFDQSxFQUFBLEVBQ0EsUUFBQSxHQUFBLFVBQUEsRUFDQSxHQUFBLEdBQ0EsV0FBQSxJQUNBLEVBQUEsRUFBQSxNQUFBLEdBQ0EsRUFBQSxHQUlBLEVBQUEsS0FBQSxHQUNBLEVBQUEsS0FBQSxHQUdBLEtBQUEsWUFBQSxLQUFBLFNBQUEsR0FBQSxNQUNBLE9BQUEsRUFDQSxLQUFBLEVBQ0EsT0FBQSxFQUNBLFNBQUEsRUFDQSxRQUFBLElBR0EsSUFFQSxHQU9BLFFBQUEsR0FBQSxFQUFBLEdBQ0EsR0FBQSxFQUVBLElBREEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLE9BQ0EsS0FDQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBR0EsRUFBQSxjQUNBLEVBQUEsR0FDQSxFQUFBLElBRUEsRUFBQSxFQUFBLFlBQUEsT0FDQSxFQUFBLFFBQUEsR0FBQSxHQUNBLEVBQUEsS0FBQSxJQVVBLFFBQUEsR0FBQSxFQUFBLEdBQ0EsR0FBQSxFQUVBLElBREEsR0FBQSxHQUFBLEVBQUEsRUFBQSxPQUNBLEtBRUEsR0FEQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsWUFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLFlBQUEsTUFDQSxJQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsS0E2QkEsUUFBQSxHQUFBLEdBQ0EsTUFBQSxnQkFBQSxJQUFBLElBQUEsRUFBQSxVQU1BLFFBQUEsR0FBQSxHQUNBLEdBQUEsRUFBQSxZQUFBLE9BQUEsQ0FDQSxJQUFBLEdBQUEsR0FBQSxFQVdBLE9BVkEsR0FBQSxFQUFBLGNBQUEsR0FDQSxFQUNBLEdBQUEsTUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsRUFBQSxLQUVBLEdBQUEsU0FBQSxXQUNBLEVBQUEsS0FFQSxFQUFBLE9BQUEsRUFBQSxPQUNBLEVBQUEsV0FDQSxFQU1BLFFBQUEsR0FBQSxHQUdBLElBRkEsR0FBQSxHQUFBLEVBQUEsWUFBQSxPQUNBLEVBQUEsRUFBQSxPQUNBLEtBQ0EsRUFBQSxHQUFBLFlBQUEsS0FBQSxNQUFBLEdBQUEsSUFBQSxHQU9BLFFBQUEsR0FBQSxHQUNBLEVBQUEsR0FDQSxFQUFBLEdBRUEsRUFBQSxHQVFBLFFBQUEsR0FBQSxFQUFBLEdBQ0EsR0FBQSxFQUNBLEVBQUEsVUFBQSxNQUVBLEtBQUEsR0FBQSxLQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsRUFBQSxJQVFBLFFBQUEsR0FBQSxHQUNBLEVBQUEsRUFBQSxFQUNBLEtBQUEsR0FBQSxLQUFBLEdBQ0EsRUFBQSxFQUFBLEdBUUEsUUFBQSxHQUFBLEdBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEdBUUEsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQWtDQSxRQUFBLEdBQUEsRUFBQSxHQUNBLEVBQUEsR0FBQSxFQUNBLEVBQUEsS0FBQSxNQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsSUFDQSxFQUFBLEtBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEdBRUEsRUFBQSxFQUFBLEVBQUEsR0F2Q0EsR0FBQSxHQUFBLEVBQUEsT0FBQSxFQUNBLElBQUEsTUFBQSxHQUFBLE1BQUEsRUFBQSxDQU1BLEdBQUEsR0FBQSxFQUFBLFlBQ0EsRUFBQSxFQUFBLE1BRUEsR0FBQSxFQUFBLEdBQUEsR0FFQSxFQUFBLEVBQUEsR0FDQSxZQUFBLEVBQ0EsY0FBQSxFQUNBLElBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxFQUtBLE9BSEEsR0FBQSxXQUNBLEVBQUEsS0FBQSxNQUFBLEdBRUEsR0FFQSxJQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxFQUNBLEdBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEdBR0EsRUFBQSxHQUFBLE9Bb0JBLFFBQUEsR0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEVBQUEsV0FDQSxJQUFBLEVBQ0EsR0FBQSxFQUFBLEdBQ0EsRUFBQSxLQUFBLE1BQUEsU0FBQSxFQUFBLFlBQ0EsQ0FDQSxHQUFBLEdBQUEsQ0FDQSxLQUFBLElBQUEsR0FDQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsTUFBQSxFQUFBLEdBQ0EsRUFBQSxJQVdBLFFBQUEsR0FBQSxFQUFBLEdBQ0EsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLENBR0EsR0FBQSxHQUFBLEVBQUEsQ0FDQSxLQUFBLElBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxLQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsR0FDQSxFQUFBLE1BQ0EsRUFBQSxJQUNBLEVBQUEsRUFBQSxNQUNBLEVBQUEsRUFBQSxJQUVBLEVBQUEsR0FBQSxTQVVBLFFBQUEsR0FBQSxFQUFBLEdBRUEsSUFBQSxHQURBLEdBQUEsRUFBQSxFQUFBLE1BQUEsS0FDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBQ0EsRUFBQSxNQUNBLEVBQUEsYUFBQSxFQUFBLEVBQUEsSUFFQSxFQUFBLEVBQUEsRUFFQSxHQUFBLEtBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQUEsS0FDQSxFQUFBLEdBQUEsT0FDQSxFQUFBLGFBQUEsRUFBQSxFQUFBLEtBV0EsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUVBLEdBQUEsRUFBQSxHQUFBLENBRUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxJQUFBLEdBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLFdBS0EsR0FBQSxRQUFBLEVBQUEsV0FDQSxJQUFBLEdBQUEsRUFBQSxRQUFBLElBQ0EsSUFBQSxTQUFBLEdBQ0EsRUFBQSxLQUFBLE1BQUEsRUFBQSxJQUVBLElBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsS0FBQSxNQUFBLEVBQUEsRUFBQSxHQUlBLEdBQUEsR0FDQSxFQUFBLEtBQUEsTUFBQSxFQUFBLEdBQUEsSUFHQSxPQUFBLFNBQUEsRUFBQSxFQUFBLEdBR0EsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLENBQ0EsR0FBQSxLQUFBLFNBQUEsRUFBQSxFQUFBLEVBRUEsSUFBQSxHQUFBLEVBQUEsTUFDQSxVQUFBLEdBQUEsWUFBQSxHQUNBLEVBQUEsS0FBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLFNBT0EsR0FDQSxHQUFBLE1BQUEsRUFBQSxLQUNBLEdBQUEsTUFBQSxFQUFBLEtBQ0EsR0FBQSxTQUFBLEVBQUEsUUFFQSxFQUdBLEVBQUEsR0FFQSxFQUFBLElBT0EsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUVBLEdBQUEsR0FBQSxFQUFBLFlBQUEsQ0FFQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQ0EsSUFBQSxHQUFBLEVBQUEsUUFBQSxFQUNBLEtBR0EsRUFBQSxZQUNBLElBQUEsTUFBQSxFQUFBLEtBQ0EsSUFBQSxNQUFBLEVBQUEsS0FDQSxJQUFBLFNBQUEsRUFBQSxRQUdBLEVBQUEsUUFBQSxHQUFBLE9BemFBLEdBQUEsR0FBQSxFQUFBLGFBQ0EsRUFBQSxFQUFBLFdBRUEsRUFBQSxFQUFBLGFBQ0EsRUFBQSxFQUFBLFNBQ0EsRUFBQSxNQUFBLFFBQ0EsS0FBQSxlQUNBLEVBQUEsT0FBQSxlQUNBLEtBQUEsTUFLQSxLQUFBLFVBTUEsRUFBQSxPQUFBLE9BQUEsTUFBQSxZQUlBLE9BQ0EsTUFDQSxRQUNBLFVBQ0EsU0FDQSxPQUNBLFdBQ0EsUUFBQSxHQUdBLEVBQUEsRUFBQSxPQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsTUFBQSxPQUFBLEVBQUEsRUFBQSxHQUFBLEtBQ0EsR0FFQSxFQUFBLEVBQUEsVUFBQSxTQUFBLEdBSUEsTUFIQSxnQkFBQSxLQUNBLEVBQUEsS0FBQSxRQUFBLElBRUEsRUFBQSxHQUNBLEtBQUEsT0FBQSxFQUFBLEdBQUEsR0FEQSxTQUdBLEVBcUZBLElBQUEsR0FBQSxPQUFBLE9BQUEsT0FBQSxVQUVBLEdBQUEsRUFBQSxPQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsS0FBQSxLQUFBLEtBQ0EsS0FBQSxHQUFBLEVBQ0EsRUFBQSxLQUFBLEdBQUEsTUFDQSxHQUVBLEVBQUEsRUFBQSxVQUFBLFNBQUEsR0FDQSxFQUFBLEtBQUEsS0FBQSxLQUVBLEtBQUEsR0FBQSxhQUNBLE1BQUEsR0FDQSxLQUFBLFlBQUEsS0FBQSxTQUFBLE1BQ0EsRUErUkEsSUFBQSxHQUFBLEVBQUEsU0FJQSxXQUFBLEVBRUEsUUFBQSxFQUNBLFVBQUEsRUFDQSxXQUFBLEVBQ0EsVUFBQSxFQUNBLE1BQUEsRUFDQSxRQUFBLEVBQ0EsV0FBQSxxREM1YkEsR0FBQSxHQUFBLEVBQUEsYUFZQSxHQUFBLFFBQUEsU0FBQSxHQUNBLEdBQUEsRUFFQSxJQUFBLFlBQUEsUUFBQSxpQkFFQSxNQUFBLEVBR0EsSUFBQSxnQkFBQSxHQUFBLENBRUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxHQUlBLE1BQUEsR0FBQSxFQUZBLElBREEsRUFBQSxTQUFBLGVBQUEsRUFBQSxNQUFBLEtBQ0EsRUFBQSxXQUlBLENBQUEsSUFBQSxFQUFBLFNBR0EsTUFGQSxHQUFBLEVBT0EsTUFBQSxhQUFBLEVBQUEsU0FBQSxFQUFBLFFBQ0EsRUFBQSxRQUlBLEVBREEsV0FBQSxFQUFBLFFBQ0EsRUFBQSxVQUdBLEVBQUEsb0RDcENBLFFBQUEsS0FDQSxHQUFBLEdBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxFQUNBLE9BQUEsSUFBQSxRQUFBLEVBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsR0FHQSxRQUFBLEdBQUEsR0FDQSxNQUFBLEdBQUEsUUFBQSxFQUFBLFFBR0EsUUFBQSxHQUFBLEdBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxXQUFBLEVBQ0EsRUFBQSxNQUFBLElBVUEsUUFBQSxHQUFBLEdBQ0EsSUFBQSxFQUFBLE1BQUEsS0FBQSxHQUFBLE1BQUEsS0FHQSxLQUZBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxLQUVBLEVBQUEsRUFBQSxNQUFBLEVBQUEsUUFDQSxFQUFBLEVBQUEsTUFDQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLElBQ0EsR0FBQSxJQUFBLEVBQUEsR0FBQSxRQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsS0FDQSxFQUFBLE9BQUEsS0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLE9BQUEsS0FBQSxFQUNBLEVBQUEsS0FBQSxHQUNBLEVBQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxHQUFBLE9BR0EsT0FEQSxHQUFBLFFBQUEsRUFBQSxLQUFBLEdBQ0EsRUFTQSxRQUFBLEdBQUEsR0FDQSxFQUFBLEdBQUEsRUFBQSxjQUNBLElBQUEsR0FBQSxFQUFBLEVBQ0EsS0FBQSxFQUFBLE1BQUEsS0FDQSxJQUFBLElBQUEsRUFBQSxPQUFBLE1BQUEsR0FBQSxHQUFBLEdBRUEsS0FBQSxHQURBLEdBQUEsS0FDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxLQUNBLEVBQUEsSUFDQSxFQUFBLEVBQUEsS0FDQSxJQUFBLEVBQUEsSUFHQSxPQUFBLEdBQUEsS0FBQSxLQU9BLFFBQUEsR0FBQSxHQUNBLEdBQUEsRUFBQSxRQUFBLEtBQUEsR0FBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLE1BQUEsR0FDQSxFQUFBLEdBQUEsRUFBQSxFQUNBLElBQUEsRUFBQSxVQUNBLEVBQUEsRUFBQSxjQUNBLEVBQUEsSUFDQSxFQUFBLFVBSUEsTUFBQSxJQUFBLEVBQUEsSUF6RkEsR0FJQSxHQUpBLEVBQUEsSUFDQSxFQUFBLElBQ0EsRUFBQSx3QkFJQSxHQUFBLE1BQUEsSUFzRkEsRUFBQSxNQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQ0EsRUFBQSxjQUFBLEVBQ0EsRUFBQSxZQUFBLEVBQUEseUNDckJBLFFBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUVBLElBQUEsRUFBQSxNQUVBLE1BREEsS0FDQSxFQUFBLFFBS0EsSUFBQSxHQUNBLEVBQUEsRUFBQSxVQUNBLEVBQUEsRUFBQSxhQUNBLEVBQUEsRUFBQSxXQUNBLEVBQUEsRUFBQSxXQUNBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxLQVVBLE9BUEEsS0FDQSxFQUFBLG9CQUFBLEVBQUEsR0FDQSxFQUFBLE9BQUEsR0FDQSxFQUFBLE9BQUEsR0FDQSxFQUFBLGFBQUEsTUFHQSxFQUFBLEdBR0EsRUFBQSxJQUFBLEdBRUEsSUFFQSxHQU9BLEVBQUEsU0FBQSxHQUNBLEVBQUEsU0FBQSxJQUNBLEVBQUEsb0JBQUEsRUFBQSxHQUNBLEVBQUEsYUFBQSxLQUNBLEVBQUEsT0FBQSxLQUdBLEVBQUEsaUJBQUEsRUFBQSxHQUNBLEVBQUEsYUFBQSxHQWRBLEVBQUEsTUFDQSxRQUFBLFdBQ0EsRUFBQSxPQUFBLE1BY0EsRUFBQSxRQUlBLEVBQUEsYUFBQSxFQUFBLGNBRUEsRUFBQSxJQUFBLEdBQ0EsRUFBQSxTQUFBLEdBQ0EsRUFBQSxTQUFBLElBQ0EsRUFBQSxvQkFBQSxFQUFBLEdBQ0EsRUFBQSxhQUFBLEtBRUEsSUFDQSxFQUFBLE9BQUEsS0FJQSxFQUFBLGlCQUFBLEVBQUEsR0FDQSxFQUFBLGFBQUEsR0FHQSxJQUVBLEVBQUEsT0FNQSxRQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQXFCQSxRQUFBLEdBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFdBQ0EsSUFDQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEdBQUEsR0FDQSxFQUFBLFNBQ0EsRUFBQSxhQUFBLE9BRUEsRUFDQSxHQUFBLEtBQUEsR0EzQkEsR0FBQSxHQUFBLEVBQUEsVUFBQSxVQUFBLEVBQ0EsS0FBQSxFQUVBLE1BREEsS0FDQSxFQUFBLE9BR0EsSUFBQSxHQUFBLEVBQUEsTUFDQSxFQUFBLEVBQUEsTUFDQSxFQUFBLEVBQUEsWUFHQSxJQUFBLEVBRUEsSUFEQSxHQUFBLEdBQUEsRUFBQSxPQUNBLEtBQ0EsRUFBQSxFQUFBLEdBZ0JBLE9BWkEsR0FBQSxFQUFBLGdCQVlBLEVBQUEsRUFDQSxrQkFBQSxJQUNBLElBQ0EsRUFBQSxZQUVBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxNQUVBLGtCQUFBLElBQ0EsSUFDQSxFQUFBLFlBRUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLE1BUUEsUUFBQSxLQUNBLEdBQUEsR0FBQSxTQUFBLGNBQUEsT0FDQSxFQUFBLGdCQUNBLEdBQ0EsaUJBQUEsc0JBQ0EsV0FBQSxFQUNBLGNBQUEsR0FFQSxJQUNBLEtBQUEsR0FBQSxLQUFBLEdBQ0EsR0FBQSxTQUFBLEVBQUEsTUFBQSxHQUFBLENBQ0EsRUFBQSxNQUFBLEVBQUEsRUFDQSxPQU1BLE1BSEEsR0FBQSxLQUFBLEtBQUEsRUFBQSxNQUFBLFVBQ0EsZUFDQSxxQkFDQSxFQTlOQSxHQUFBLEdBQUEsSUFDQSxFQUFBLEVBQUEsWUFFQSxFQUFBLEVBQUEsYUFDQSxFQUFBLEdBQUEsR0FFQSxFQUFBLE9BQUEsV0FDQSxFQUFBLE9BQUEsYUFFQSxHQUNBLE1BQUEsRUFDQSxNQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxTQUFBLEdBQ0EsUUFBQSxHQUNBLFVBQUEsR0FDQSxVQUFBLEdBQ0EsS0FBQSxHQUNBLEtBQUEsR0FJQSxHQUFBLFVBQUEsV0FFQSxTQUFBLEtBQUEsYUFRQSxJQUFBLEdBQUEsRUFBQSxRQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxHQUFBLEdBQUEsV0FDQSxJQUNBLEVBQUEsU0FBQSxFQUFBLEVBQUEsV0FBQSxZQUdBLElBQUEsRUFBQSxLQUVBLE1BREEsS0FDQSxFQUFBLElBR0EsSUFBQSxHQUFBLEtBQUEsRUFBQSxVQUNBLEVBQUEsS0FBQSxFQUFBLFNBQ0EsRUFBQSxFQUFBLFVBRUEsT0FBQSxHQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUVBLEdBQUEsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLElBR0EsSUFDQSxFQUFBLE1BZ0tBLEdBQUEsTUFBQSxFQUNBLEVBQUEsTUFBQSxtREMvTUEsUUFBQSxHQUFBLEdBQ0EsTUFBQSxHQUFBLFFBQUEsS0FBQSxFQUNBLEVBQ0EsRUFBQSxRQUFBLEVBQUEsT0FDQSxRQUFBLEVBQUEsT0F1UkEsUUFBQSxLQUlBLEVBQUEsSUFBQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLEdBQ0EsRUFBQSxJQUFBLElBUUEsRUFBQSxLQUFBLFNBQUEsSUFDQSxFQUFBLFFBQUEsSUFDQSxFQUFBLEtBQUEsR0FDQSxFQUFBLE9BQUEsRUFBQSxPQUNBLEVBQUEsVUFqVUEsR0FVQSxHQVZBLEVBQUEsRUFBQSxZQUNBLEtBQUEsU0FDQSxFQUFBLE9BQ0EsRUFBQSxFQUFBLFFBQ0EsRUFBQSxPQUFBLGVBQ0EsRUFBQSxTQUNBLEVBQUEsaUJBQ0EsRUFBQSxpQkFDQSxFQUFBLGlCQUNBLEVBQUEsYUFBQSxVQUFBLGdCQUdBLEVBQ0EsRUFBQSx1QkFDQSxFQUFBLDZCQUNBLEVBQUEsV0FZQSxFQUFBLEVBQUEsU0FLQSxXQUFBLEVBQUEsY0FLQSxvQkFBQSxFQUFBLHdCQUtBLElBQUEsU0FBQSxFQUFBLEdBR0EsR0FEQSxFQUFBLEVBQUEsR0FDQSxFQUFBLFFBQUEsS0FBQSxFQUNBLE1BQUEsR0FBQSxFQUlBLEtBRkEsR0FBQSxHQUFBLEVBQUEsTUFBQSxLQUNBLEVBQUEsR0FBQSxFQUFBLEVBQUEsU0FDQSxFQUFBLEdBQUEsTUFBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEdBRUEsT0FBQSxJQU1BLElBQUEsU0FBQSxFQUFBLEVBQUEsR0FHQSxHQURBLEVBQUEsRUFBQSxHQUNBLEVBQUEsUUFBQSxLQUFBLEVBRUEsWUFEQSxFQUFBLEdBQUEsRUFLQSxLQUZBLEdBQUEsR0FBQSxFQUFBLE1BQUEsS0FDQSxFQUFBLEdBQUEsRUFBQSxFQUFBLE9BQUEsSUFDQSxFQUFBLEdBQ0EsTUFBQSxFQUFBLEVBQUEsTUFDQSxFQUFBLEVBQUEsUUFFQSxFQUFBLEVBQUEsRUFBQSxHQUVBLEdBQUEsRUFBQSxJQUFBLEdBTUEsUUFBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLFFBQUEsS0FBQSxFQUNBLEVBQUEsTUFBQSxLQUFBLEdBQ0EsR0FPQSxLQUFBLFdBQ0EsTUFBQSxRQUFBLE9BQUEsT0FNQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE9BQUEsSUFBQSxFQUNBLEVBQUEsRUFBQSxhQUFBLEVBSUEsT0FIQSxRQUFBLEdBQ0EsRUFBQSxnQkFBQSxHQUVBLEdBUUEsYUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsR0FDQSxNQUFBLEVBQ0EsV0FBQSxFQUNBLFNBQUEsRUFDQSxjQUFBLEtBUUEsU0FBQSxTQUFBLEdBQ0EsYUFBQSxLQUFBLEdBQUEsSUFBQSxNQUFBLFFBQUEsSUFNQSxhQUFBLFNBQUEsR0FDQSxNQUFBLG9CQUFBLEVBQUEsS0FBQSxJQU9BLEtBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxVQUFBLEdBQ0EsTUFBQSxHQUFBLEtBQUEsRUFBQSxLQU9BLE1BQUEsU0FBQSxHQUVBLE1BQUEsT0FBQSxFQUNBLEdBQ0EsZ0JBQUEsR0FDQSxLQUFBLFVBQUEsR0FDQSxHQU1BLFlBQUEsU0FBQSxHQUNBLE1BQUEsT0FBQSxJQUFBLE9BQUEsR0FBQSxpQkFBQSxHQUNBLEVBQ0EsT0FBQSxJQU1BLE9BQUEsU0FBQSxFQUFBLEdBQ0EsSUFBQSxHQUFBLEtBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxLQUNBLEVBQUEsR0FBQSxFQUFBLEdBR0EsT0FBQSxJQU1BLE9BQUEsU0FBQSxHQUlBLElBSEEsR0FFQSxHQUZBLEVBQUEsRUFBQSxPQUNBLEVBQUEsRUFBQSxPQUNBLEtBQ0EsS0FDQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBQ0EsRUFBQSxHQUFBLEVBQ0EsRUFBQSxLQUFBLEdBRUEsT0FBQSxJQU9BLGNBQUEsU0FBQSxHQUVBLE1BREEsR0FBQSxHQUFBLEVBQUEsZUFDQSxFQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsR0FDQSxrQkFBQSxHQUNBLEVBQ0EsTUFPQSxZQUFBLFNBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxjQUNBLEVBQUEsVUFBQSxJQU9BLGVBQUEsU0FBQSxHQUNBLEdBSUEsR0FKQSxFQUFBLEVBQUEsV0FDQSxFQUFBLEVBQUEsU0FDQSxFQUFBLEVBQUEsU0FDQSxFQUFBLEVBQUEsT0FFQSxJQUFBLEVBQ0EsSUFBQSxJQUFBLEdBQ0EsRUFBQSxHQUFBLEVBQUEsY0FBQSxFQUFBLEdBR0EsSUFBQSxFQUNBLElBQUEsSUFBQSxHQUNBLEVBQUEsR0FBQSxFQUFBLG9CQUFBLEVBQUEsR0FHQSxJQUFBLEVBQ0EsSUFBQSxJQUFBLEdBQ0EsRUFBQSxZQUFBLEVBQUEsR0FHQSxLQUNBLEVBQUEsU0FBQSxFQUFBLG9CQUFBLEtBT0EsU0FBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLElBT0EsU0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEVBQ0EsRUFBQSxVQUFBLElBQUEsT0FDQSxDQUNBLEdBQUEsR0FBQSxJQUFBLEVBQUEsVUFBQSxHQUNBLEdBQUEsUUFBQSxJQUFBLEVBQUEsS0FBQSxJQUNBLEVBQUEsV0FBQSxFQUFBLEdBQUEsVUFRQSxZQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsRUFDQSxFQUFBLFVBQUEsT0FBQSxPQUNBLENBR0EsSUFGQSxHQUFBLEdBQUEsSUFBQSxFQUFBLFVBQUEsSUFDQSxFQUFBLElBQUEsRUFBQSxJQUNBLEVBQUEsUUFBQSxJQUFBLEdBQ0EsRUFBQSxFQUFBLFFBQUEsRUFBQSxJQUVBLEdBQUEsVUFBQSxFQUFBLFNBUUEsY0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsSUFDQSxLQUFBLEdBQUEsS0FBQSxHQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxTQUFBLEdBQ0EsR0FDQSxPQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQ0EsRUFBQSxLQUFBLEVBRUEsT0FBQSxJQUlBLG1HQzdSQSxRQUFBLEdBQUEsR0FFQSxLQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQUEsR0FtS0EsUUFBQSxHQUFBLEdBQ0EsTUFBQSxnQkFBQSxHQUNBLFNBQUEsY0FBQSxHQUNBLEVBMUxBLEdBQUEsR0FBQSxFQUFBLGNBQ0EsRUFBQSxFQUFBLFdBQ0EsRUFBQSxFQUFBLGdCQUNBLEVBQUEsRUFBQSxhQUNBLEtBQUEsTUFDQSxFQUFBLEVBQUEsYUFDQSxFQUFBLEVBQUEsU0FHQSxFQUFBLEdBQUEsR0FDQSxFQUFBLEVBZUEsRUFBQSxFQUFBLFNBT0EsR0FBQSxFQUFBLFFBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxLQUFBLEtBT0EsRUFBQSxFQUFBLE9BQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLElBQUEsS0FBQSxFQUNBLE9BQUEsVUFBQSxHQUFBLEtBQUEsUUFDQSxLQUFBLFFBQUEsS0FBQSxHQUNBLElBT0EsRUFBQSxFQUFBLE9BQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxJQUFBLEtBQUEsRUFBQSxLQU9BLEVBQUEsRUFBQSxTQUFBLFNBQUEsRUFBQSxHQUlBLFFBQUEsS0FDQSxHQUFBLEdBQUEsRUFBQSxLQUFBLFVBQ0EsR0FBQSxNQUNBLEdBQUEsRUFDQSxVQUFBLEVBQ0EsUUFBQSxXQUNBLEVBQUEsTUFBQSxFQUFBLE1BUkEsR0FBQSxHQUFBLElBQ0EsRUFBQSxJQVdBLEdBQUEsSUFBQSxFQUNBLEVBQUEsVUFBQSxTQUFBLEdBQUEsVUFBQSxFQUFBLEtBTUEsRUFBQSxFQUFBLFdBQUEsU0FBQSxFQUFBLEdBSUEsR0FBQSxJQUFBLFVBQUEsR0FDQSxFQUFBLEtBQUEsVUFBQSxRQUNBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FDQSxFQUFBLElBQUEsTUFBQSxFQUFBLEtBTUEsRUFBQSxFQUFBLFdBQUEsU0FBQSxHQUNBLEtBQUEsVUFBQSxRQUFBLEtBTUEsRUFBQSxFQUFBLGFBQUEsV0FJQSxJQUhBLEdBRUEsR0FGQSxFQUFBLEtBQUEsVUFBQSxTQUNBLEVBQUEsRUFBQSxPQUVBLEtBQ0EsRUFBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLFVBQUEsTUFBQSxFQUFBLFFBQUEsV0FDQSxFQUFBLEdBQUEsV0FBQSxNQUFBLEVBQUEsR0FBQSxhQU9BLEVBQUEsRUFBQSxZQUFBLFdBQ0EsR0FBQSxHQUFBLEtBQUEsVUFDQSxFQUFBLEVBQUEsUUFDQSxFQUFBLEVBQUEsTUFDQSxHQUFBLFVBQUEsTUFBQSxFQUFBLFdBQ0EsR0FDQSxFQUFBLEdBQUEsVUFBQSxNQUFBLEVBQUEsR0FBQSxjQU9BLE9BQUEsS0FBQSxNQUFBLFFBQUEsUUFBQSxTQUFBLEdBSUEsR0FBQSxHQUFBLFNBQUEsRUFDQSxZQUNBLENBQ0EsR0FBQSxFQUFBLElBQUEsRUFBQSxXQUNBLEdBQUEsR0FBQSxLQUFBLFVBQUEsT0FDQSxHQUFBLEdBQUEsTUFBQSxFQUFBLGVBTUEsRUFBQSxFQUFBLFlBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQ0EsSUFBQSxHQUFBLEtBQUEsR0FDQSxHQUFBLEVBQUEsRUFBQSxXQUNBLEVBQUEsWUFBQSxHQUNBLEdBQUEsRUFBQSxJQUNBLEtBQUEsYUFHQSxFQUFBLEVBQUEsVUFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQUEsR0FDQSxHQUFBLEVBQUEsR0FBQSxXQUNBLEVBQUEsWUFDQSxFQUFBLFdBQUEsWUFBQSxHQUVBLEdBQUEsRUFBQSxJQUNBLEtBQUEsYUFHQSxFQUFBLEVBQUEsVUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsRUFDQSxJQUFBLEdBQUEsS0FBQSxHQUNBLEdBQUEsRUFBQSxFQUFBLFdBQ0EsRUFBQSxXQUFBLGFBQUEsRUFBQSxHQUNBLEdBQUEsRUFBQSxJQUNBLEtBQUEsYUFHQSxFQUFBLEVBQUEsU0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsRUFDQSxJQUFBLEdBQUEsS0FBQSxHQUNBLEdBQUEsRUFBQSxFQUFBLFdBQ0EsRUFBQSxZQUNBLEVBQUEsV0FBQSxhQUFBLEVBQUEsRUFBQSxhQUVBLEVBQUEsV0FBQSxZQUFBLEdBRUEsR0FBQSxFQUFBLElBQ0EsS0FBQSxhQVNBLEVBQUEsUUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlZ1ZSA9IHJlcXVpcmUgJ3Z1ZSdcblxubmV3IFZ1ZVxuICBlbDogJyN0ZXN0JyxcbiAgZGF0YTpcbiAgICB0aXRsZTogJ0hlbGxvJ1xuIiwidmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIEJhdGNoZXIgKCkge1xuICAgIHRoaXMucmVzZXQoKVxufVxuXG52YXIgQmF0Y2hlclByb3RvID0gQmF0Y2hlci5wcm90b3R5cGVcblxuQmF0Y2hlclByb3RvLnB1c2ggPSBmdW5jdGlvbiAoam9iKSB7XG4gICAgaWYgKCFqb2IuaWQgfHwgIXRoaXMuaGFzW2pvYi5pZF0pIHtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKGpvYilcbiAgICAgICAgdGhpcy5oYXNbam9iLmlkXSA9IGpvYlxuICAgICAgICBpZiAoIXRoaXMud2FpdGluZykge1xuICAgICAgICAgICAgdGhpcy53YWl0aW5nID0gdHJ1ZVxuICAgICAgICAgICAgdXRpbHMubmV4dFRpY2sodXRpbHMuYmluZCh0aGlzLmZsdXNoLCB0aGlzKSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoam9iLm92ZXJyaWRlKSB7XG4gICAgICAgIHZhciBvbGRKb2IgPSB0aGlzLmhhc1tqb2IuaWRdXG4gICAgICAgIG9sZEpvYi5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICAgIHRoaXMucXVldWUucHVzaChqb2IpXG4gICAgICAgIHRoaXMuaGFzW2pvYi5pZF0gPSBqb2JcbiAgICB9XG59XG5cbkJhdGNoZXJQcm90by5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBiZWZvcmUgZmx1c2ggaG9va1xuICAgIGlmICh0aGlzLl9wcmVGbHVzaCkgdGhpcy5fcHJlRmx1c2goKVxuICAgIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIGpvYnMgbWlnaHQgYmUgcHVzaGVkXG4gICAgLy8gYXMgd2UgZXhlY3V0ZSBleGlzdGluZyBqb2JzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBqb2IgPSB0aGlzLnF1ZXVlW2ldXG4gICAgICAgIGlmICgham9iLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgam9iLmV4ZWN1dGUoKVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVzZXQoKVxufVxuXG5CYXRjaGVyUHJvdG8ucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oYXMgPSB1dGlscy5oYXNoKClcbiAgICB0aGlzLnF1ZXVlID0gW11cbiAgICB0aGlzLndhaXRpbmcgPSBmYWxzZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhdGNoZXIiLCJ2YXIgQmF0Y2hlciAgICAgICAgPSByZXF1aXJlKCcuL2JhdGNoZXInKSxcbiAgICBiaW5kaW5nQmF0Y2hlciA9IG5ldyBCYXRjaGVyKCksXG4gICAgYmluZGluZ0lkICAgICAgPSAxXG5cbi8qKlxuICogIEJpbmRpbmcgY2xhc3MuXG4gKlxuICogIGVhY2ggcHJvcGVydHkgb24gdGhlIHZpZXdtb2RlbCBoYXMgb25lIGNvcnJlc3BvbmRpbmcgQmluZGluZyBvYmplY3RcbiAqICB3aGljaCBoYXMgbXVsdGlwbGUgZGlyZWN0aXZlIGluc3RhbmNlcyBvbiB0aGUgRE9NXG4gKiAgYW5kIG11bHRpcGxlIGNvbXB1dGVkIHByb3BlcnR5IGRlcGVuZGVudHNcbiAqL1xuZnVuY3Rpb24gQmluZGluZyAoY29tcGlsZXIsIGtleSwgaXNFeHAsIGlzRm4pIHtcbiAgICB0aGlzLmlkID0gYmluZGluZ0lkKytcbiAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5pc0V4cCA9ICEhaXNFeHBcbiAgICB0aGlzLmlzRm4gPSBpc0ZuXG4gICAgdGhpcy5yb290ID0gIXRoaXMuaXNFeHAgJiYga2V5LmluZGV4T2YoJy4nKSA9PT0gLTFcbiAgICB0aGlzLmNvbXBpbGVyID0gY29tcGlsZXJcbiAgICB0aGlzLmtleSA9IGtleVxuICAgIHRoaXMuZGlycyA9IFtdXG4gICAgdGhpcy5zdWJzID0gW11cbiAgICB0aGlzLmRlcHMgPSBbXVxuICAgIHRoaXMudW5ib3VuZCA9IGZhbHNlXG59XG5cbnZhciBCaW5kaW5nUHJvdG8gPSBCaW5kaW5nLnByb3RvdHlwZVxuXG4vKipcbiAqICBVcGRhdGUgdmFsdWUgYW5kIHF1ZXVlIGluc3RhbmNlIHVwZGF0ZXMuXG4gKi9cbkJpbmRpbmdQcm90by51cGRhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCB8fCB0aGlzLmlzRm4pIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgfVxuICAgIGlmICh0aGlzLmRpcnMubGVuZ3RoIHx8IHRoaXMuc3Vicy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgIGJpbmRpbmdCYXRjaGVyLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnVuYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXBkYXRlKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vKipcbiAqICBBY3R1YWxseSB1cGRhdGUgdGhlIGRpcmVjdGl2ZXMuXG4gKi9cbkJpbmRpbmdQcm90by5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gdGhpcy5kaXJzLmxlbmd0aCxcbiAgICAgICAgdmFsdWUgPSB0aGlzLnZhbCgpXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0aGlzLmRpcnNbaV0uJHVwZGF0ZSh2YWx1ZSlcbiAgICB9XG4gICAgdGhpcy5wdWIoKVxufVxuXG4vKipcbiAqICBSZXR1cm4gdGhlIHZhbHVhdGVkIHZhbHVlIHJlZ2FyZGxlc3NcbiAqICBvZiB3aGV0aGVyIGl0IGlzIGNvbXB1dGVkIG9yIG5vdFxuICovXG5CaW5kaW5nUHJvdG8udmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmlzQ29tcHV0ZWQgJiYgIXRoaXMuaXNGblxuICAgICAgICA/IHRoaXMudmFsdWUuJGdldCgpXG4gICAgICAgIDogdGhpcy52YWx1ZVxufVxuXG4vKipcbiAqICBOb3RpZnkgY29tcHV0ZWQgcHJvcGVydGllcyB0aGF0IGRlcGVuZCBvbiB0aGlzIGJpbmRpbmdcbiAqICB0byB1cGRhdGUgdGhlbXNlbHZlc1xuICovXG5CaW5kaW5nUHJvdG8ucHViID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gdGhpcy5zdWJzLmxlbmd0aFxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy5zdWJzW2ldLnVwZGF0ZSgpXG4gICAgfVxufVxuXG4vKipcbiAqICBVbmJpbmQgdGhlIGJpbmRpbmcsIHJlbW92ZSBpdHNlbGYgZnJvbSBhbGwgb2YgaXRzIGRlcGVuZGVuY2llc1xuICovXG5CaW5kaW5nUHJvdG8udW5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEluZGljYXRlIHRoaXMgaGFzIGJlZW4gdW5ib3VuZC5cbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoaXMgYmluZGluZyB3aWxsIGJlIGluXG4gICAgLy8gdGhlIGJhdGNoZXIncyBmbHVzaCBxdWV1ZSB3aGVuIGl0cyBvd25lclxuICAgIC8vIGNvbXBpbGVyIGhhcyBhbHJlYWR5IGJlZW4gZGVzdHJveWVkLlxuICAgIHRoaXMudW5ib3VuZCA9IHRydWVcbiAgICB2YXIgaSA9IHRoaXMuZGlycy5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMuZGlyc1tpXS4kdW5iaW5kKClcbiAgICB9XG4gICAgaSA9IHRoaXMuZGVwcy5sZW5ndGhcbiAgICB2YXIgc3Vic1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgc3VicyA9IHRoaXMuZGVwc1tpXS5zdWJzXG4gICAgICAgIHZhciBqID0gc3Vicy5pbmRleE9mKHRoaXMpXG4gICAgICAgIGlmIChqID4gLTEpIHN1YnMuc3BsaWNlKGosIDEpXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpbmRpbmciLCJ2YXIgRW1pdHRlciAgICAgPSByZXF1aXJlKCcuL2VtaXR0ZXInKSxcbiAgICBPYnNlcnZlciAgICA9IHJlcXVpcmUoJy4vb2JzZXJ2ZXInKSxcbiAgICBjb25maWcgICAgICA9IHJlcXVpcmUoJy4vY29uZmlnJyksXG4gICAgdXRpbHMgICAgICAgPSByZXF1aXJlKCcuL3V0aWxzJyksXG4gICAgQmluZGluZyAgICAgPSByZXF1aXJlKCcuL2JpbmRpbmcnKSxcbiAgICBEaXJlY3RpdmUgICA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlJyksXG4gICAgVGV4dFBhcnNlciAgPSByZXF1aXJlKCcuL3RleHQtcGFyc2VyJyksXG4gICAgRGVwc1BhcnNlciAgPSByZXF1aXJlKCcuL2RlcHMtcGFyc2VyJyksXG4gICAgRXhwUGFyc2VyICAgPSByZXF1aXJlKCcuL2V4cC1wYXJzZXInKSxcbiAgICBWaWV3TW9kZWwsXG4gICAgXG4gICAgLy8gY2FjaGUgbWV0aG9kc1xuICAgIHNsaWNlICAgICAgID0gW10uc2xpY2UsXG4gICAgZXh0ZW5kICAgICAgPSB1dGlscy5leHRlbmQsXG4gICAgaGFzT3duICAgICAgPSAoe30pLmhhc093blByb3BlcnR5LFxuICAgIGRlZiAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuXG4gICAgLy8gaG9va3MgdG8gcmVnaXN0ZXJcbiAgICBob29rcyA9IFtcbiAgICAgICAgJ2NyZWF0ZWQnLCAncmVhZHknLFxuICAgICAgICAnYmVmb3JlRGVzdHJveScsICdhZnRlckRlc3Ryb3knLFxuICAgICAgICAnYXR0YWNoZWQnLCAnZGV0YWNoZWQnXG4gICAgXSxcblxuICAgIC8vIGxpc3Qgb2YgcHJpb3JpdHkgZGlyZWN0aXZlc1xuICAgIC8vIHRoYXQgbmVlZHMgdG8gYmUgY2hlY2tlZCBpbiBzcGVjaWZpYyBvcmRlclxuICAgIHByaW9yaXR5RGlyZWN0aXZlcyA9IFtcbiAgICAgICAgJ2lmJyxcbiAgICAgICAgJ3JlcGVhdCcsXG4gICAgICAgICd2aWV3JyxcbiAgICAgICAgJ2NvbXBvbmVudCdcbiAgICBdXG5cbi8qKlxuICogIFRoZSBET00gY29tcGlsZXJcbiAqICBzY2FucyBhIERPTSBub2RlIGFuZCBjb21waWxlIGJpbmRpbmdzIGZvciBhIFZpZXdNb2RlbFxuICovXG5mdW5jdGlvbiBDb21waWxlciAodm0sIG9wdGlvbnMpIHtcblxuICAgIHZhciBjb21waWxlciA9IHRoaXMsXG4gICAgICAgIGtleSwgaVxuXG4gICAgLy8gZGVmYXVsdCBzdGF0ZVxuICAgIGNvbXBpbGVyLmluaXQgICAgICAgPSB0cnVlXG4gICAgY29tcGlsZXIuZGVzdHJveWVkICA9IGZhbHNlXG5cbiAgICAvLyBwcm9jZXNzIGFuZCBleHRlbmQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBjb21waWxlci5vcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHV0aWxzLnByb2Nlc3NPcHRpb25zKG9wdGlvbnMpXG5cbiAgICAvLyBjb3B5IGNvbXBpbGVyIG9wdGlvbnNcbiAgICBleHRlbmQoY29tcGlsZXIsIG9wdGlvbnMuY29tcGlsZXJPcHRpb25zKVxuICAgIC8vIHJlcGVhdCBpbmRpY2F0ZXMgdGhpcyBpcyBhIHYtcmVwZWF0IGluc3RhbmNlXG4gICAgY29tcGlsZXIucmVwZWF0ICAgPSBjb21waWxlci5yZXBlYXQgfHwgZmFsc2VcbiAgICAvLyBleHBDYWNoZSB3aWxsIGJlIHNoYXJlZCBiZXR3ZWVuIHYtcmVwZWF0IGluc3RhbmNlc1xuICAgIGNvbXBpbGVyLmV4cENhY2hlID0gY29tcGlsZXIuZXhwQ2FjaGUgfHwge31cblxuICAgIC8vIGluaXRpYWxpemUgZWxlbWVudFxuICAgIHZhciBlbCA9IGNvbXBpbGVyLmVsID0gY29tcGlsZXIuc2V0dXBFbGVtZW50KG9wdGlvbnMpXG4gICAgdXRpbHMubG9nKCdcXG5uZXcgVk0gaW5zdGFuY2U6ICcgKyBlbC50YWdOYW1lICsgJ1xcbicpXG5cbiAgICAvLyBzZXQgb3RoZXIgY29tcGlsZXIgcHJvcGVydGllc1xuICAgIGNvbXBpbGVyLnZtICAgICAgID0gZWwudnVlX3ZtID0gdm1cbiAgICBjb21waWxlci5iaW5kaW5ncyA9IHV0aWxzLmhhc2goKVxuICAgIGNvbXBpbGVyLmRpcnMgICAgID0gW11cbiAgICBjb21waWxlci5kZWZlcnJlZCA9IFtdXG4gICAgY29tcGlsZXIuY29tcHV0ZWQgPSBbXVxuICAgIGNvbXBpbGVyLmNoaWxkcmVuID0gW11cbiAgICBjb21waWxlci5lbWl0dGVyICA9IG5ldyBFbWl0dGVyKHZtKVxuXG4gICAgLy8gVk0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBzZXQgVk0gcHJvcGVydGllc1xuICAgIHZtLiQgICAgICAgICA9IHt9XG4gICAgdm0uJGVsICAgICAgID0gZWxcbiAgICB2bS4kb3B0aW9ucyAgPSBvcHRpb25zXG4gICAgdm0uJGNvbXBpbGVyID0gY29tcGlsZXJcbiAgICB2bS4kZXZlbnQgICAgPSBudWxsXG5cbiAgICAvLyBzZXQgcGFyZW50ICYgcm9vdFxuICAgIHZhciBwYXJlbnRWTSA9IG9wdGlvbnMucGFyZW50XG4gICAgaWYgKHBhcmVudFZNKSB7XG4gICAgICAgIGNvbXBpbGVyLnBhcmVudCA9IHBhcmVudFZNLiRjb21waWxlclxuICAgICAgICBwYXJlbnRWTS4kY29tcGlsZXIuY2hpbGRyZW4ucHVzaChjb21waWxlcilcbiAgICAgICAgdm0uJHBhcmVudCA9IHBhcmVudFZNXG4gICAgICAgIC8vIGluaGVyaXQgbGF6eSBvcHRpb25cbiAgICAgICAgaWYgKCEoJ2xhenknIGluIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxhenkgPSBjb21waWxlci5wYXJlbnQub3B0aW9ucy5sYXp5XG4gICAgICAgIH1cbiAgICB9XG4gICAgdm0uJHJvb3QgPSBnZXRSb290KGNvbXBpbGVyKS52bVxuXG4gICAgLy8gREFUQSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBzZXR1cCBvYnNlcnZlclxuICAgIC8vIHRoaXMgaXMgbmVjZXNhcnJ5IGZvciBhbGwgaG9va3MgYW5kIGRhdGEgb2JzZXJ2YXRpb24gZXZlbnRzXG4gICAgY29tcGlsZXIuc2V0dXBPYnNlcnZlcigpXG5cbiAgICAvLyBjcmVhdGUgYmluZGluZ3MgZm9yIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICBpZiAob3B0aW9ucy5tZXRob2RzKSB7XG4gICAgICAgIGZvciAoa2V5IGluIG9wdGlvbnMubWV0aG9kcykge1xuICAgICAgICAgICAgY29tcGlsZXIuY3JlYXRlQmluZGluZyhrZXkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYmluZGluZ3MgZm9yIG1ldGhvZHNcbiAgICBpZiAob3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgICBmb3IgKGtleSBpbiBvcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICAgICAgICBjb21waWxlci5jcmVhdGVCaW5kaW5nKGtleSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGluaXRpYWxpemUgZGF0YVxuICAgIHZhciBkYXRhID0gY29tcGlsZXIuZGF0YSA9IG9wdGlvbnMuZGF0YSB8fCB7fSxcbiAgICAgICAgZGVmYXVsdERhdGEgPSBvcHRpb25zLmRlZmF1bHREYXRhXG4gICAgaWYgKGRlZmF1bHREYXRhKSB7XG4gICAgICAgIGZvciAoa2V5IGluIGRlZmF1bHREYXRhKSB7XG4gICAgICAgICAgICBpZiAoIWhhc093bi5jYWxsKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBkZWZhdWx0RGF0YVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb3B5IHBhcmFtQXR0cmlidXRlc1xuICAgIHZhciBwYXJhbXMgPSBvcHRpb25zLnBhcmFtQXR0cmlidXRlc1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgICAgaSA9IHBhcmFtcy5sZW5ndGhcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgZGF0YVtwYXJhbXNbaV1dID0gdXRpbHMuY2hlY2tOdW1iZXIoXG4gICAgICAgICAgICAgICAgY29tcGlsZXIuZXZhbChcbiAgICAgICAgICAgICAgICAgICAgZWwuZ2V0QXR0cmlidXRlKHBhcmFtc1tpXSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb3B5IGRhdGEgcHJvcGVydGllcyB0byB2bVxuICAgIC8vIHNvIHVzZXIgY2FuIGFjY2VzcyB0aGVtIGluIHRoZSBjcmVhdGVkIGhvb2tcbiAgICBleHRlbmQodm0sIGRhdGEpXG4gICAgdm0uJGRhdGEgPSBkYXRhXG5cbiAgICAvLyBiZWZvcmVDb21waWxlIGhvb2tcbiAgICBjb21waWxlci5leGVjSG9vaygnY3JlYXRlZCcpXG5cbiAgICAvLyB0aGUgdXNlciBtaWdodCBoYXZlIHN3YXBwZWQgdGhlIGRhdGEgLi4uXG4gICAgZGF0YSA9IGNvbXBpbGVyLmRhdGEgPSB2bS4kZGF0YVxuXG4gICAgLy8gdXNlciBtaWdodCBhbHNvIHNldCBzb21lIHByb3BlcnRpZXMgb24gdGhlIHZtXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgY29weSBiYWNrIHRvICRkYXRhXG4gICAgdmFyIHZtUHJvcFxuICAgIGZvciAoa2V5IGluIHZtKSB7XG4gICAgICAgIHZtUHJvcCA9IHZtW2tleV1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmXG4gICAgICAgICAgICBkYXRhW2tleV0gIT09IHZtUHJvcCAmJlxuICAgICAgICAgICAgdHlwZW9mIHZtUHJvcCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IHZtUHJvcFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm93IHdlIGNhbiBvYnNlcnZlIHRoZSBkYXRhLlxuICAgIC8vIHRoaXMgd2lsbCBjb252ZXJ0IGRhdGEgcHJvcGVydGllcyB0byBnZXR0ZXIvc2V0dGVyc1xuICAgIC8vIGFuZCBlbWl0IHRoZSBmaXJzdCBiYXRjaCBvZiBzZXQgZXZlbnRzLCB3aGljaCB3aWxsXG4gICAgLy8gaW4gdHVybiBjcmVhdGUgdGhlIGNvcnJlc3BvbmRpbmcgYmluZGluZ3MuXG4gICAgY29tcGlsZXIub2JzZXJ2ZURhdGEoZGF0YSlcblxuICAgIC8vIENPTVBJTEUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gYmVmb3JlIGNvbXBpbGluZywgcmVzb2x2ZSBjb250ZW50IGluc2VydGlvbiBwb2ludHNcbiAgICBpZiAob3B0aW9ucy50ZW1wbGF0ZSkge1xuICAgICAgICB0aGlzLnJlc29sdmVDb250ZW50KClcbiAgICB9XG5cbiAgICAvLyBub3cgcGFyc2UgdGhlIERPTSBhbmQgYmluZCBkaXJlY3RpdmVzLlxuICAgIC8vIER1cmluZyB0aGlzIHN0YWdlLCB3ZSB3aWxsIGFsc28gY3JlYXRlIGJpbmRpbmdzIGZvclxuICAgIC8vIGVuY291bnRlcmVkIGtleXBhdGhzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJpbmRpbmcgeWV0LlxuICAgIGNvbXBpbGVyLmNvbXBpbGUoZWwsIHRydWUpXG5cbiAgICAvLyBBbnkgZGlyZWN0aXZlIHRoYXQgY3JlYXRlcyBjaGlsZCBWTXMgYXJlIGRlZmVycmVkXG4gICAgLy8gc28gdGhhdCB3aGVuIHRoZXkgYXJlIGNvbXBpbGVkLCBhbGwgYmluZGluZ3Mgb24gdGhlXG4gICAgLy8gcGFyZW50IFZNIGhhdmUgYmVlbiBjcmVhdGVkLlxuICAgIGkgPSBjb21waWxlci5kZWZlcnJlZC5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbXBpbGVyLmJpbmREaXJlY3RpdmUoY29tcGlsZXIuZGVmZXJyZWRbaV0pXG4gICAgfVxuICAgIGNvbXBpbGVyLmRlZmVycmVkID0gbnVsbFxuXG4gICAgLy8gZXh0cmFjdCBkZXBlbmRlbmNpZXMgZm9yIGNvbXB1dGVkIHByb3BlcnRpZXMuXG4gICAgLy8gdGhpcyB3aWxsIGV2YWx1YXRlZCBhbGwgY29sbGVjdGVkIGNvbXB1dGVkIGJpbmRpbmdzXG4gICAgLy8gYW5kIGNvbGxlY3QgZ2V0IGV2ZW50cyB0aGF0IGFyZSBlbWl0dGVkLlxuICAgIGlmICh0aGlzLmNvbXB1dGVkLmxlbmd0aCkge1xuICAgICAgICBEZXBzUGFyc2VyLnBhcnNlKHRoaXMuY29tcHV0ZWQpXG4gICAgfVxuXG4gICAgLy8gZG9uZSFcbiAgICBjb21waWxlci5pbml0ID0gZmFsc2VcblxuICAgIC8vIHBvc3QgY29tcGlsZSAvIHJlYWR5IGhvb2tcbiAgICBjb21waWxlci5leGVjSG9vaygncmVhZHknKVxufVxuXG52YXIgQ29tcGlsZXJQcm90byA9IENvbXBpbGVyLnByb3RvdHlwZVxuXG4vKipcbiAqICBJbml0aWFsaXplIHRoZSBWTS9Db21waWxlcidzIGVsZW1lbnQuXG4gKiAgRmlsbCBpdCBpbiB3aXRoIHRoZSB0ZW1wbGF0ZSBpZiBuZWNlc3NhcnkuXG4gKi9cbkNvbXBpbGVyUHJvdG8uc2V0dXBFbGVtZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAvLyBjcmVhdGUgdGhlIG5vZGUgZmlyc3RcbiAgICB2YXIgZWwgPSB0eXBlb2Ygb3B0aW9ucy5lbCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuZWwpXG4gICAgICAgIDogb3B0aW9ucy5lbCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9wdGlvbnMudGFnTmFtZSB8fCAnZGl2JylcblxuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGUsXG4gICAgICAgIGNoaWxkLCByZXBsYWNlciwgaSwgYXR0ciwgYXR0cnNcblxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAvLyBjb2xsZWN0IGFueXRoaW5nIGFscmVhZHkgaW4gdGhlcmVcbiAgICAgICAgaWYgKGVsLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgdGhpcy5yYXdDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgICAgIC8qIGpzaGludCBib3NzOiB0cnVlICovXG4gICAgICAgICAgICB3aGlsZSAoY2hpbGQgPSBlbC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXdDb250ZW50LmFwcGVuZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHJlcGxhY2Ugb3B0aW9uOiB1c2UgdGhlIGZpcnN0IG5vZGUgaW5cbiAgICAgICAgLy8gdGhlIHRlbXBsYXRlIGRpcmVjdGx5XG4gICAgICAgIGlmIChvcHRpb25zLnJlcGxhY2UgJiYgdGVtcGxhdGUuZmlyc3RDaGlsZCA9PT0gdGVtcGxhdGUubGFzdENoaWxkKSB7XG4gICAgICAgICAgICByZXBsYWNlciA9IHRlbXBsYXRlLmZpcnN0Q2hpbGQuY2xvbmVOb2RlKHRydWUpXG4gICAgICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJlcGxhY2VyLCBlbClcbiAgICAgICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29weSBvdmVyIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICAgICAgICBpID0gZWwuYXR0cmlidXRlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIgPSBlbC5hdHRyaWJ1dGVzW2ldXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VyLnNldEF0dHJpYnV0ZShhdHRyLm5hbWUsIGF0dHIudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVwbGFjZVxuICAgICAgICAgICAgZWwgPSByZXBsYWNlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpKVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBhcHBseSBlbGVtZW50IG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucy5pZCkgZWwuaWQgPSBvcHRpb25zLmlkXG4gICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSBlbC5jbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZVxuICAgIGF0dHJzID0gb3B0aW9ucy5hdHRyaWJ1dGVzXG4gICAgaWYgKGF0dHJzKSB7XG4gICAgICAgIGZvciAoYXR0ciBpbiBhdHRycykge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsXG59XG5cbi8qKlxuICogIERlYWwgd2l0aCA8Y29udGVudD4gaW5zZXJ0aW9uIHBvaW50c1xuICogIHBlciB0aGUgV2ViIENvbXBvbmVudHMgc3BlY1xuICovXG5Db21waWxlclByb3RvLnJlc29sdmVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIG91dGxldHMgPSBzbGljZS5jYWxsKHRoaXMuZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NvbnRlbnQnKSksXG4gICAgICAgIHJhdyA9IHRoaXMucmF3Q29udGVudCxcbiAgICAgICAgb3V0bGV0LCBzZWxlY3QsIGksIGosIG1haW5cblxuICAgIGkgPSBvdXRsZXRzLmxlbmd0aFxuICAgIGlmIChpKSB7XG4gICAgICAgIC8vIGZpcnN0IHBhc3MsIGNvbGxlY3QgY29ycmVzcG9uZGluZyBjb250ZW50XG4gICAgICAgIC8vIGZvciBlYWNoIG91dGxldC5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgb3V0bGV0ID0gb3V0bGV0c1tpXVxuICAgICAgICAgICAgaWYgKHJhdykge1xuICAgICAgICAgICAgICAgIHNlbGVjdCA9IG91dGxldC5nZXRBdHRyaWJ1dGUoJ3NlbGVjdCcpXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdCkgeyAvLyBzZWxlY3QgY29udGVudFxuICAgICAgICAgICAgICAgICAgICBvdXRsZXQuY29udGVudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGljZS5jYWxsKHJhdy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdCkpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZGVmYXVsdCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIG1haW4gPSBvdXRsZXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBmYWxsYmFjayBjb250ZW50XG4gICAgICAgICAgICAgICAgb3V0bGV0LmNvbnRlbnQgPVxuICAgICAgICAgICAgICAgICAgICBzbGljZS5jYWxsKG91dGxldC5jaGlsZE5vZGVzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNlY29uZCBwYXNzLCBhY3R1YWxseSBpbnNlcnQgdGhlIGNvbnRlbnRzXG4gICAgICAgIGZvciAoaSA9IDAsIGogPSBvdXRsZXRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgb3V0bGV0ID0gb3V0bGV0c1tpXVxuICAgICAgICAgICAgaWYgKG91dGxldCA9PT0gbWFpbikgY29udGludWVcbiAgICAgICAgICAgIGluc2VydChvdXRsZXQsIG91dGxldC5jb250ZW50KVxuICAgICAgICB9XG4gICAgICAgIC8vIGZpbmFsbHkgaW5zZXJ0IHRoZSBtYWluIGNvbnRlbnRcbiAgICAgICAgaWYgKHJhdyAmJiBtYWluKSB7XG4gICAgICAgICAgICBpbnNlcnQobWFpbiwgc2xpY2UuY2FsbChyYXcuY2hpbGROb2RlcykpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNlcnQgKG91dGxldCwgY29udGVudHMpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IG91dGxldC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgaSA9IDAsIGogPSBjb250ZW50cy5sZW5ndGhcbiAgICAgICAgZm9yICg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY29udGVudHNbaV0sIG91dGxldClcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQob3V0bGV0KVxuICAgIH1cblxuICAgIHRoaXMucmF3Q29udGVudCA9IG51bGxcbn1cblxuLyoqXG4gKiAgU2V0dXAgb2JzZXJ2ZXIuXG4gKiAgVGhlIG9ic2VydmVyIGxpc3RlbnMgZm9yIGdldC9zZXQvbXV0YXRlIGV2ZW50cyBvbiBhbGwgVk1cbiAqICB2YWx1ZXMvb2JqZWN0cyBhbmQgdHJpZ2dlciBjb3JyZXNwb25kaW5nIGJpbmRpbmcgdXBkYXRlcy5cbiAqICBJdCBhbHNvIGxpc3RlbnMgZm9yIGxpZmVjeWNsZSBob29rcy5cbiAqL1xuQ29tcGlsZXJQcm90by5zZXR1cE9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGNvbXBpbGVyID0gdGhpcyxcbiAgICAgICAgYmluZGluZ3MgPSBjb21waWxlci5iaW5kaW5ncyxcbiAgICAgICAgb3B0aW9ucyAgPSBjb21waWxlci5vcHRpb25zLFxuICAgICAgICBvYnNlcnZlciA9IGNvbXBpbGVyLm9ic2VydmVyID0gbmV3IEVtaXR0ZXIoY29tcGlsZXIudm0pXG5cbiAgICAvLyBhIGhhc2ggdG8gaG9sZCBldmVudCBwcm94aWVzIGZvciBlYWNoIHJvb3QgbGV2ZWwga2V5XG4gICAgLy8gc28gdGhleSBjYW4gYmUgcmVmZXJlbmNlZCBhbmQgcmVtb3ZlZCBsYXRlclxuICAgIG9ic2VydmVyLnByb3hpZXMgPSB7fVxuXG4gICAgLy8gYWRkIG93biBsaXN0ZW5lcnMgd2hpY2ggdHJpZ2dlciBiaW5kaW5nIHVwZGF0ZXNcbiAgICBvYnNlcnZlclxuICAgICAgICAub24oJ2dldCcsIG9uR2V0KVxuICAgICAgICAub24oJ3NldCcsIG9uU2V0KVxuICAgICAgICAub24oJ211dGF0ZScsIG9uU2V0KVxuXG4gICAgLy8gcmVnaXN0ZXIgaG9va3NcbiAgICB2YXIgaSA9IGhvb2tzLmxlbmd0aCwgaiwgaG9vaywgZm5zXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBob29rID0gaG9va3NbaV1cbiAgICAgICAgZm5zID0gb3B0aW9uc1tob29rXVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICAgICAgICBqID0gZm5zLmxlbmd0aFxuICAgICAgICAgICAgLy8gc2luY2UgaG9va3Mgd2VyZSBtZXJnZWQgd2l0aCBjaGlsZCBhdCBoZWFkLFxuICAgICAgICAgICAgLy8gd2UgbG9vcCByZXZlcnNlbHkuXG4gICAgICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJIb29rKGhvb2ssIGZuc1tqXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmbnMpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVySG9vayhob29rLCBmbnMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBicm9hZGNhc3QgYXR0YWNoZWQvZGV0YWNoZWQgaG9va3NcbiAgICBvYnNlcnZlclxuICAgICAgICAub24oJ2hvb2s6YXR0YWNoZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBicm9hZGNhc3QoMSlcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdob29rOmRldGFjaGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYnJvYWRjYXN0KDApXG4gICAgICAgIH0pXG5cbiAgICBmdW5jdGlvbiBvbkdldCAoa2V5KSB7XG4gICAgICAgIGNoZWNrKGtleSlcbiAgICAgICAgRGVwc1BhcnNlci5jYXRjaGVyLmVtaXQoJ2dldCcsIGJpbmRpbmdzW2tleV0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TZXQgKGtleSwgdmFsLCBtdXRhdGlvbikge1xuICAgICAgICBvYnNlcnZlci5lbWl0KCdjaGFuZ2U6JyArIGtleSwgdmFsLCBtdXRhdGlvbilcbiAgICAgICAgY2hlY2soa2V5KVxuICAgICAgICBiaW5kaW5nc1trZXldLnVwZGF0ZSh2YWwpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJIb29rIChob29rLCBmbikge1xuICAgICAgICBvYnNlcnZlci5vbignaG9vazonICsgaG9vaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm4uY2FsbChjb21waWxlci52bSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBicm9hZGNhc3QgKGV2ZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IGNvbXBpbGVyLmNoaWxkcmVuXG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgdmFyIGNoaWxkLCBpID0gY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXVxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5lbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gJ2hvb2s6JyArIChldmVudCA/ICdhdHRhY2hlZCcgOiAnZGV0YWNoZWQnKVxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5vYnNlcnZlci5lbWl0KGV2ZW50KVxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5lbWl0dGVyLmVtaXQoZXZlbnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2sgKGtleSkge1xuICAgICAgICBpZiAoIWJpbmRpbmdzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbXBpbGVyLmNyZWF0ZUJpbmRpbmcoa2V5KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5Db21waWxlclByb3RvLm9ic2VydmVEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgIHZhciBjb21waWxlciA9IHRoaXMsXG4gICAgICAgIG9ic2VydmVyID0gY29tcGlsZXIub2JzZXJ2ZXJcblxuICAgIC8vIHJlY3Vyc2l2ZWx5IG9ic2VydmUgbmVzdGVkIHByb3BlcnRpZXNcbiAgICBPYnNlcnZlci5vYnNlcnZlKGRhdGEsICcnLCBvYnNlcnZlcilcblxuICAgIC8vIGFsc28gY3JlYXRlIGJpbmRpbmcgZm9yIHRvcCBsZXZlbCAkZGF0YVxuICAgIC8vIHNvIGl0IGNhbiBiZSB1c2VkIGluIHRlbXBsYXRlcyB0b29cbiAgICB2YXIgJGRhdGFCaW5kaW5nID0gY29tcGlsZXIuYmluZGluZ3NbJyRkYXRhJ10gPSBuZXcgQmluZGluZyhjb21waWxlciwgJyRkYXRhJylcbiAgICAkZGF0YUJpbmRpbmcudXBkYXRlKGRhdGEpXG5cbiAgICAvLyBhbGxvdyAkZGF0YSB0byBiZSBzd2FwcGVkXG4gICAgZGVmKGNvbXBpbGVyLnZtLCAnJGRhdGEnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tcGlsZXIub2JzZXJ2ZXIuZW1pdCgnZ2V0JywgJyRkYXRhJylcbiAgICAgICAgICAgIHJldHVybiBjb21waWxlci5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgICAgICAgIHZhciBvbGREYXRhID0gY29tcGlsZXIuZGF0YVxuICAgICAgICAgICAgT2JzZXJ2ZXIudW5vYnNlcnZlKG9sZERhdGEsICcnLCBvYnNlcnZlcilcbiAgICAgICAgICAgIGNvbXBpbGVyLmRhdGEgPSBuZXdEYXRhXG4gICAgICAgICAgICBPYnNlcnZlci5jb3B5UGF0aHMobmV3RGF0YSwgb2xkRGF0YSlcbiAgICAgICAgICAgIE9ic2VydmVyLm9ic2VydmUobmV3RGF0YSwgJycsIG9ic2VydmVyKVxuICAgICAgICAgICAgdXBkYXRlKClcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBlbWl0ICRkYXRhIGNoYW5nZSBvbiBhbGwgY2hhbmdlc1xuICAgIG9ic2VydmVyXG4gICAgICAgIC5vbignc2V0Jywgb25TZXQpXG4gICAgICAgIC5vbignbXV0YXRlJywgb25TZXQpXG5cbiAgICBmdW5jdGlvbiBvblNldCAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgIT09ICckZGF0YScpIHVwZGF0ZSgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgICAgICAgJGRhdGFCaW5kaW5nLnVwZGF0ZShjb21waWxlci5kYXRhKVxuICAgICAgICBvYnNlcnZlci5lbWl0KCdjaGFuZ2U6JGRhdGEnLCBjb21waWxlci5kYXRhKVxuICAgIH1cbn1cblxuLyoqXG4gKiAgQ29tcGlsZSBhIERPTSBub2RlIChyZWN1cnNpdmUpXG4gKi9cbkNvbXBpbGVyUHJvdG8uY29tcGlsZSA9IGZ1bmN0aW9uIChub2RlLCByb290KSB7XG4gICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZVxuICAgIGlmIChub2RlVHlwZSA9PT0gMSAmJiBub2RlLnRhZ05hbWUgIT09ICdTQ1JJUFQnKSB7IC8vIGEgbm9ybWFsIG5vZGVcbiAgICAgICAgdGhpcy5jb21waWxlRWxlbWVudChub2RlLCByb290KVxuICAgIH0gZWxzZSBpZiAobm9kZVR5cGUgPT09IDMgJiYgY29uZmlnLmludGVycG9sYXRlKSB7XG4gICAgICAgIHRoaXMuY29tcGlsZVRleHROb2RlKG5vZGUpXG4gICAgfVxufVxuXG4vKipcbiAqICBDaGVjayBmb3IgYSBwcmlvcml0eSBkaXJlY3RpdmVcbiAqICBJZiBpdCBpcyBwcmVzZW50IGFuZCB2YWxpZCwgcmV0dXJuIHRydWUgdG8gc2tpcCB0aGUgcmVzdFxuICovXG5Db21waWxlclByb3RvLmNoZWNrUHJpb3JpdHlEaXIgPSBmdW5jdGlvbiAoZGlybmFtZSwgbm9kZSwgcm9vdCkge1xuICAgIHZhciBleHByZXNzaW9uLCBkaXJlY3RpdmUsIEN0b3JcbiAgICBpZiAoXG4gICAgICAgIGRpcm5hbWUgPT09ICdjb21wb25lbnQnICYmXG4gICAgICAgIHJvb3QgIT09IHRydWUgJiZcbiAgICAgICAgKEN0b3IgPSB0aGlzLnJlc29sdmVDb21wb25lbnQobm9kZSwgdW5kZWZpbmVkLCB0cnVlKSlcbiAgICApIHtcbiAgICAgICAgZGlyZWN0aXZlID0gdGhpcy5wYXJzZURpcmVjdGl2ZShkaXJuYW1lLCAnJywgbm9kZSlcbiAgICAgICAgZGlyZWN0aXZlLkN0b3IgPSBDdG9yXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHV0aWxzLmF0dHIobm9kZSwgZGlybmFtZSlcbiAgICAgICAgZGlyZWN0aXZlID0gZXhwcmVzc2lvbiAmJiB0aGlzLnBhcnNlRGlyZWN0aXZlKGRpcm5hbWUsIGV4cHJlc3Npb24sIG5vZGUpXG4gICAgfVxuICAgIGlmIChkaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKHJvb3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHV0aWxzLndhcm4oXG4gICAgICAgICAgICAgICAgJ0RpcmVjdGl2ZSB2LScgKyBkaXJuYW1lICsgJyBjYW5ub3QgYmUgdXNlZCBvbiBhbiBhbHJlYWR5IGluc3RhbnRpYXRlZCAnICtcbiAgICAgICAgICAgICAgICAnVk1cXCdzIHJvb3Qgbm9kZS4gVXNlIGl0IGZyb20gdGhlIHBhcmVudFxcJ3MgdGVtcGxhdGUgaW5zdGVhZC4nXG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlZmVycmVkLnB1c2goZGlyZWN0aXZlKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn1cblxuLyoqXG4gKiAgQ29tcGlsZSBub3JtYWwgZGlyZWN0aXZlcyBvbiBhIG5vZGVcbiAqL1xuQ29tcGlsZXJQcm90by5jb21waWxlRWxlbWVudCA9IGZ1bmN0aW9uIChub2RlLCByb290KSB7XG5cbiAgICAvLyB0ZXh0YXJlYSBpcyBwcmV0dHkgYW5ub3lpbmdcbiAgICAvLyBiZWNhdXNlIGl0cyB2YWx1ZSBjcmVhdGVzIGNoaWxkTm9kZXMgd2hpY2hcbiAgICAvLyB3ZSBkb24ndCB3YW50IHRvIGNvbXBpbGUuXG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiBub2RlLnZhbHVlKSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSB0aGlzLmV2YWwobm9kZS52YWx1ZSlcbiAgICB9XG5cbiAgICAvLyBvbmx5IGNvbXBpbGUgaWYgdGhpcyBlbGVtZW50IGhhcyBhdHRyaWJ1dGVzXG4gICAgLy8gb3IgaXRzIHRhZ05hbWUgY29udGFpbnMgYSBoeXBoZW4gKHdoaWNoIG1lYW5zIGl0IGNvdWxkXG4gICAgLy8gcG90ZW50aWFsbHkgYmUgYSBjdXN0b20gZWxlbWVudClcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGVzKCkgfHwgbm9kZS50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG5cbiAgICAgICAgLy8gc2tpcCBhbnl0aGluZyB3aXRoIHYtcHJlXG4gICAgICAgIGlmICh1dGlscy5hdHRyKG5vZGUsICdwcmUnKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSwgbCwgaiwga1xuXG4gICAgICAgIC8vIGNoZWNrIHByaW9yaXR5IGRpcmVjdGl2ZXMuXG4gICAgICAgIC8vIGlmIGFueSBvZiB0aGVtIGFyZSBwcmVzZW50LCBpdCB3aWxsIHRha2Ugb3ZlciB0aGUgbm9kZSB3aXRoIGEgY2hpbGRWTVxuICAgICAgICAvLyBzbyB3ZSBjYW4gc2tpcCB0aGUgcmVzdFxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gcHJpb3JpdHlEaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQcmlvcml0eURpcihwcmlvcml0eURpcmVjdGl2ZXNbaV0sIG5vZGUsIHJvb3QpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayB0cmFuc2l0aW9uICYgYW5pbWF0aW9uIHByb3BlcnRpZXNcbiAgICAgICAgbm9kZS52dWVfdHJhbnMgID0gdXRpbHMuYXR0cihub2RlLCAndHJhbnNpdGlvbicpXG4gICAgICAgIG5vZGUudnVlX2FuaW0gICA9IHV0aWxzLmF0dHIobm9kZSwgJ2FuaW1hdGlvbicpXG4gICAgICAgIG5vZGUudnVlX2VmZmVjdCA9IHRoaXMuZXZhbCh1dGlscy5hdHRyKG5vZGUsICdlZmZlY3QnKSlcblxuICAgICAgICB2YXIgcHJlZml4ID0gY29uZmlnLnByZWZpeCArICctJyxcbiAgICAgICAgICAgIHBhcmFtcyA9IHRoaXMub3B0aW9ucy5wYXJhbUF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBhdHRyLCBhdHRybmFtZSwgaXNEaXJlY3RpdmUsIGV4cCwgZGlyZWN0aXZlcywgZGlyZWN0aXZlLCBkaXJuYW1lXG5cbiAgICAgICAgLy8gdi13aXRoIGhhcyBzcGVjaWFsIHByaW9yaXR5IGFtb25nIHRoZSByZXN0XG4gICAgICAgIC8vIGl0IG5lZWRzIHRvIHB1bGwgaW4gdGhlIHZhbHVlIGZyb20gdGhlIHBhcmVudCBiZWZvcmVcbiAgICAgICAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgZXZhbHVhdGVkLCBiZWNhdXNlIGF0IHRoaXMgc3RhZ2VcbiAgICAgICAgLy8gdGhlIGNvbXB1dGVkIHByb3BlcnRpZXMgaGF2ZSBub3Qgc2V0IHVwIHRoZWlyIGRlcGVuZGVuY2llcyB5ZXQuXG4gICAgICAgIGlmIChyb290KSB7XG4gICAgICAgICAgICB2YXIgd2l0aEV4cCA9IHV0aWxzLmF0dHIobm9kZSwgJ3dpdGgnKVxuICAgICAgICAgICAgaWYgKHdpdGhFeHApIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZSgnd2l0aCcsIHdpdGhFeHAsIG5vZGUsIHRydWUpXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMCwgayA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmluZERpcmVjdGl2ZShkaXJlY3RpdmVzW2pdLCB0aGlzLnBhcmVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXR0cnMgPSBzbGljZS5jYWxsKG5vZGUuYXR0cmlidXRlcylcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXG4gICAgICAgICAgICBhdHRyID0gYXR0cnNbaV1cbiAgICAgICAgICAgIGF0dHJuYW1lID0gYXR0ci5uYW1lXG4gICAgICAgICAgICBpc0RpcmVjdGl2ZSA9IGZhbHNlXG5cbiAgICAgICAgICAgIGlmIChhdHRybmFtZS5pbmRleE9mKHByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBhIGRpcmVjdGl2ZSAtIHNwbGl0LCBwYXJzZSBhbmQgYmluZCBpdC5cbiAgICAgICAgICAgICAgICBpc0RpcmVjdGl2ZSA9IHRydWVcbiAgICAgICAgICAgICAgICBkaXJuYW1lID0gYXR0cm5hbWUuc2xpY2UocHJlZml4Lmxlbmd0aClcbiAgICAgICAgICAgICAgICAvLyBidWlsZCB3aXRoIG11bHRpcGxlOiB0cnVlXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmUoZGlybmFtZSwgYXR0ci52YWx1ZSwgbm9kZSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggY2xhdXNlcyAoc2VwYXJhdGVkIGJ5IFwiLFwiKVxuICAgICAgICAgICAgICAgIC8vIGluc2lkZSBlYWNoIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmREaXJlY3RpdmUoZGlyZWN0aXZlc1tqXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5pbnRlcnBvbGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vIG5vbiBkaXJlY3RpdmUgYXR0cmlidXRlLCBjaGVjayBpbnRlcnBvbGF0aW9uIHRhZ3NcbiAgICAgICAgICAgICAgICBleHAgPSBUZXh0UGFyc2VyLnBhcnNlQXR0cihhdHRyLnZhbHVlKVxuICAgICAgICAgICAgICAgIGlmIChleHApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gdGhpcy5wYXJzZURpcmVjdGl2ZSgnYXR0cicsIGV4cCwgbm9kZSlcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmFyZyA9IGF0dHJuYW1lXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmluZGV4T2YoYXR0cm5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgcGFyYW0gYXR0cmlidXRlLi4uIHdlIHNob3VsZCB1c2UgdGhlIHBhcmVudCBiaW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhdm9pZCBjaXJjdWxhciB1cGRhdGVzIGxpa2Ugc2l6ZT17e3NpemV9fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kRGlyZWN0aXZlKGRpcmVjdGl2ZSwgdGhpcy5wYXJlbnQpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmREaXJlY3RpdmUoZGlyZWN0aXZlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNEaXJlY3RpdmUgJiYgZGlybmFtZSAhPT0gJ2Nsb2FrJykge1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJuYW1lKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyByZWN1cnNpdmVseSBjb21waWxlIGNoaWxkTm9kZXNcbiAgICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgc2xpY2UuY2FsbChub2RlLmNoaWxkTm9kZXMpLmZvckVhY2godGhpcy5jb21waWxlLCB0aGlzKVxuICAgIH1cbn1cblxuLyoqXG4gKiAgQ29tcGlsZSBhIHRleHQgbm9kZVxuICovXG5Db21waWxlclByb3RvLmNvbXBpbGVUZXh0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG5cbiAgICB2YXIgdG9rZW5zID0gVGV4dFBhcnNlci5wYXJzZShub2RlLm5vZGVWYWx1ZSlcbiAgICBpZiAoIXRva2VucykgcmV0dXJuXG4gICAgdmFyIGVsLCB0b2tlbiwgZGlyZWN0aXZlXG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblxuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXVxuICAgICAgICBkaXJlY3RpdmUgPSBudWxsXG5cbiAgICAgICAgaWYgKHRva2VuLmtleSkgeyAvLyBhIGJpbmRpbmdcbiAgICAgICAgICAgIGlmICh0b2tlbi5rZXkuY2hhckF0KDApID09PSAnPicpIHsgLy8gYSBwYXJ0aWFsXG4gICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdyZWYnKVxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHRoaXMucGFyc2VEaXJlY3RpdmUoJ3BhcnRpYWwnLCB0b2tlbi5rZXkuc2xpY2UoMSksIGVsKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuLmh0bWwpIHsgLy8gdGV4dCBiaW5kaW5nXG4gICAgICAgICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHRoaXMucGFyc2VEaXJlY3RpdmUoJ3RleHQnLCB0b2tlbi5rZXksIGVsKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGh0bWwgYmluZGluZ1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoY29uZmlnLnByZWZpeCArICctaHRtbCcpXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHRoaXMucGFyc2VEaXJlY3RpdmUoJ2h0bWwnLCB0b2tlbi5rZXksIGVsKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gYSBwbGFpbiBzdHJpbmdcbiAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodG9rZW4pXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbnNlcnQgbm9kZVxuICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBub2RlKVxuICAgICAgICAvLyBiaW5kIGRpcmVjdGl2ZVxuICAgICAgICB0aGlzLmJpbmREaXJlY3RpdmUoZGlyZWN0aXZlKVxuXG4gICAgfVxuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKVxufVxuXG4vKipcbiAqICBQYXJzZSBhIGRpcmVjdGl2ZSBuYW1lL3ZhbHVlIHBhaXIgaW50byBvbmUgb3IgbW9yZVxuICogIGRpcmVjdGl2ZSBpbnN0YW5jZXNcbiAqL1xuQ29tcGlsZXJQcm90by5wYXJzZURpcmVjdGl2ZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgZWwsIG11bHRpcGxlKSB7XG4gICAgdmFyIGNvbXBpbGVyID0gdGhpcyxcbiAgICAgICAgZGVmaW5pdGlvbiA9IGNvbXBpbGVyLmdldE9wdGlvbignZGlyZWN0aXZlcycsIG5hbWUpXG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgLy8gcGFyc2UgaW50byBBU1QtbGlrZSBvYmplY3RzXG4gICAgICAgIHZhciBhc3RzID0gRGlyZWN0aXZlLnBhcnNlKHZhbHVlKVxuICAgICAgICByZXR1cm4gbXVsdGlwbGVcbiAgICAgICAgICAgID8gYXN0cy5tYXAoYnVpbGQpXG4gICAgICAgICAgICA6IGJ1aWxkKGFzdHNbMF0pXG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkIChhc3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaXJlY3RpdmUobmFtZSwgYXN0LCBkZWZpbml0aW9uLCBjb21waWxlciwgZWwpXG4gICAgfVxufVxuXG4vKipcbiAqICBBZGQgYSBkaXJlY3RpdmUgaW5zdGFuY2UgdG8gdGhlIGNvcnJlY3QgYmluZGluZyAmIHZpZXdtb2RlbFxuICovXG5Db21waWxlclByb3RvLmJpbmREaXJlY3RpdmUgPSBmdW5jdGlvbiAoZGlyZWN0aXZlLCBiaW5kaW5nT3duZXIpIHtcblxuICAgIGlmICghZGlyZWN0aXZlKSByZXR1cm5cblxuICAgIC8vIGtlZXAgdHJhY2sgb2YgaXQgc28gd2UgY2FuIHVuYmluZCgpIGxhdGVyXG4gICAgdGhpcy5kaXJzLnB1c2goZGlyZWN0aXZlKVxuXG4gICAgLy8gZm9yIGVtcHR5IG9yIGxpdGVyYWwgZGlyZWN0aXZlcywgc2ltcGx5IGNhbGwgaXRzIGJpbmQoKVxuICAgIC8vIGFuZCB3ZSdyZSBkb25lLlxuICAgIGlmIChkaXJlY3RpdmUuaXNFbXB0eSB8fCBkaXJlY3RpdmUuaXNMaXRlcmFsKSB7XG4gICAgICAgIGlmIChkaXJlY3RpdmUuYmluZCkgZGlyZWN0aXZlLmJpbmQoKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UsIHdlIGdvdCBtb3JlIHdvcmsgdG8gZG8uLi5cbiAgICB2YXIgYmluZGluZyxcbiAgICAgICAgY29tcGlsZXIgPSBiaW5kaW5nT3duZXIgfHwgdGhpcyxcbiAgICAgICAga2V5ICAgICAgPSBkaXJlY3RpdmUua2V5XG5cbiAgICBpZiAoZGlyZWN0aXZlLmlzRXhwKSB7XG4gICAgICAgIC8vIGV4cHJlc3Npb24gYmluZGluZ3MgYXJlIGFsd2F5cyBjcmVhdGVkIG9uIGN1cnJlbnQgY29tcGlsZXJcbiAgICAgICAgYmluZGluZyA9IGNvbXBpbGVyLmNyZWF0ZUJpbmRpbmcoa2V5LCBkaXJlY3RpdmUpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgbG9jYXRlIHdoaWNoIGNvbXBpbGVyIG93bnMgdGhlIGJpbmRpbmdcbiAgICAgICAgd2hpbGUgKGNvbXBpbGVyKSB7XG4gICAgICAgICAgICBpZiAoY29tcGlsZXIuaGFzS2V5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21waWxlciA9IGNvbXBpbGVyLnBhcmVudFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbXBpbGVyID0gY29tcGlsZXIgfHwgdGhpc1xuICAgICAgICBiaW5kaW5nID0gY29tcGlsZXIuYmluZGluZ3Nba2V5XSB8fCBjb21waWxlci5jcmVhdGVCaW5kaW5nKGtleSlcbiAgICB9XG4gICAgYmluZGluZy5kaXJzLnB1c2goZGlyZWN0aXZlKVxuICAgIGRpcmVjdGl2ZS5iaW5kaW5nID0gYmluZGluZ1xuXG4gICAgdmFyIHZhbHVlID0gYmluZGluZy52YWwoKVxuICAgIC8vIGludm9rZSBiaW5kIGhvb2sgaWYgZXhpc3RzXG4gICAgaWYgKGRpcmVjdGl2ZS5iaW5kKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5iaW5kKHZhbHVlKVxuICAgIH1cbiAgICAvLyBzZXQgaW5pdGlhbCB2YWx1ZVxuICAgIGRpcmVjdGl2ZS4kdXBkYXRlKHZhbHVlLCB0cnVlKVxufVxuXG4vKipcbiAqICBDcmVhdGUgYmluZGluZyBhbmQgYXR0YWNoIGdldHRlci9zZXR0ZXIgZm9yIGEga2V5IHRvIHRoZSB2aWV3bW9kZWwgb2JqZWN0XG4gKi9cbkNvbXBpbGVyUHJvdG8uY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uIChrZXksIGRpcmVjdGl2ZSkge1xuXG4gICAgdXRpbHMubG9nKCcgIGNyZWF0ZWQgYmluZGluZzogJyArIGtleSlcblxuICAgIHZhciBjb21waWxlciA9IHRoaXMsXG4gICAgICAgIG1ldGhvZHMgID0gY29tcGlsZXIub3B0aW9ucy5tZXRob2RzLFxuICAgICAgICBpc0V4cCAgICA9IGRpcmVjdGl2ZSAmJiBkaXJlY3RpdmUuaXNFeHAsXG4gICAgICAgIGlzRm4gICAgID0gKGRpcmVjdGl2ZSAmJiBkaXJlY3RpdmUuaXNGbikgfHwgKG1ldGhvZHMgJiYgbWV0aG9kc1trZXldKSxcbiAgICAgICAgYmluZGluZ3MgPSBjb21waWxlci5iaW5kaW5ncyxcbiAgICAgICAgY29tcHV0ZWQgPSBjb21waWxlci5vcHRpb25zLmNvbXB1dGVkLFxuICAgICAgICBiaW5kaW5nICA9IG5ldyBCaW5kaW5nKGNvbXBpbGVyLCBrZXksIGlzRXhwLCBpc0ZuKVxuXG4gICAgaWYgKGlzRXhwKSB7XG4gICAgICAgIC8vIGV4cHJlc3Npb24gYmluZGluZ3MgYXJlIGFub255bW91c1xuICAgICAgICBjb21waWxlci5kZWZpbmVFeHAoa2V5LCBiaW5kaW5nLCBkaXJlY3RpdmUpXG4gICAgfSBlbHNlIGlmIChpc0ZuKSB7XG4gICAgICAgIGJpbmRpbmdzW2tleV0gPSBiaW5kaW5nXG4gICAgICAgIGNvbXBpbGVyLmRlZmluZVZtUHJvcChrZXksIGJpbmRpbmcsIG1ldGhvZHNba2V5XSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kaW5nc1trZXldID0gYmluZGluZ1xuICAgICAgICBpZiAoYmluZGluZy5yb290KSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIGEgcm9vdCBsZXZlbCBiaW5kaW5nLiB3ZSBuZWVkIHRvIGRlZmluZSBnZXR0ZXIvc2V0dGVycyBmb3IgaXQuXG4gICAgICAgICAgICBpZiAoY29tcHV0ZWQgJiYgY29tcHV0ZWRba2V5XSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbXB1dGVkIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgY29tcGlsZXIuZGVmaW5lQ29tcHV0ZWQoa2V5LCBiaW5kaW5nLCBjb21wdXRlZFtrZXldKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgcHJvcGVydHlcbiAgICAgICAgICAgICAgICBjb21waWxlci5kZWZpbmVEYXRhUHJvcChrZXksIGJpbmRpbmcpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgdGhhdCBzdGFydCB3aXRoICQgYXJlIG1ldGEgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgIC8vIHRoZXkgc2hvdWxkIGJlIGtlcHQgb24gdGhlIHZtIGJ1dCBub3QgaW4gdGhlIGRhdGEgb2JqZWN0LlxuICAgICAgICAgICAgICAgIGNvbXBpbGVyLmRlZmluZVZtUHJvcChrZXksIGJpbmRpbmcsIGNvbXBpbGVyLmRhdGFba2V5XSlcbiAgICAgICAgICAgICAgICBkZWxldGUgY29tcGlsZXIuZGF0YVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcHV0ZWQgJiYgY29tcHV0ZWRbdXRpbHMuYmFzZUtleShrZXkpXSkge1xuICAgICAgICAgICAgLy8gbmVzdGVkIHBhdGggb24gY29tcHV0ZWQgcHJvcGVydHlcbiAgICAgICAgICAgIGNvbXBpbGVyLmRlZmluZUV4cChrZXksIGJpbmRpbmcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbnN1cmUgcGF0aCBpbiBkYXRhIHNvIHRoYXQgY29tcHV0ZWQgcHJvcGVydGllcyB0aGF0XG4gICAgICAgICAgICAvLyBhY2Nlc3MgdGhlIHBhdGggZG9uJ3QgdGhyb3cgYW4gZXJyb3IgYW5kIGNhbiBjb2xsZWN0XG4gICAgICAgICAgICAvLyBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgIE9ic2VydmVyLmVuc3VyZVBhdGgoY29tcGlsZXIuZGF0YSwga2V5KVxuICAgICAgICAgICAgdmFyIHBhcmVudEtleSA9IGtleS5zbGljZSgwLCBrZXkubGFzdEluZGV4T2YoJy4nKSlcbiAgICAgICAgICAgIGlmICghYmluZGluZ3NbcGFyZW50S2V5XSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBuZXN0ZWQgdmFsdWUgYmluZGluZywgYnV0IHRoZSBiaW5kaW5nIGZvciBpdHMgcGFyZW50XG4gICAgICAgICAgICAgICAgLy8gaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0LiBXZSBiZXR0ZXIgY3JlYXRlIHRoYXQgb25lIHRvby5cbiAgICAgICAgICAgICAgICBjb21waWxlci5jcmVhdGVCaW5kaW5nKHBhcmVudEtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ1xufVxuXG4vKipcbiAqICBEZWZpbmUgdGhlIGdldHRlci9zZXR0ZXIgdG8gcHJveHkgYSByb290LWxldmVsXG4gKiAgZGF0YSBwcm9wZXJ0eSBvbiB0aGUgVk1cbiAqL1xuQ29tcGlsZXJQcm90by5kZWZpbmVEYXRhUHJvcCA9IGZ1bmN0aW9uIChrZXksIGJpbmRpbmcpIHtcbiAgICB2YXIgY29tcGlsZXIgPSB0aGlzLFxuICAgICAgICBkYXRhICAgICA9IGNvbXBpbGVyLmRhdGEsXG4gICAgICAgIG9iICAgICAgID0gZGF0YS5fX2VtaXR0ZXJfX1xuXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBrZXkgaXMgcHJlc2VudCBpbiBkYXRhXG4gICAgLy8gc28gaXQgY2FuIGJlIG9ic2VydmVkXG4gICAgaWYgKCEoaGFzT3duLmNhbGwoZGF0YSwga2V5KSkpIHtcbiAgICAgICAgZGF0YVtrZXldID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIGRhdGEgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQsIGJ1dCB0aGUga2V5XG4gICAgLy8gaXMgbm90IG9ic2VydmVkLCB3ZSBuZWVkIHRvIGFkZCBpdCB0byB0aGUgb2JzZXJ2ZWQga2V5cy5cbiAgICBpZiAob2IgJiYgIShoYXNPd24uY2FsbChvYi52YWx1ZXMsIGtleSkpKSB7XG4gICAgICAgIE9ic2VydmVyLmNvbnZlcnRLZXkoZGF0YSwga2V5KVxuICAgIH1cblxuICAgIGJpbmRpbmcudmFsdWUgPSBkYXRhW2tleV1cblxuICAgIGRlZihjb21waWxlci52bSwga2V5LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVyLmRhdGFba2V5XVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIGNvbXBpbGVyLmRhdGFba2V5XSA9IHZhbFxuICAgICAgICB9XG4gICAgfSlcbn1cblxuLyoqXG4gKiAgRGVmaW5lIGEgdm0gcHJvcGVydHksIGUuZy4gJGluZGV4LCAka2V5LCBvciBtaXhpbiBtZXRob2RzXG4gKiAgd2hpY2ggYXJlIGJpbmRhYmxlIGJ1dCBvbmx5IGFjY2Vzc2libGUgb24gdGhlIFZNLFxuICogIG5vdCBpbiB0aGUgZGF0YS5cbiAqL1xuQ29tcGlsZXJQcm90by5kZWZpbmVWbVByb3AgPSBmdW5jdGlvbiAoa2V5LCBiaW5kaW5nLCB2YWx1ZSkge1xuICAgIHZhciBvYiA9IHRoaXMub2JzZXJ2ZXJcbiAgICBiaW5kaW5nLnZhbHVlID0gdmFsdWVcbiAgICBkZWYodGhpcy52bSwga2V5LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKE9ic2VydmVyLnNob3VsZEdldCkgb2IuZW1pdCgnZ2V0Jywga2V5KVxuICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmcudmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBvYi5lbWl0KCdzZXQnLCBrZXksIHZhbClcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbi8qKlxuICogIERlZmluZSBhbiBleHByZXNzaW9uIGJpbmRpbmcsIHdoaWNoIGlzIGVzc2VudGlhbGx5XG4gKiAgYW4gYW5vbnltb3VzIGNvbXB1dGVkIHByb3BlcnR5XG4gKi9cbkNvbXBpbGVyUHJvdG8uZGVmaW5lRXhwID0gZnVuY3Rpb24gKGtleSwgYmluZGluZywgZGlyZWN0aXZlKSB7XG4gICAgdmFyIGNvbXB1dGVkS2V5ID0gZGlyZWN0aXZlICYmIGRpcmVjdGl2ZS5jb21wdXRlZEtleSxcbiAgICAgICAgZXhwICAgICAgICAgPSBjb21wdXRlZEtleSA/IGRpcmVjdGl2ZS5leHByZXNzaW9uIDoga2V5LFxuICAgICAgICBnZXR0ZXIgICAgICA9IHRoaXMuZXhwQ2FjaGVbZXhwXVxuICAgIGlmICghZ2V0dGVyKSB7XG4gICAgICAgIGdldHRlciA9IHRoaXMuZXhwQ2FjaGVbZXhwXSA9IEV4cFBhcnNlci5wYXJzZShjb21wdXRlZEtleSB8fCBrZXksIHRoaXMpXG4gICAgfVxuICAgIGlmIChnZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5tYXJrQ29tcHV0ZWQoYmluZGluZywgZ2V0dGVyKVxuICAgIH1cbn1cblxuLyoqXG4gKiAgRGVmaW5lIGEgY29tcHV0ZWQgcHJvcGVydHkgb24gdGhlIFZNXG4gKi9cbkNvbXBpbGVyUHJvdG8uZGVmaW5lQ29tcHV0ZWQgPSBmdW5jdGlvbiAoa2V5LCBiaW5kaW5nLCB2YWx1ZSkge1xuICAgIHRoaXMubWFya0NvbXB1dGVkKGJpbmRpbmcsIHZhbHVlKVxuICAgIGRlZih0aGlzLnZtLCBrZXksIHtcbiAgICAgICAgZ2V0OiBiaW5kaW5nLnZhbHVlLiRnZXQsXG4gICAgICAgIHNldDogYmluZGluZy52YWx1ZS4kc2V0XG4gICAgfSlcbn1cblxuLyoqXG4gKiAgUHJvY2VzcyBhIGNvbXB1dGVkIHByb3BlcnR5IGJpbmRpbmdcbiAqICBzbyBpdHMgZ2V0dGVyL3NldHRlciBhcmUgYm91bmQgdG8gcHJvcGVyIGNvbnRleHRcbiAqL1xuQ29tcGlsZXJQcm90by5tYXJrQ29tcHV0ZWQgPSBmdW5jdGlvbiAoYmluZGluZywgdmFsdWUpIHtcbiAgICBiaW5kaW5nLmlzQ29tcHV0ZWQgPSB0cnVlXG4gICAgLy8gYmluZCB0aGUgYWNjZXNzb3JzIHRvIHRoZSB2bVxuICAgIGlmIChiaW5kaW5nLmlzRm4pIHtcbiAgICAgICAgYmluZGluZy52YWx1ZSA9IHZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsdWUgPSB7ICRnZXQ6IHZhbHVlIH1cbiAgICAgICAgfVxuICAgICAgICBiaW5kaW5nLnZhbHVlID0ge1xuICAgICAgICAgICAgJGdldDogdXRpbHMuYmluZCh2YWx1ZS4kZ2V0LCB0aGlzLnZtKSxcbiAgICAgICAgICAgICRzZXQ6IHZhbHVlLiRzZXRcbiAgICAgICAgICAgICAgICA/IHV0aWxzLmJpbmQodmFsdWUuJHNldCwgdGhpcy52bSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGtlZXAgdHJhY2sgZm9yIGRlcCBwYXJzaW5nIGxhdGVyXG4gICAgdGhpcy5jb21wdXRlZC5wdXNoKGJpbmRpbmcpXG59XG5cbi8qKlxuICogIFJldHJpdmUgYW4gb3B0aW9uIGZyb20gdGhlIGNvbXBpbGVyXG4gKi9cbkNvbXBpbGVyUHJvdG8uZ2V0T3B0aW9uID0gZnVuY3Rpb24gKHR5cGUsIGlkLCBzaWxlbnQpIHtcbiAgICB2YXIgb3B0cyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gdGhpcy5wYXJlbnQsXG4gICAgICAgIGdsb2JhbEFzc2V0cyA9IGNvbmZpZy5nbG9iYWxBc3NldHMsXG4gICAgICAgIHJlcyA9IChvcHRzW3R5cGVdICYmIG9wdHNbdHlwZV1baWRdKSB8fCAoXG4gICAgICAgICAgICBwYXJlbnRcbiAgICAgICAgICAgICAgICA/IHBhcmVudC5nZXRPcHRpb24odHlwZSwgaWQsIHNpbGVudClcbiAgICAgICAgICAgICAgICA6IGdsb2JhbEFzc2V0c1t0eXBlXSAmJiBnbG9iYWxBc3NldHNbdHlwZV1baWRdXG4gICAgICAgIClcbiAgICBpZiAoIXJlcyAmJiAhc2lsZW50ICYmIHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXRpbHMud2FybignVW5rbm93biAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQpXG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiAgRW1pdCBsaWZlY3ljbGUgZXZlbnRzIHRvIHRyaWdnZXIgaG9va3NcbiAqL1xuQ29tcGlsZXJQcm90by5leGVjSG9vayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50ID0gJ2hvb2s6JyArIGV2ZW50XG4gICAgdGhpcy5vYnNlcnZlci5lbWl0KGV2ZW50KVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KGV2ZW50KVxufVxuXG4vKipcbiAqICBDaGVjayBpZiBhIGNvbXBpbGVyJ3MgZGF0YSBjb250YWlucyBhIGtleXBhdGhcbiAqL1xuQ29tcGlsZXJQcm90by5oYXNLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGJhc2VLZXkgPSB1dGlscy5iYXNlS2V5KGtleSlcbiAgICByZXR1cm4gaGFzT3duLmNhbGwodGhpcy5kYXRhLCBiYXNlS2V5KSB8fFxuICAgICAgICBoYXNPd24uY2FsbCh0aGlzLnZtLCBiYXNlS2V5KVxufVxuXG4vKipcbiAqICBEbyBhIG9uZS10aW1lIGV2YWwgb2YgYSBzdHJpbmcgdGhhdCBwb3RlbnRpYWxseVxuICogIGluY2x1ZGVzIGJpbmRpbmdzLiBJdCBhY2NlcHRzIGFkZGl0aW9uYWwgcmF3IGRhdGFcbiAqICBiZWNhdXNlIHdlIG5lZWQgdG8gZHluYW1pY2FsbHkgcmVzb2x2ZSB2LWNvbXBvbmVudFxuICogIGJlZm9yZSBhIGNoaWxkVk0gaXMgZXZlbiBjb21waWxlZC4uLlxuICovXG5Db21waWxlclByb3RvLmV2YWwgPSBmdW5jdGlvbiAoZXhwLCBkYXRhKSB7XG4gICAgdmFyIHBhcnNlZCA9IFRleHRQYXJzZXIucGFyc2VBdHRyKGV4cClcbiAgICByZXR1cm4gcGFyc2VkXG4gICAgICAgID8gRXhwUGFyc2VyLmV2YWwocGFyc2VkLCB0aGlzLCBkYXRhKVxuICAgICAgICA6IGV4cFxufVxuXG4vKipcbiAqICBSZXNvbHZlIGEgQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZvciBhbiBlbGVtZW50XG4gKiAgd2l0aCB0aGUgZGF0YSB0byBiZSB1c2VkXG4gKi9cbkNvbXBpbGVyUHJvdG8ucmVzb2x2ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChub2RlLCBkYXRhLCB0ZXN0KSB7XG5cbiAgICAvLyBsYXRlIHJlcXVpcmUgdG8gYXZvaWQgY2lyY3VsYXIgZGVwc1xuICAgIFZpZXdNb2RlbCA9IFZpZXdNb2RlbCB8fCByZXF1aXJlKCcuL3ZpZXdtb2RlbCcpXG5cbiAgICB2YXIgZXhwICAgICA9IHV0aWxzLmF0dHIobm9kZSwgJ2NvbXBvbmVudCcpLFxuICAgICAgICB0YWdOYW1lID0gbm9kZS50YWdOYW1lLFxuICAgICAgICBpZCAgICAgID0gdGhpcy5ldmFsKGV4cCwgZGF0YSksXG4gICAgICAgIHRhZ0lkICAgPSAodGFnTmFtZS5pbmRleE9mKCctJykgPiAwICYmIHRhZ05hbWUudG9Mb3dlckNhc2UoKSksXG4gICAgICAgIEN0b3IgICAgPSB0aGlzLmdldE9wdGlvbignY29tcG9uZW50cycsIGlkIHx8IHRhZ0lkLCB0cnVlKVxuXG4gICAgaWYgKGlkICYmICFDdG9yKSB7XG4gICAgICAgIHV0aWxzLndhcm4oJ1Vua25vd24gY29tcG9uZW50OiAnICsgaWQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRlc3RcbiAgICAgICAgPyBleHAgPT09ICcnXG4gICAgICAgICAgICA/IFZpZXdNb2RlbFxuICAgICAgICAgICAgOiBDdG9yXG4gICAgICAgIDogQ3RvciB8fCBWaWV3TW9kZWxcbn1cblxuLyoqXG4gKiAgVW5iaW5kIGFuZCByZW1vdmUgZWxlbWVudFxuICovXG5Db21waWxlclByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiAobm9SZW1vdmUpIHtcblxuICAgIC8vIGF2b2lkIGJlaW5nIGNhbGxlZCBtb3JlIHRoYW4gb25jZVxuICAgIC8vIHRoaXMgaXMgaXJyZXZlcnNpYmxlIVxuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG5cbiAgICB2YXIgY29tcGlsZXIgPSB0aGlzLFxuICAgICAgICBpLCBqLCBrZXksIGRpciwgZGlycywgYmluZGluZyxcbiAgICAgICAgdm0gICAgICAgICAgPSBjb21waWxlci52bSxcbiAgICAgICAgZWwgICAgICAgICAgPSBjb21waWxlci5lbCxcbiAgICAgICAgZGlyZWN0aXZlcyAgPSBjb21waWxlci5kaXJzLFxuICAgICAgICBjb21wdXRlZCAgICA9IGNvbXBpbGVyLmNvbXB1dGVkLFxuICAgICAgICBiaW5kaW5ncyAgICA9IGNvbXBpbGVyLmJpbmRpbmdzLFxuICAgICAgICBjaGlsZHJlbiAgICA9IGNvbXBpbGVyLmNoaWxkcmVuLFxuICAgICAgICBwYXJlbnQgICAgICA9IGNvbXBpbGVyLnBhcmVudFxuXG4gICAgY29tcGlsZXIuZXhlY0hvb2soJ2JlZm9yZURlc3Ryb3knKVxuXG4gICAgLy8gdW5vYnNlcnZlIGRhdGFcbiAgICBPYnNlcnZlci51bm9ic2VydmUoY29tcGlsZXIuZGF0YSwgJycsIGNvbXBpbGVyLm9ic2VydmVyKVxuXG4gICAgLy8gZGVzdHJveSBhbGwgY2hpbGRyZW5cbiAgICAvLyBkbyBub3QgcmVtb3ZlIHRoZWlyIGVsZW1lbnRzIHNpbmNlIHRoZSBwYXJlbnRcbiAgICAvLyBtYXkgaGF2ZSB0cmFuc2l0aW9ucyBhbmQgdGhlIGNoaWxkcmVuIG1heSBub3RcbiAgICBpID0gY2hpbGRyZW4ubGVuZ3RoXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjaGlsZHJlbltpXS5kZXN0cm95KHRydWUpXG4gICAgfVxuXG4gICAgLy8gdW5iaW5kIGFsbCBkaXJlY2l0dmVzXG4gICAgaSA9IGRpcmVjdGl2ZXMubGVuZ3RoXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBkaXIgPSBkaXJlY3RpdmVzW2ldXG4gICAgICAgIC8vIGlmIHRoaXMgZGlyZWN0aXZlIGlzIGFuIGluc3RhbmNlIG9mIGFuIGV4dGVybmFsIGJpbmRpbmdcbiAgICAgICAgLy8gZS5nLiBhIGRpcmVjdGl2ZSB0aGF0IHJlZmVycyB0byBhIHZhcmlhYmxlIG9uIHRoZSBwYXJlbnQgVk1cbiAgICAgICAgLy8gd2UgbmVlZCB0byByZW1vdmUgaXQgZnJvbSB0aGF0IGJpbmRpbmcncyBkaXJlY3RpdmVzXG4gICAgICAgIC8vICogZW1wdHkgYW5kIGxpdGVyYWwgYmluZGluZ3MgZG8gbm90IGhhdmUgYmluZGluZy5cbiAgICAgICAgaWYgKGRpci5iaW5kaW5nICYmIGRpci5iaW5kaW5nLmNvbXBpbGVyICE9PSBjb21waWxlcikge1xuICAgICAgICAgICAgZGlycyA9IGRpci5iaW5kaW5nLmRpcnNcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICAgICAgaiA9IGRpcnMuaW5kZXhPZihkaXIpXG4gICAgICAgICAgICAgICAgaWYgKGogPiAtMSkgZGlycy5zcGxpY2UoaiwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkaXIuJHVuYmluZCgpXG4gICAgfVxuXG4gICAgLy8gdW5iaW5kIGFsbCBjb21wdXRlZCwgYW5vbnltb3VzIGJpbmRpbmdzXG4gICAgaSA9IGNvbXB1dGVkLmxlbmd0aFxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcHV0ZWRbaV0udW5iaW5kKClcbiAgICB9XG5cbiAgICAvLyB1bmJpbmQgYWxsIGtleXBhdGggYmluZGluZ3NcbiAgICBmb3IgKGtleSBpbiBiaW5kaW5ncykge1xuICAgICAgICBiaW5kaW5nID0gYmluZGluZ3Nba2V5XVxuICAgICAgICBpZiAoYmluZGluZykge1xuICAgICAgICAgICAgYmluZGluZy51bmJpbmQoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGogPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihjb21waWxlcilcbiAgICAgICAgaWYgKGogPiAtMSkgcGFyZW50LmNoaWxkcmVuLnNwbGljZShqLCAxKVxuICAgIH1cblxuICAgIC8vIGZpbmFsbHkgcmVtb3ZlIGRvbSBlbGVtZW50XG4gICAgaWYgKCFub1JlbW92ZSkge1xuICAgICAgICBpZiAoZWwgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICcnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2bS4kcmVtb3ZlKClcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbC52dWVfdm0gPSBudWxsXG5cbiAgICBjb21waWxlci5kZXN0cm95ZWQgPSB0cnVlXG4gICAgLy8gZW1pdCBkZXN0cm95IGhvb2tcbiAgICBjb21waWxlci5leGVjSG9vaygnYWZ0ZXJEZXN0cm95JylcblxuICAgIC8vIGZpbmFsbHksIHVucmVnaXN0ZXIgYWxsIGxpc3RlbmVyc1xuICAgIGNvbXBpbGVyLm9ic2VydmVyLm9mZigpXG4gICAgY29tcGlsZXIuZW1pdHRlci5vZmYoKVxufVxuXG4vLyBIZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogIHNob3J0aGFuZCBmb3IgZ2V0dGluZyByb290IGNvbXBpbGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3QgKGNvbXBpbGVyKSB7XG4gICAgd2hpbGUgKGNvbXBpbGVyLnBhcmVudCkge1xuICAgICAgICBjb21waWxlciA9IGNvbXBpbGVyLnBhcmVudFxuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZXJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21waWxlciIsInZhciBUZXh0UGFyc2VyID0gcmVxdWlyZSgnLi90ZXh0LXBhcnNlcicpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHByZWZpeCAgICAgICAgIDogJ3YnLFxuICAgIGRlYnVnICAgICAgICAgIDogZmFsc2UsXG4gICAgc2lsZW50ICAgICAgICAgOiBmYWxzZSxcbiAgICBlbnRlckNsYXNzICAgICA6ICd2LWVudGVyJyxcbiAgICBsZWF2ZUNsYXNzICAgICA6ICd2LWxlYXZlJyxcbiAgICBpbnRlcnBvbGF0ZSAgICA6IHRydWVcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnZGVsaW1pdGVycycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRQYXJzZXIuZGVsaW1pdGVyc1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGVsaW1pdGVycykge1xuICAgICAgICBUZXh0UGFyc2VyLnNldERlbGltaXRlcnMoZGVsaW1pdGVycylcbiAgICB9XG59KSIsInZhciBFbWl0dGVyICA9IHJlcXVpcmUoJy4vZW1pdHRlcicpLFxuICAgIHV0aWxzICAgID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIE9ic2VydmVyID0gcmVxdWlyZSgnLi9vYnNlcnZlcicpLFxuICAgIGNhdGNoZXIgID0gbmV3IEVtaXR0ZXIoKVxuXG4vKipcbiAqICBBdXRvLWV4dHJhY3QgdGhlIGRlcGVuZGVuY2llcyBvZiBhIGNvbXB1dGVkIHByb3BlcnR5XG4gKiAgYnkgcmVjb3JkaW5nIHRoZSBnZXR0ZXJzIHRyaWdnZXJlZCB3aGVuIGV2YWx1YXRpbmcgaXQuXG4gKi9cbmZ1bmN0aW9uIGNhdGNoRGVwcyAoYmluZGluZykge1xuICAgIGlmIChiaW5kaW5nLmlzRm4pIHJldHVyblxuICAgIHV0aWxzLmxvZygnXFxuLSAnICsgYmluZGluZy5rZXkpXG4gICAgdmFyIGdvdCA9IHV0aWxzLmhhc2goKVxuICAgIGJpbmRpbmcuZGVwcyA9IFtdXG4gICAgY2F0Y2hlci5vbignZ2V0JywgZnVuY3Rpb24gKGRlcCkge1xuICAgICAgICB2YXIgaGFzID0gZ290W2RlcC5rZXldXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIGF2b2lkIGR1cGxpY2F0ZSBiaW5kaW5nc1xuICAgICAgICAgICAgKGhhcyAmJiBoYXMuY29tcGlsZXIgPT09IGRlcC5jb21waWxlcikgfHxcbiAgICAgICAgICAgIC8vIGF2b2lkIHJlcGVhdGVkIGl0ZW1zIGFzIGRlcGVuZGVuY3lcbiAgICAgICAgICAgIC8vIG9ubHkgd2hlbiB0aGUgYmluZGluZyBpcyBmcm9tIHNlbGYgb3IgdGhlIHBhcmVudCBjaGFpblxuICAgICAgICAgICAgKGRlcC5jb21waWxlci5yZXBlYXQgJiYgIWlzUGFyZW50T2YoZGVwLmNvbXBpbGVyLCBiaW5kaW5nLmNvbXBpbGVyKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBnb3RbZGVwLmtleV0gPSBkZXBcbiAgICAgICAgdXRpbHMubG9nKCcgIC0gJyArIGRlcC5rZXkpXG4gICAgICAgIGJpbmRpbmcuZGVwcy5wdXNoKGRlcClcbiAgICAgICAgZGVwLnN1YnMucHVzaChiaW5kaW5nKVxuICAgIH0pXG4gICAgYmluZGluZy52YWx1ZS4kZ2V0KClcbiAgICBjYXRjaGVyLm9mZignZ2V0Jylcbn1cblxuLyoqXG4gKiAgVGVzdCBpZiBBIGlzIGEgcGFyZW50IG9mIG9yIGVxdWFscyBCXG4gKi9cbmZ1bmN0aW9uIGlzUGFyZW50T2YgKGEsIGIpIHtcbiAgICB3aGlsZSAoYikge1xuICAgICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICBiID0gYi5wYXJlbnRcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogIHRoZSBvYnNlcnZlciB0aGF0IGNhdGNoZXMgZXZlbnRzIHRyaWdnZXJlZCBieSBnZXR0ZXJzXG4gICAgICovXG4gICAgY2F0Y2hlcjogY2F0Y2hlcixcblxuICAgIC8qKlxuICAgICAqICBwYXJzZSBhIGxpc3Qgb2YgY29tcHV0ZWQgcHJvcGVydHkgYmluZGluZ3NcbiAgICAgKi9cbiAgICBwYXJzZTogZnVuY3Rpb24gKGJpbmRpbmdzKSB7XG4gICAgICAgIHV0aWxzLmxvZygnXFxucGFyc2luZyBkZXBlbmRlbmNpZXMuLi4nKVxuICAgICAgICBPYnNlcnZlci5zaG91bGRHZXQgPSB0cnVlXG4gICAgICAgIGJpbmRpbmdzLmZvckVhY2goY2F0Y2hEZXBzKVxuICAgICAgICBPYnNlcnZlci5zaG91bGRHZXQgPSBmYWxzZVxuICAgICAgICB1dGlscy5sb2coJ1xcbmRvbmUuJylcbiAgICB9XG4gICAgXG59IiwidmFyIGRpcklkICAgICAgICAgICA9IDEsXG4gICAgQVJHX1JFICAgICAgICAgID0gL15bXFx3XFwkLV0rJC8sXG4gICAgRklMVEVSX1RPS0VOX1JFID0gL1teXFxzJ1wiXSt8J1teJ10rJ3xcIlteXCJdK1wiL2csXG4gICAgTkVTVElOR19SRSAgICAgID0gL15cXCQocGFyZW50fHJvb3QpXFwuLyxcbiAgICBTSU5HTEVfVkFSX1JFICAgPSAvXltcXHdcXC4kXSskLyxcbiAgICBRVU9URV9SRSAgICAgICAgPSAvXCIvZyxcbiAgICBUZXh0UGFyc2VyICAgICAgPSByZXF1aXJlKCcuL3RleHQtcGFyc2VyJylcblxuLyoqXG4gKiAgRGlyZWN0aXZlIGNsYXNzXG4gKiAgcmVwcmVzZW50cyBhIHNpbmdsZSBkaXJlY3RpdmUgaW5zdGFuY2UgaW4gdGhlIERPTVxuICovXG5mdW5jdGlvbiBEaXJlY3RpdmUgKG5hbWUsIGFzdCwgZGVmaW5pdGlvbiwgY29tcGlsZXIsIGVsKSB7XG5cbiAgICB0aGlzLmlkICAgICAgICAgICAgID0gZGlySWQrK1xuICAgIHRoaXMubmFtZSAgICAgICAgICAgPSBuYW1lXG4gICAgdGhpcy5jb21waWxlciAgICAgICA9IGNvbXBpbGVyXG4gICAgdGhpcy52bSAgICAgICAgICAgICA9IGNvbXBpbGVyLnZtXG4gICAgdGhpcy5lbCAgICAgICAgICAgICA9IGVsXG4gICAgdGhpcy5jb21wdXRlRmlsdGVycyA9IGZhbHNlXG4gICAgdGhpcy5rZXkgICAgICAgICAgICA9IGFzdC5rZXlcbiAgICB0aGlzLmFyZyAgICAgICAgICAgID0gYXN0LmFyZ1xuICAgIHRoaXMuZXhwcmVzc2lvbiAgICAgPSBhc3QuZXhwcmVzc2lvblxuXG4gICAgdmFyIGlzRW1wdHkgPSB0aGlzLmV4cHJlc3Npb24gPT09ICcnXG5cbiAgICAvLyBtaXggaW4gcHJvcGVydGllcyBmcm9tIHRoZSBkaXJlY3RpdmUgZGVmaW5pdGlvblxuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2lzRW1wdHkgPyAnYmluZCcgOiAndXBkYXRlJ10gPSBkZWZpbml0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICB0aGlzW3Byb3BdID0gZGVmaW5pdGlvbltwcm9wXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZW1wdHkgZXhwcmVzc2lvbiwgd2UncmUgZG9uZS5cbiAgICBpZiAoaXNFbXB0eSB8fCB0aGlzLmlzRW1wdHkpIHtcbiAgICAgICAgdGhpcy5pc0VtcHR5ID0gdHJ1ZVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoVGV4dFBhcnNlci5SZWdleC50ZXN0KHRoaXMua2V5KSkge1xuICAgICAgICB0aGlzLmtleSA9IGNvbXBpbGVyLmV2YWwodGhpcy5rZXkpXG4gICAgICAgIGlmICh0aGlzLmlzTGl0ZXJhbCkge1xuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gdGhpcy5rZXlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmaWx0ZXJzID0gYXN0LmZpbHRlcnMsXG4gICAgICAgIGZpbHRlciwgZm4sIGksIGwsIGNvbXB1dGVkXG4gICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gW11cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXJzW2ldXG4gICAgICAgICAgICBmbiA9IHRoaXMuY29tcGlsZXIuZ2V0T3B0aW9uKCdmaWx0ZXJzJywgZmlsdGVyLm5hbWUpXG4gICAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIuYXBwbHkgPSBmblxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVycy5wdXNoKGZpbHRlcilcbiAgICAgICAgICAgICAgICBpZiAoZm4uY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZpbHRlcnMgfHwgIXRoaXMuZmlsdGVycy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChjb21wdXRlZCkge1xuICAgICAgICB0aGlzLmNvbXB1dGVkS2V5ID0gRGlyZWN0aXZlLmlubGluZUZpbHRlcnModGhpcy5rZXksIHRoaXMuZmlsdGVycylcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gbnVsbFxuICAgIH1cblxuICAgIHRoaXMuaXNFeHAgPVxuICAgICAgICBjb21wdXRlZCB8fFxuICAgICAgICAhU0lOR0xFX1ZBUl9SRS50ZXN0KHRoaXMua2V5KSB8fFxuICAgICAgICBORVNUSU5HX1JFLnRlc3QodGhpcy5rZXkpXG5cbn1cblxudmFyIERpclByb3RvID0gRGlyZWN0aXZlLnByb3RvdHlwZVxuXG4vKipcbiAqICBjYWxsZWQgd2hlbiBhIG5ldyB2YWx1ZSBpcyBzZXQgXG4gKiAgZm9yIGNvbXB1dGVkIHByb3BlcnRpZXMsIHRoaXMgd2lsbCBvbmx5IGJlIGNhbGxlZCBvbmNlXG4gKiAgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxuICovXG5EaXJQcm90by4kdXBkYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBpbml0KSB7XG4gICAgaWYgKHRoaXMuJGxvY2spIHJldHVyblxuICAgIGlmIChpbml0IHx8IHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8ICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcnMgJiYgIXRoaXMuY29tcHV0ZUZpbHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLiRhcHBseUZpbHRlcnModmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWUsXG4gICAgICAgICAgICAgICAgaW5pdFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqICBwaXBlIHRoZSB2YWx1ZSB0aHJvdWdoIGZpbHRlcnNcbiAqL1xuRGlyUHJvdG8uJGFwcGx5RmlsdGVycyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBmaWx0ZXJlZCA9IHZhbHVlLCBmaWx0ZXJcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgZmlsdGVyID0gdGhpcy5maWx0ZXJzW2ldXG4gICAgICAgIGZpbHRlcmVkID0gZmlsdGVyLmFwcGx5LmFwcGx5KHRoaXMudm0sIFtmaWx0ZXJlZF0uY29uY2F0KGZpbHRlci5hcmdzKSlcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkXG59XG5cbi8qKlxuICogIFVuYmluZCBkaXJldGl2ZVxuICovXG5EaXJQcm90by4kdW5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHRoaXMgY2FuIGJlIGNhbGxlZCBiZWZvcmUgdGhlIGVsIGlzIGV2ZW4gYXNzaWduZWQuLi5cbiAgICBpZiAoIXRoaXMuZWwgfHwgIXRoaXMudm0pIHJldHVyblxuICAgIGlmICh0aGlzLnVuYmluZCkgdGhpcy51bmJpbmQoKVxuICAgIHRoaXMudm0gPSB0aGlzLmVsID0gdGhpcy5iaW5kaW5nID0gdGhpcy5jb21waWxlciA9IG51bGxcbn1cblxuLy8gRXhwb3NlZCBzdGF0aWMgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqICBQYXJzZSBhIGRpcmVjdGl2ZSBzdHJpbmcgaW50byBhbiBBcnJheSBvZlxuICogIEFTVC1saWtlIG9iamVjdHMgcmVwcmVzZW50aW5nIGRpcmVjdGl2ZXNcbiAqL1xuRGlyZWN0aXZlLnBhcnNlID0gZnVuY3Rpb24gKHN0cikge1xuXG4gICAgdmFyIGluU2luZ2xlID0gZmFsc2UsXG4gICAgICAgIGluRG91YmxlID0gZmFsc2UsXG4gICAgICAgIGN1cmx5ICAgID0gMCxcbiAgICAgICAgc3F1YXJlICAgPSAwLFxuICAgICAgICBwYXJlbiAgICA9IDAsXG4gICAgICAgIGJlZ2luICAgID0gMCxcbiAgICAgICAgYXJnSW5kZXggPSAwLFxuICAgICAgICBkaXJzICAgICA9IFtdLFxuICAgICAgICBkaXIgICAgICA9IHt9LFxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSAwLFxuICAgICAgICBhcmdcblxuICAgIGZvciAodmFyIGMsIGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjID0gc3RyLmNoYXJBdChpKVxuICAgICAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIHNpbmdsZSBxdW90ZVxuICAgICAgICAgICAgaWYgKGMgPT09IFwiJ1wiKSBpblNpbmdsZSA9ICFpblNpbmdsZVxuICAgICAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICAgICAgICAvLyBjaGVjayBkb3VibGUgcXVvdGVcbiAgICAgICAgICAgIGlmIChjID09PSAnXCInKSBpbkRvdWJsZSA9ICFpbkRvdWJsZVxuICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcsJyAmJiAhcGFyZW4gJiYgIWN1cmx5ICYmICFzcXVhcmUpIHtcbiAgICAgICAgICAgIC8vIHJlYWNoZWQgdGhlIGVuZCBvZiBhIGRpcmVjdGl2ZVxuICAgICAgICAgICAgcHVzaERpcigpXG4gICAgICAgICAgICAvLyByZXNldCAmIHNraXAgdGhlIGNvbW1hXG4gICAgICAgICAgICBkaXIgPSB7fVxuICAgICAgICAgICAgYmVnaW4gPSBhcmdJbmRleCA9IGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxXG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJzonICYmICFkaXIua2V5ICYmICFkaXIuYXJnKSB7XG4gICAgICAgICAgICAvLyBhcmd1bWVudFxuICAgICAgICAgICAgYXJnID0gc3RyLnNsaWNlKGJlZ2luLCBpKS50cmltKClcbiAgICAgICAgICAgIGlmIChBUkdfUkUudGVzdChhcmcpKSB7XG4gICAgICAgICAgICAgICAgYXJnSW5kZXggPSBpICsgMVxuICAgICAgICAgICAgICAgIGRpci5hcmcgPSBhcmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjID09PSAnfCcgJiYgc3RyLmNoYXJBdChpICsgMSkgIT09ICd8JyAmJiBzdHIuY2hhckF0KGkgLSAxKSAhPT0gJ3wnKSB7XG4gICAgICAgICAgICBpZiAoZGlyLmtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2Yga2V5XG4gICAgICAgICAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDFcbiAgICAgICAgICAgICAgICBkaXIua2V5ID0gc3RyLnNsaWNlKGFyZ0luZGV4LCBpKS50cmltKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBoYXMgZmlsdGVyXG4gICAgICAgICAgICAgICAgcHVzaEZpbHRlcigpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgaW5Eb3VibGUgPSB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIGluU2luZ2xlID0gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcoJykge1xuICAgICAgICAgICAgcGFyZW4rK1xuICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcpJykge1xuICAgICAgICAgICAgcGFyZW4tLVxuICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICdbJykge1xuICAgICAgICAgICAgc3F1YXJlKytcbiAgICAgICAgfSBlbHNlIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIHNxdWFyZS0tXG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ3snKSB7XG4gICAgICAgICAgICBjdXJseSsrXG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ30nKSB7XG4gICAgICAgICAgICBjdXJseS0tXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgPT09IDAgfHwgYmVnaW4gIT09IGkpIHtcbiAgICAgICAgcHVzaERpcigpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVzaERpciAoKSB7XG4gICAgICAgIGRpci5leHByZXNzaW9uID0gc3RyLnNsaWNlKGJlZ2luLCBpKS50cmltKClcbiAgICAgICAgaWYgKGRpci5rZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGlyLmtleSA9IHN0ci5zbGljZShhcmdJbmRleCwgaSkudHJpbSgpXG4gICAgICAgIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSBiZWdpbikge1xuICAgICAgICAgICAgcHVzaEZpbHRlcigpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IDAgfHwgZGlyLmtleSkge1xuICAgICAgICAgICAgZGlycy5wdXNoKGRpcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgICAgICB2YXIgZXhwID0gc3RyLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpLFxuICAgICAgICAgICAgZmlsdGVyXG4gICAgICAgIGlmIChleHApIHtcbiAgICAgICAgICAgIGZpbHRlciA9IHt9XG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gZXhwLm1hdGNoKEZJTFRFUl9UT0tFTl9SRSlcbiAgICAgICAgICAgIGZpbHRlci5uYW1lID0gdG9rZW5zWzBdXG4gICAgICAgICAgICBmaWx0ZXIuYXJncyA9IHRva2Vucy5sZW5ndGggPiAxID8gdG9rZW5zLnNsaWNlKDEpIDogbnVsbFxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgICAgIChkaXIuZmlsdGVycyA9IGRpci5maWx0ZXJzIHx8IFtdKS5wdXNoKGZpbHRlcilcbiAgICAgICAgfVxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMVxuICAgIH1cblxuICAgIHJldHVybiBkaXJzXG59XG5cbi8qKlxuICogIElubGluZSBjb21wdXRlZCBmaWx0ZXJzIHNvIHRoZXkgYmVjb21lIHBhcnRcbiAqICBvZiB0aGUgZXhwcmVzc2lvblxuICovXG5EaXJlY3RpdmUuaW5saW5lRmlsdGVycyA9IGZ1bmN0aW9uIChrZXksIGZpbHRlcnMpIHtcbiAgICB2YXIgYXJncywgZmlsdGVyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBmaWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBmaWx0ZXIgPSBmaWx0ZXJzW2ldXG4gICAgICAgIGFyZ3MgPSBmaWx0ZXIuYXJnc1xuICAgICAgICAgICAgPyAnLFwiJyArIGZpbHRlci5hcmdzLm1hcChlc2NhcGVRdW90ZSkuam9pbignXCIsXCInKSArICdcIidcbiAgICAgICAgICAgIDogJydcbiAgICAgICAga2V5ID0gJ3RoaXMuJGNvbXBpbGVyLmdldE9wdGlvbihcImZpbHRlcnNcIiwgXCInICtcbiAgICAgICAgICAgICAgICBmaWx0ZXIubmFtZSArXG4gICAgICAgICAgICAnXCIpLmNhbGwodGhpcywnICtcbiAgICAgICAgICAgICAgICBrZXkgKyBhcmdzICtcbiAgICAgICAgICAgICcpJ1xuICAgIH1cbiAgICByZXR1cm4ga2V5XG59XG5cbi8qKlxuICogIENvbnZlcnQgZG91YmxlIHF1b3RlcyB0byBzaW5nbGUgcXVvdGVzXG4gKiAgc28gdGhleSBkb24ndCBtZXNzIHVwIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb24gYm9keVxuICovXG5mdW5jdGlvbiBlc2NhcGVRdW90ZSAodikge1xuICAgIHJldHVybiB2LmluZGV4T2YoJ1wiJykgPiAtMVxuICAgICAgICA/IHYucmVwbGFjZShRVU9URV9SRSwgJ1xcJycpXG4gICAgICAgIDogdlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERpcmVjdGl2ZSIsInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyksXG4gICAgc2xpY2UgPSBbXS5zbGljZVxuXG4vKipcbiAqICBCaW5kaW5nIGZvciBpbm5lckhUTUxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBiaW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGEgY29tbWVudCBub2RlIG1lYW5zIHRoaXMgaXMgYSBiaW5kaW5nIGZvclxuICAgICAgICAvLyB7e3sgaW5saW5lIHVuZXNjYXBlZCBodG1sIH19fVxuICAgICAgICBpZiAodGhpcy5lbC5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICAgICAgLy8gaG9sZCBub2Rlc1xuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IFtdXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB1dGlscy5ndWFyZCh2YWx1ZSlcbiAgICAgICAgaWYgKHRoaXMubm9kZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3dhcCh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzd2FwOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZWwucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIG5vZGVzICA9IHRoaXMubm9kZXMsXG4gICAgICAgICAgICBpICAgICAgPSBub2Rlcy5sZW5ndGhcbiAgICAgICAgLy8gcmVtb3ZlIG9sZCBub2Rlc1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobm9kZXNbaV0pXG4gICAgICAgIH1cbiAgICAgICAgLy8gY29udmVydCBuZXcgdmFsdWUgdG8gYSBmcmFnbWVudFxuICAgICAgICB2YXIgZnJhZyA9IHV0aWxzLnRvRnJhZ21lbnQodmFsdWUpXG4gICAgICAgIC8vIHNhdmUgYSByZWZlcmVuY2UgdG8gdGhlc2Ugbm9kZXMgc28gd2UgY2FuIHJlbW92ZSBsYXRlclxuICAgICAgICB0aGlzLm5vZGVzID0gc2xpY2UuY2FsbChmcmFnLmNoaWxkTm9kZXMpXG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZnJhZywgdGhpcy5lbClcbiAgICB9XG59IiwidmFyIHV0aWxzICAgID0gcmVxdWlyZSgnLi4vdXRpbHMnKVxuXG4vKipcbiAqICBNYW5hZ2VzIGEgY29uZGl0aW9uYWwgY2hpbGQgVk1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBiaW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnBhcmVudCA9IHRoaXMuZWwucGFyZW50Tm9kZVxuICAgICAgICB0aGlzLnJlZiAgICA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ3Z1ZS1pZicpXG4gICAgICAgIHRoaXMuQ3RvciAgID0gdGhpcy5jb21waWxlci5yZXNvbHZlQ29tcG9uZW50KHRoaXMuZWwpXG5cbiAgICAgICAgLy8gaW5zZXJ0IHJlZlxuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5yZWYsIHRoaXMuZWwpXG4gICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMuZWwpXG5cbiAgICAgICAgaWYgKHV0aWxzLmF0dHIodGhpcy5lbCwgJ3ZpZXcnKSkge1xuICAgICAgICAgICAgdXRpbHMud2FybihcbiAgICAgICAgICAgICAgICAnQ29uZmxpY3Q6IHYtaWYgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB2LXZpZXcuICcgK1xuICAgICAgICAgICAgICAgICdKdXN0IHNldCB2LXZpZXdcXCdzIGJpbmRpbmcgdmFsdWUgdG8gZW1wdHkgc3RyaW5nIHRvIGVtcHR5IGl0LidcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAodXRpbHMuYXR0cih0aGlzLmVsLCAncmVwZWF0JykpIHtcbiAgICAgICAgICAgIHV0aWxzLndhcm4oXG4gICAgICAgICAgICAgICAgJ0NvbmZsaWN0OiB2LWlmIGNhbm5vdCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdi1yZXBlYXQuICcgK1xuICAgICAgICAgICAgICAgICdVc2UgYHYtc2hvd2Agb3IgdGhlIGBmaWx0ZXJCeWAgZmlsdGVyIGluc3RlYWQuJ1xuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmQoKVxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNoaWxkVk0pIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRWTSA9IG5ldyB0aGlzLkN0b3Ioe1xuICAgICAgICAgICAgICAgIGVsOiB0aGlzLmVsLmNsb25lTm9kZSh0cnVlKSxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMudm1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAodGhpcy5jb21waWxlci5pbml0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuY2hpbGRWTS4kZWwsIHRoaXMucmVmKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkVk0uJGJlZm9yZSh0aGlzLnJlZilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9LFxuXG4gICAgdW5iaW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkVk0pIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRWTS4kZGVzdHJveSgpXG4gICAgICAgICAgICB0aGlzLmNoaWxkVk0gPSBudWxsXG4gICAgICAgIH1cbiAgICB9XG59IiwidmFyIHV0aWxzICAgICAgPSByZXF1aXJlKCcuLi91dGlscycpLFxuICAgIGNvbmZpZyAgICAgPSByZXF1aXJlKCcuLi9jb25maWcnKSxcbiAgICB0cmFuc2l0aW9uID0gcmVxdWlyZSgnLi4vdHJhbnNpdGlvbicpLFxuICAgIGRpcmVjdGl2ZXMgPSBtb2R1bGUuZXhwb3J0cyA9IHV0aWxzLmhhc2goKVxuXG4vKipcbiAqICBOZXN0IGFuZCBtYW5hZ2UgYSBDaGlsZCBWTVxuICovXG5kaXJlY3RpdmVzLmNvbXBvbmVudCA9IHtcbiAgICBpc0xpdGVyYWw6IHRydWUsXG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuZWwudnVlX3ZtKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkVk0gPSBuZXcgdGhpcy5DdG9yKHtcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5lbCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMudm1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHVuYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZFZNKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkVk0uJGRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqICBCaW5kaW5nIEhUTUwgYXR0cmlidXRlc1xuICovXG5kaXJlY3RpdmVzLmF0dHIgPSB7XG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy52bS4kb3B0aW9ucy5wYXJhbUF0dHJpYnV0ZXNcbiAgICAgICAgdGhpcy5pc1BhcmFtID0gcGFyYW1zICYmIHBhcmFtcy5pbmRleE9mKHRoaXMuYXJnKSA+IC0xXG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKHRoaXMuYXJnLCB2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKHRoaXMuYXJnKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzUGFyYW0pIHtcbiAgICAgICAgICAgIHRoaXMudm1bdGhpcy5hcmddID0gdXRpbHMuY2hlY2tOdW1iZXIodmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogIEJpbmRpbmcgdGV4dENvbnRlbnRcbiAqL1xuZGlyZWN0aXZlcy50ZXh0ID0ge1xuICAgIGJpbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hdHRyID0gdGhpcy5lbC5ub2RlVHlwZSA9PT0gM1xuICAgICAgICAgICAgPyAnbm9kZVZhbHVlJ1xuICAgICAgICAgICAgOiAndGV4dENvbnRlbnQnXG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmVsW3RoaXMuYXR0cl0gPSB1dGlscy5ndWFyZCh2YWx1ZSlcbiAgICB9XG59XG5cbi8qKlxuICogIEJpbmRpbmcgQ1NTIGRpc3BsYXkgcHJvcGVydHlcbiAqL1xuZGlyZWN0aXZlcy5zaG93ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgICAgdGFyZ2V0ID0gdmFsdWUgPyAnJyA6ICdub25lJyxcbiAgICAgICAgY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHRhcmdldFxuICAgICAgICB9XG4gICAgdHJhbnNpdGlvbihlbCwgdmFsdWUgPyAxIDogLTEsIGNoYW5nZSwgdGhpcy5jb21waWxlcilcbn1cblxuLyoqXG4gKiAgQmluZGluZyBDU1MgY2xhc3Nlc1xuICovXG5kaXJlY3RpdmVzWydjbGFzcyddID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuYXJnKSB7XG4gICAgICAgIHV0aWxzW3ZhbHVlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHRoaXMuZWwsIHRoaXMuYXJnKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RWYWwpIHtcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUNsYXNzKHRoaXMuZWwsIHRoaXMubGFzdFZhbClcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHV0aWxzLmFkZENsYXNzKHRoaXMuZWwsIHZhbHVlKVxuICAgICAgICAgICAgdGhpcy5sYXN0VmFsID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiAgT25seSByZW1vdmVkIGFmdGVyIHRoZSBvd25lciBWTSBpcyByZWFkeVxuICovXG5kaXJlY3RpdmVzLmNsb2FrID0ge1xuICAgIGlzRW1wdHk6IHRydWUsXG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsXG4gICAgICAgIHRoaXMuY29tcGlsZXIub2JzZXJ2ZXIub25jZSgnaG9vazpyZWFkeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShjb25maWcucHJlZml4ICsgJy1jbG9haycpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vKipcbiAqICBTdG9yZSBhIHJlZmVyZW5jZSB0byBzZWxmIGluIHBhcmVudCBWTSdzICRcbiAqL1xuZGlyZWN0aXZlcy5yZWYgPSB7XG4gICAgaXNMaXRlcmFsOiB0cnVlLFxuICAgIGJpbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5leHByZXNzaW9uXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgdGhpcy52bS4kcGFyZW50LiRbaWRdID0gdGhpcy52bVxuICAgICAgICB9XG4gICAgfSxcbiAgICB1bmJpbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5leHByZXNzaW9uXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudm0uJHBhcmVudC4kW2lkXVxuICAgICAgICB9XG4gICAgfVxufVxuXG5kaXJlY3RpdmVzLm9uICAgICAgPSByZXF1aXJlKCcuL29uJylcbmRpcmVjdGl2ZXMucmVwZWF0ICA9IHJlcXVpcmUoJy4vcmVwZWF0JylcbmRpcmVjdGl2ZXMubW9kZWwgICA9IHJlcXVpcmUoJy4vbW9kZWwnKVxuZGlyZWN0aXZlc1snaWYnXSAgID0gcmVxdWlyZSgnLi9pZicpXG5kaXJlY3RpdmVzWyd3aXRoJ10gPSByZXF1aXJlKCcuL3dpdGgnKVxuZGlyZWN0aXZlcy5odG1sICAgID0gcmVxdWlyZSgnLi9odG1sJylcbmRpcmVjdGl2ZXMuc3R5bGUgICA9IHJlcXVpcmUoJy4vc3R5bGUnKVxuZGlyZWN0aXZlcy5wYXJ0aWFsID0gcmVxdWlyZSgnLi9wYXJ0aWFsJylcbmRpcmVjdGl2ZXMudmlldyAgICA9IHJlcXVpcmUoJy4vdmlldycpIiwidmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKSxcbiAgICBpc0lFOSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRSA5LjAnKSA+IDAsXG4gICAgZmlsdGVyID0gW10uZmlsdGVyXG5cbi8qKlxuICogIFJldHVybnMgYW4gYXJyYXkgb2YgdmFsdWVzIGZyb20gYSBtdWx0aXBsZSBzZWxlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0TXVsdGlwbGVTZWxlY3RPcHRpb25zIChzZWxlY3QpIHtcbiAgICByZXR1cm4gZmlsdGVyXG4gICAgICAgIC5jYWxsKHNlbGVjdC5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLnNlbGVjdGVkXG4gICAgICAgIH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dFxuICAgICAgICB9KVxufVxuXG4vKipcbiAqICBUd28td2F5IGJpbmRpbmcgZm9yIGZvcm0gaW5wdXQgZWxlbWVudHNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBiaW5kOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgZWwgICA9IHNlbGYuZWwsXG4gICAgICAgICAgICB0eXBlID0gZWwudHlwZSxcbiAgICAgICAgICAgIHRhZyAgPSBlbC50YWdOYW1lXG5cbiAgICAgICAgc2VsZi5sb2NrID0gZmFsc2VcbiAgICAgICAgc2VsZi5vd25lclZNID0gc2VsZi5iaW5kaW5nLmNvbXBpbGVyLnZtXG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIHdoYXQgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAgICAgIHNlbGYuZXZlbnQgPVxuICAgICAgICAgICAgKHNlbGYuY29tcGlsZXIub3B0aW9ucy5sYXp5IHx8XG4gICAgICAgICAgICB0YWcgPT09ICdTRUxFQ1QnIHx8XG4gICAgICAgICAgICB0eXBlID09PSAnY2hlY2tib3gnIHx8IHR5cGUgPT09ICdyYWRpbycpXG4gICAgICAgICAgICAgICAgPyAnY2hhbmdlJ1xuICAgICAgICAgICAgICAgIDogJ2lucHV0J1xuXG4gICAgICAgIC8vIGRldGVybWluZSB0aGUgYXR0cmlidXRlIHRvIGNoYW5nZSB3aGVuIHVwZGF0aW5nXG4gICAgICAgIHNlbGYuYXR0ciA9IHR5cGUgPT09ICdjaGVja2JveCdcbiAgICAgICAgICAgID8gJ2NoZWNrZWQnXG4gICAgICAgICAgICA6ICh0YWcgPT09ICdJTlBVVCcgfHwgdGFnID09PSAnU0VMRUNUJyB8fCB0YWcgPT09ICdURVhUQVJFQScpXG4gICAgICAgICAgICAgICAgPyAndmFsdWUnXG4gICAgICAgICAgICAgICAgOiAnaW5uZXJIVE1MJ1xuXG4gICAgICAgIC8vIHNlbGVjdFttdWx0aXBsZV0gc3VwcG9ydFxuICAgICAgICBpZih0YWcgPT09ICdTRUxFQ1QnICYmIGVsLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgdGhpcy5tdWx0aSA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21wb3NpdGlvbkxvY2sgPSBmYWxzZVxuICAgICAgICBzZWxmLmNMb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tcG9zaXRpb25Mb2NrID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHNlbGYuY1VubG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbXBvc2l0aW9uTG9jayA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIHRoaXMuY0xvY2spXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5jVW5sb2NrKVxuXG4gICAgICAgIC8vIGF0dGFjaCBsaXN0ZW5lclxuICAgICAgICBzZWxmLnNldCA9IHNlbGYuZmlsdGVyc1xuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvc2l0aW9uTG9jaykgcmV0dXJuXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBkaXJlY3RpdmUgaGFzIGZpbHRlcnNcbiAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGxldCB0aGUgdm0uJHNldCB0cmlnZ2VyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlKCkgc28gZmlsdGVycyBhcmUgYXBwbGllZC5cbiAgICAgICAgICAgICAgICAvLyB0aGVyZWZvcmUgd2UgaGF2ZSB0byByZWNvcmQgY3Vyc29yIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gc28gdGhhdCBhZnRlciB2bS4kc2V0IGNoYW5nZXMgdGhlIGlucHV0XG4gICAgICAgICAgICAgICAgLy8gdmFsdWUgd2UgY2FuIHB1dCB0aGUgY3Vyc29yIGJhY2sgYXQgd2hlcmUgaXQgaXNcbiAgICAgICAgICAgICAgICB2YXIgY3Vyc29yUG9zXG4gICAgICAgICAgICAgICAgdHJ5IHsgY3Vyc29yUG9zID0gZWwuc2VsZWN0aW9uU3RhcnQgfSBjYXRjaCAoZSkge31cblxuICAgICAgICAgICAgICAgIHNlbGYuX3NldCgpXG5cbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB1cGRhdGVzIGFyZSBhc3luY1xuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVzZXQgY3Vyc29yIHBvc2l0aW9uIGFzeW5jIHRvb1xuICAgICAgICAgICAgICAgIHV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvclBvcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRTZWxlY3Rpb25SYW5nZShjdXJzb3JQb3MsIGN1cnNvclBvcylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9zaXRpb25Mb2NrKSByZXR1cm5cbiAgICAgICAgICAgICAgICAvLyBubyBmaWx0ZXJzLCBkb24ndCBsZXQgaXQgdHJpZ2dlciB1cGRhdGUoKVxuICAgICAgICAgICAgICAgIHNlbGYubG9jayA9IHRydWVcblxuICAgICAgICAgICAgICAgIHNlbGYuX3NldCgpXG5cbiAgICAgICAgICAgICAgICB1dGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9jayA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihzZWxmLmV2ZW50LCBzZWxmLnNldClcblxuICAgICAgICAvLyBmaXggc2hpdCBmb3IgSUU5XG4gICAgICAgIC8vIHNpbmNlIGl0IGRvZXNuJ3QgZmlyZSBpbnB1dCBvbiBiYWNrc3BhY2UgLyBkZWwgLyBjdXRcbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgICBzZWxmLm9uQ3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIGN1dCBldmVudCBmaXJlcyBiZWZvcmUgdGhlIHZhbHVlIGFjdHVhbGx5IGNoYW5nZXNcbiAgICAgICAgICAgICAgICB1dGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0KClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5vbkRlbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gNDYgfHwgZS5rZXlDb2RlID09PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjdXQnLCBzZWxmLm9uQ3V0KVxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBzZWxmLm9uRGVsKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vd25lclZNLiRzZXQoXG4gICAgICAgICAgICB0aGlzLmtleSwgdGhpcy5tdWx0aVxuICAgICAgICAgICAgICAgID8gZ2V0TXVsdGlwbGVTZWxlY3RPcHRpb25zKHRoaXMuZWwpXG4gICAgICAgICAgICAgICAgOiB0aGlzLmVsW3RoaXMuYXR0cl1cbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdCkge1xuICAgICAgICAvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuICAgICAgICAvLyBzeW5jIGJhY2sgaW5saW5lIHZhbHVlIGlmIGluaXRpYWwgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgKGluaXQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NldCgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubG9jaykgcmV0dXJuXG4gICAgICAgIHZhciBlbCA9IHRoaXMuZWxcbiAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7IC8vIHNlbGVjdCBkcm9wZG93blxuICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xXG4gICAgICAgICAgICBpZih0aGlzLm11bHRpICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCh0aGlzLnVwZGF0ZVNlbGVjdCwgdGhpcylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZWxlY3QodmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZWwudHlwZSA9PT0gJ3JhZGlvJykgeyAvLyByYWRpbyBidXR0b25cbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSB2YWx1ZSA9PSBlbC52YWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKGVsLnR5cGUgPT09ICdjaGVja2JveCcpIHsgLy8gY2hlY2tib3hcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSAhIXZhbHVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbFt0aGlzLmF0dHJdID0gdXRpbHMuZ3VhcmQodmFsdWUpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlU2VsZWN0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cbiAgICAgICAgLy8gc2V0dGluZyA8c2VsZWN0PidzIHZhbHVlIGluIElFOSBkb2Vzbid0IHdvcmtcbiAgICAgICAgLy8gd2UgaGF2ZSB0byBtYW51YWxseSBsb29wIHRocm91Z2ggdGhlIG9wdGlvbnNcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmVsLm9wdGlvbnMsXG4gICAgICAgICAgICBpID0gb3B0aW9ucy5sZW5ndGhcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnNbaV0udmFsdWUgPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5iaW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXMuZWxcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50LCB0aGlzLnNldClcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIHRoaXMuY0xvY2spXG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5jVW5sb2NrKVxuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2N1dCcsIHRoaXMub25DdXQpXG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25EZWwpXG4gICAgICAgIH1cbiAgICB9XG59IiwidmFyIHV0aWxzICAgID0gcmVxdWlyZSgnLi4vdXRpbHMnKVxuXG4vKipcbiAqICBCaW5kaW5nIGZvciBldmVudCBsaXN0ZW5lcnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBpc0ZuOiB0cnVlLFxuXG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmJpbmRpbmcuaXNFeHBcbiAgICAgICAgICAgID8gdGhpcy52bVxuICAgICAgICAgICAgOiB0aGlzLmJpbmRpbmcuY29tcGlsZXIudm1cbiAgICAgICAgaWYgKHRoaXMuZWwudGFnTmFtZSA9PT0gJ0lGUkFNRScgJiYgdGhpcy5hcmcgIT09ICdsb2FkJykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgICAgICB0aGlzLmlmcmFtZUJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5lbC5jb250ZW50V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoc2VsZi5hcmcsIHNlbGYuaGFuZGxlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuaWZyYW1lQmluZClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdXRpbHMud2FybignRGlyZWN0aXZlIFwidi1vbjonICsgdGhpcy5leHByZXNzaW9uICsgJ1wiIGV4cGVjdHMgYSBtZXRob2QuJylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzZXQoKVxuICAgICAgICB2YXIgdm0gPSB0aGlzLnZtLFxuICAgICAgICAgICAgY29udGV4dCA9IHRoaXMuY29udGV4dFxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS50YXJnZXRWTSA9IHZtXG4gICAgICAgICAgICBjb250ZXh0LiRldmVudCA9IGVcbiAgICAgICAgICAgIHZhciByZXMgPSBoYW5kbGVyLmNhbGwoY29udGV4dCwgZSlcbiAgICAgICAgICAgIGNvbnRleHQuJGV2ZW50ID0gbnVsbFxuICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlmcmFtZUJpbmQpIHtcbiAgICAgICAgICAgIHRoaXMuaWZyYW1lQmluZCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5hcmcsIHRoaXMuaGFuZGxlcilcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmlmcmFtZUJpbmRcbiAgICAgICAgICAgID8gdGhpcy5lbC5jb250ZW50V2luZG93XG4gICAgICAgICAgICA6IHRoaXMuZWxcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmFyZywgdGhpcy5oYW5kbGVyKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVuYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlc2V0KClcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5pZnJhbWVCaW5kKVxuICAgIH1cbn0iLCJ2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpXG5cbi8qKlxuICogIEJpbmRpbmcgZm9yIHBhcnRpYWxzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgaXNMaXRlcmFsOiB0cnVlLFxuXG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBpZCA9IHRoaXMuZXhwcmVzc2lvblxuICAgICAgICBpZiAoIWlkKSByZXR1cm5cblxuICAgICAgICB2YXIgZWwgICAgICAgPSB0aGlzLmVsLFxuICAgICAgICAgICAgY29tcGlsZXIgPSB0aGlzLmNvbXBpbGVyLFxuICAgICAgICAgICAgcGFydGlhbCAgPSBjb21waWxlci5nZXRPcHRpb24oJ3BhcnRpYWxzJywgaWQpXG5cbiAgICAgICAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgICAgICAgICBpZiAoaWQgPT09ICd5aWVsZCcpIHtcbiAgICAgICAgICAgICAgICB1dGlscy53YXJuKCd7ez55aWVsZH19IHN5bnRheCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgPGNvbnRlbnQ+IHRhZyBpbnN0ZWFkLicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnRpYWwgPSBwYXJ0aWFsLmNsb25lTm9kZSh0cnVlKVxuXG4gICAgICAgIC8vIGNvbW1lbnQgcmVmIG5vZGUgbWVhbnMgaW5saW5lIHBhcnRpYWxcbiAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09PSA4KSB7XG5cbiAgICAgICAgICAgIC8vIGtlZXAgYSByZWYgZm9yIHRoZSBwYXJ0aWFsJ3MgY29udGVudCBub2Rlc1xuICAgICAgICAgICAgdmFyIG5vZGVzID0gW10uc2xpY2UuY2FsbChwYXJ0aWFsLmNoaWxkTm9kZXMpLFxuICAgICAgICAgICAgICAgIHBhcmVudCA9IGVsLnBhcmVudE5vZGVcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGFydGlhbCwgZWwpXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWwpXG4gICAgICAgICAgICAvLyBjb21waWxlIHBhcnRpYWwgYWZ0ZXIgYXBwZW5kaW5nLCBiZWNhdXNlIGl0cyBjaGlsZHJlbidzIHBhcmVudE5vZGVcbiAgICAgICAgICAgIC8vIHdpbGwgY2hhbmdlIGZyb20gdGhlIGZyYWdtZW50IHRvIHRoZSBjb3JyZWN0IHBhcmVudE5vZGUuXG4gICAgICAgICAgICAvLyBUaGlzIGNvdWxkIGFmZmVjdCBkaXJlY3RpdmVzIHRoYXQgbmVlZCBhY2Nlc3MgdG8gaXRzIGVsZW1lbnQncyBwYXJlbnROb2RlLlxuICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChjb21waWxlci5jb21waWxlLCBjb21waWxlcilcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBqdXN0IHNldCBpbm5lckhUTUwuLi5cbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICcnXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChwYXJ0aWFsKVxuXG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJ2YXIgdXRpbHMgICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzJyksXG4gICAgY29uZmlnICAgICA9IHJlcXVpcmUoJy4uL2NvbmZpZycpXG5cbi8qKlxuICogIEJpbmRpbmcgdGhhdCBtYW5hZ2VzIFZNcyBiYXNlZCBvbiBhbiBBcnJheVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSAnJHInICsgdGhpcy5pZFxuXG4gICAgICAgIC8vIGEgaGFzaCB0byBjYWNoZSB0aGUgc2FtZSBleHByZXNzaW9ucyBvbiByZXBlYXRlZCBpbnN0YW5jZXNcbiAgICAgICAgLy8gc28gdGhleSBkb24ndCBoYXZlIHRvIGJlIGNvbXBpbGVkIGZvciBldmVyeSBzaW5nbGUgaW5zdGFuY2VcbiAgICAgICAgdGhpcy5leHBDYWNoZSA9IHV0aWxzLmhhc2goKVxuXG4gICAgICAgIHZhciBlbCAgID0gdGhpcy5lbCxcbiAgICAgICAgICAgIGN0biAgPSB0aGlzLmNvbnRhaW5lciA9IGVsLnBhcmVudE5vZGVcblxuICAgICAgICAvLyBleHRyYWN0IGNoaWxkIElkLCBpZiBhbnlcbiAgICAgICAgdGhpcy5jaGlsZElkID0gdGhpcy5jb21waWxlci5ldmFsKHV0aWxzLmF0dHIoZWwsICdyZWYnKSlcblxuICAgICAgICAvLyBjcmVhdGUgYSBjb21tZW50IG5vZGUgYXMgYSByZWZlcmVuY2Ugbm9kZSBmb3IgRE9NIGluc2VydGlvbnNcbiAgICAgICAgdGhpcy5yZWYgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KGNvbmZpZy5wcmVmaXggKyAnLXJlcGVhdC0nICsgdGhpcy5rZXkpXG4gICAgICAgIGN0bi5pbnNlcnRCZWZvcmUodGhpcy5yZWYsIGVsKVxuICAgICAgICBjdG4ucmVtb3ZlQ2hpbGQoZWwpXG5cbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbnVsbFxuICAgICAgICB0aGlzLnZtcyA9IG51bGxcblxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICBpZiAodXRpbHMuaXNPYmplY3QoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gdXRpbHMub2JqZWN0VG9BcnJheShjb2xsZWN0aW9uKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlscy53YXJuKCd2LXJlcGVhdCBvbmx5IGFjY2VwdHMgQXJyYXkgb3IgT2JqZWN0IHZhbHVlcy4nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8ga2VlcCByZWZlcmVuY2Ugb2Ygb2xkIGRhdGEgYW5kIFZNc1xuICAgICAgICAvLyBzbyB3ZSBjYW4gcmV1c2UgdGhlbSBpZiBwb3NzaWJsZVxuICAgICAgICB0aGlzLm9sZFZNcyA9IHRoaXMudm1zXG4gICAgICAgIHRoaXMub2xkQ29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvblxuICAgICAgICBjb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbiB8fCBbXVxuXG4gICAgICAgIHZhciBpc09iamVjdCA9IGNvbGxlY3Rpb25bMF0gJiYgdXRpbHMuaXNPYmplY3QoY29sbGVjdGlvblswXSlcbiAgICAgICAgdGhpcy52bXMgPSB0aGlzLm9sZENvbGxlY3Rpb25cbiAgICAgICAgICAgID8gdGhpcy5kaWZmKGNvbGxlY3Rpb24sIGlzT2JqZWN0KVxuICAgICAgICAgICAgOiB0aGlzLmluaXQoY29sbGVjdGlvbiwgaXNPYmplY3QpXG5cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRJZCkge1xuICAgICAgICAgICAgdGhpcy52bS4kW3RoaXMuY2hpbGRJZF0gPSB0aGlzLnZtc1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGlzT2JqZWN0KSB7XG4gICAgICAgIHZhciB2bSwgdm1zID0gW11cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdm0gPSB0aGlzLmJ1aWxkKGNvbGxlY3Rpb25baV0sIGksIGlzT2JqZWN0KVxuICAgICAgICAgICAgdm1zLnB1c2godm0pXG4gICAgICAgICAgICBpZiAodGhpcy5jb21waWxlci5pbml0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHZtLiRlbCwgdGhpcy5yZWYpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZtLiRiZWZvcmUodGhpcy5yZWYpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZtc1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgRGlmZiB0aGUgbmV3IGFycmF5IHdpdGggdGhlIG9sZFxuICAgICAqICBhbmQgZGV0ZXJtaW5lIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBET00gbWFuaXB1bGF0aW9ucy5cbiAgICAgKi9cbiAgICBkaWZmOiBmdW5jdGlvbiAobmV3Q29sbGVjdGlvbiwgaXNPYmplY3QpIHtcblxuICAgICAgICB2YXIgaSwgbCwgaXRlbSwgdm0sXG4gICAgICAgICAgICBvbGRJbmRleCxcbiAgICAgICAgICAgIHRhcmdldE5leHQsXG4gICAgICAgICAgICBjdXJyZW50TmV4dCxcbiAgICAgICAgICAgIG5leHRFbCxcbiAgICAgICAgICAgIGN0biAgICA9IHRoaXMuY29udGFpbmVyLFxuICAgICAgICAgICAgb2xkVk1zID0gdGhpcy5vbGRWTXMsXG4gICAgICAgICAgICB2bXMgICAgPSBbXVxuXG4gICAgICAgIHZtcy5sZW5ndGggPSBuZXdDb2xsZWN0aW9uLmxlbmd0aFxuXG4gICAgICAgIC8vIGZpcnN0IHBhc3MsIGNvbGxlY3QgbmV3IHJldXNlZCBhbmQgbmV3IGNyZWF0ZWRcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IG5ld0NvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpdGVtID0gbmV3Q29sbGVjdGlvbltpXVxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaXRlbS4kaW5kZXggPSBpXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uX19lbWl0dGVyX18gJiYgaXRlbS5fX2VtaXR0ZXJfX1t0aGlzLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugb2YgZGF0YSBpcyBiZWluZyByZXVzZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY29yZCBpdHMgZmluYWwgcG9zaXRpb24gaW4gcmV1c2VkIHZtc1xuICAgICAgICAgICAgICAgICAgICBpdGVtLiRyZXVzZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm1zW2ldID0gdGhpcy5idWlsZChpdGVtLCBpLCBpc09iamVjdClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHdlIGNhbid0IGF0dGFjaCBhbiBpZGVudGlmaWVyIHRvIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAvLyBzbyBoYXZlIHRvIGRvIGFuIGluZGV4T2YuLi5cbiAgICAgICAgICAgICAgICBvbGRJbmRleCA9IGluZGV4T2Yob2xkVk1zLCBpdGVtKVxuICAgICAgICAgICAgICAgIGlmIChvbGRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY29yZCB0aGUgcG9zaXRpb24gb24gdGhlIGV4aXN0aW5nIHZtXG4gICAgICAgICAgICAgICAgICAgIG9sZFZNc1tvbGRJbmRleF0uJHJldXNlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgb2xkVk1zW29sZEluZGV4XS4kZGF0YS4kaW5kZXggPSBpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm1zW2ldID0gdGhpcy5idWlsZChpdGVtLCBpLCBpc09iamVjdClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZWNvbmQgcGFzcywgY29sbGVjdCBvbGQgcmV1c2VkIGFuZCBkZXN0cm95IHVudXNlZFxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gb2xkVk1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdm0gPSBvbGRWTXNbaV1cbiAgICAgICAgICAgIGl0ZW0gPSB0aGlzLmFyZ1xuICAgICAgICAgICAgICAgID8gdm0uJGRhdGFbdGhpcy5hcmddXG4gICAgICAgICAgICAgICAgOiB2bS4kZGF0YVxuICAgICAgICAgICAgaWYgKGl0ZW0uJHJldXNlZCkge1xuICAgICAgICAgICAgICAgIHZtLiRyZXVzZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgZGVsZXRlIGl0ZW0uJHJldXNlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZtLiRyZXVzZWQpIHtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGluZGV4IHRvIGxhdGVzdFxuICAgICAgICAgICAgICAgIHZtLiRpbmRleCA9IGl0ZW0uJGluZGV4XG4gICAgICAgICAgICAgICAgLy8gdGhlIGl0ZW0gY291bGQgaGF2ZSBoYWQgYSBuZXcga2V5XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uJGtleSAmJiBpdGVtLiRrZXkgIT09IHZtLiRrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uJGtleSA9IGl0ZW0uJGtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2bXNbdm0uJGluZGV4XSA9IHZtXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgb25lIGNhbiBiZSBkZXN0cm95ZWQuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uX19lbWl0dGVyX18pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGl0ZW0uX19lbWl0dGVyX19bdGhpcy5pZGVudGlmaWVyXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2bS4kZGVzdHJveSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5hbCBwYXNzLCBtb3ZlL2luc2VydCBET00gZWxlbWVudHNcbiAgICAgICAgaSA9IHZtcy5sZW5ndGhcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgdm0gPSB2bXNbaV1cbiAgICAgICAgICAgIGl0ZW0gPSB2bS4kZGF0YVxuICAgICAgICAgICAgdGFyZ2V0TmV4dCA9IHZtc1tpICsgMV1cbiAgICAgICAgICAgIGlmICh2bS4kcmV1c2VkKSB7XG4gICAgICAgICAgICAgICAgbmV4dEVsID0gdm0uJGVsLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICAgLy8gZGVzdHJveWVkIFZNcycgZWxlbWVudCBtaWdodCBzdGlsbCBiZSBpbiB0aGUgRE9NXG4gICAgICAgICAgICAgICAgLy8gZHVlIHRvIHRyYW5zaXRpb25zXG4gICAgICAgICAgICAgICAgd2hpbGUgKCFuZXh0RWwudnVlX3ZtICYmIG5leHRFbCAhPT0gdGhpcy5yZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEVsID0gbmV4dEVsLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnROZXh0ID0gbmV4dEVsLnZ1ZV92bVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TmV4dCAhPT0gdGFyZ2V0TmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldE5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bi5pbnNlcnRCZWZvcmUodm0uJGVsLCB0aGlzLnJlZilcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbCA9IHRhcmdldE5leHQuJGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXcgVk1zJyBlbGVtZW50IG1pZ2h0IG5vdCBiZSBpbiB0aGUgRE9NIHlldFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHVlIHRvIHRyYW5zaXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIW5leHRFbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmV4dCA9IHZtc1tuZXh0RWwudnVlX3ZtLiRpbmRleCArIDFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEVsID0gdGFyZ2V0TmV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRhcmdldE5leHQuJGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5yZWZcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0bi5pbnNlcnRCZWZvcmUodm0uJGVsLCBuZXh0RWwpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIHZtLiRyZXVzZWRcbiAgICAgICAgICAgICAgICBkZWxldGUgaXRlbS4kaW5kZXhcbiAgICAgICAgICAgICAgICBkZWxldGUgaXRlbS4ka2V5XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBhIG5ldyB2bVxuICAgICAgICAgICAgICAgIHZtLiRiZWZvcmUodGFyZ2V0TmV4dCA/IHRhcmdldE5leHQuJGVsIDogdGhpcy5yZWYpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdm1zXG4gICAgfSxcblxuICAgIGJ1aWxkOiBmdW5jdGlvbiAoZGF0YSwgaW5kZXgsIGlzT2JqZWN0KSB7XG5cbiAgICAgICAgLy8gd3JhcCBub24tb2JqZWN0IHZhbHVlc1xuICAgICAgICB2YXIgcmF3LCBhbGlhcyxcbiAgICAgICAgICAgIHdyYXAgPSAhaXNPYmplY3QgfHwgdGhpcy5hcmdcbiAgICAgICAgaWYgKHdyYXApIHtcbiAgICAgICAgICAgIHJhdyA9IGRhdGFcbiAgICAgICAgICAgIGFsaWFzID0gdGhpcy5hcmcgfHwgJyR2YWx1ZSdcbiAgICAgICAgICAgIGRhdGEgPSB7fVxuICAgICAgICAgICAgZGF0YVthbGlhc10gPSByYXdcbiAgICAgICAgfVxuICAgICAgICBkYXRhLiRpbmRleCA9IGluZGV4XG5cbiAgICAgICAgdmFyIGVsID0gdGhpcy5lbC5jbG9uZU5vZGUodHJ1ZSksXG4gICAgICAgICAgICBDdG9yID0gdGhpcy5jb21waWxlci5yZXNvbHZlQ29tcG9uZW50KGVsLCBkYXRhKSxcbiAgICAgICAgICAgIHZtID0gbmV3IEN0b3Ioe1xuICAgICAgICAgICAgICAgIGVsOiBlbCxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgIHBhcmVudDogdGhpcy52bSxcbiAgICAgICAgICAgICAgICBjb21waWxlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleHBDYWNoZTogdGhpcy5leHBDYWNoZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICAgICAgICAvLyBhdHRhY2ggYW4gaWVudW1lcmFibGUgaWRlbnRpZmllciB0byB0aGUgcmF3IGRhdGFcbiAgICAgICAgICAgIChyYXcgfHwgZGF0YSkuX19lbWl0dGVyX19bdGhpcy5pZGVudGlmaWVyXSA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2bVxuXG4gICAgfSxcblxuICAgIHVuYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZElkKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy52bS4kW3RoaXMuY2hpbGRJZF1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52bXMpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy52bXMubGVuZ3RoXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52bXNbaV0uJGRlc3Ryb3koKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBIZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogIEZpbmQgYW4gb2JqZWN0IG9yIGEgd3JhcHBlZCBkYXRhIG9iamVjdFxuICogIGZyb20gYW4gQXJyYXlcbiAqL1xuZnVuY3Rpb24gaW5kZXhPZiAodm1zLCBvYmopIHtcbiAgICBmb3IgKHZhciB2bSwgaSA9IDAsIGwgPSB2bXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtID0gdm1zW2ldXG4gICAgICAgIGlmICghdm0uJHJldXNlZCAmJiB2bS4kdmFsdWUgPT09IG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTFcbn0iLCJ2YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJy1tcy0nXVxuXG4vKipcbiAqICBCaW5kaW5nIGZvciBDU1Mgc3R5bGVzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvcCA9IHRoaXMuYXJnXG4gICAgICAgIGlmICghcHJvcCkgcmV0dXJuXG4gICAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIHRoYXQgc3RhcnQgd2l0aCAkIHdpbGwgYmUgYXV0by1wcmVmaXhlZFxuICAgICAgICAgICAgcHJvcCA9IHByb3Auc2xpY2UoMSlcbiAgICAgICAgICAgIHRoaXMucHJlZml4ZWQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9wID0gcHJvcFxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcHJvcCA9IHRoaXMucHJvcCxcbiAgICAgICAgICAgIGlzSW1wb3J0YW50XG4gICAgICAgIC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cbiAgICAgICAgLy8gY2FzdCBwb3NzaWJsZSBudW1iZXJzL2Jvb2xlYW5zIGludG8gc3RyaW5nc1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgdmFsdWUgKz0gJydcbiAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlzSW1wb3J0YW50ID0gdmFsdWUuc2xpY2UoLTEwKSA9PT0gJyFpbXBvcnRhbnQnXG4gICAgICAgICAgICAgICAgICAgID8gJ2ltcG9ydGFudCdcbiAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgIGlmIChpc0ltcG9ydGFudCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIC0xMCkudHJpbSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCB2YWx1ZSwgaXNJbXBvcnRhbnQpXG4gICAgICAgICAgICBpZiAodGhpcy5wcmVmaXhlZCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gcHJlZml4ZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KHByZWZpeGVzW2ldICsgcHJvcCwgdmFsdWUsIGlzSW1wb3J0YW50KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuY3NzVGV4dCA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCIvKipcbiAqICBNYW5hZ2VzIGEgY29uZGl0aW9uYWwgY2hpbGQgVk0gdXNpbmcgdGhlXG4gKiAgYmluZGluZydzIHZhbHVlIGFzIHRoZSBjb21wb25lbnQgSUQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgYmluZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIC8vIHRyYWNrIHBvc2l0aW9uIGluIERPTSB3aXRoIGEgcmVmIG5vZGVcbiAgICAgICAgdmFyIGVsICAgICAgID0gdGhpcy5yYXcgPSB0aGlzLmVsLFxuICAgICAgICAgICAgcGFyZW50ICAgPSBlbC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgcmVmICAgICAgPSB0aGlzLnJlZiA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ3YtdmlldycpXG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocmVmLCBlbClcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsKVxuXG4gICAgICAgIC8vIGNhY2hlIG9yaWdpbmFsIGNvbnRlbnRcbiAgICAgICAgLyoganNoaW50IGJvc3M6IHRydWUgKi9cbiAgICAgICAgdmFyIG5vZGUsXG4gICAgICAgICAgICBmcmFnID0gdGhpcy5pbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHdoaWxlIChub2RlID0gZWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgIHRoaXMudW5iaW5kKClcblxuICAgICAgICB2YXIgQ3RvciAgPSB0aGlzLmNvbXBpbGVyLmdldE9wdGlvbignY29tcG9uZW50cycsIHZhbHVlKVxuICAgICAgICBpZiAoIUN0b3IpIHJldHVyblxuXG4gICAgICAgIHRoaXMuY2hpbGRWTSA9IG5ldyBDdG9yKHtcbiAgICAgICAgICAgIGVsOiB0aGlzLnJhdy5jbG9uZU5vZGUodHJ1ZSksXG4gICAgICAgICAgICBwYXJlbnQ6IHRoaXMudm0sXG4gICAgICAgICAgICBjb21waWxlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICByYXdDb250ZW50OiB0aGlzLmlubmVyLmNsb25lTm9kZSh0cnVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuZWwgPSB0aGlzLmNoaWxkVk0uJGVsXG4gICAgICAgIGlmICh0aGlzLmNvbXBpbGVyLmluaXQpIHtcbiAgICAgICAgICAgIHRoaXMucmVmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZWwsIHRoaXMucmVmKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGlsZFZNLiRiZWZvcmUodGhpcy5yZWYpXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZFZNKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkVk0uJGRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgfVxuXG59IiwidmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKVxuXG4vKipcbiAqICBCaW5kaW5nIGZvciBpbmhlcml0aW5nIGRhdGEgZnJvbSBwYXJlbnQgVk1zLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgc2VsZiAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGNoaWxkS2V5ICA9IHNlbGYuYXJnLFxuICAgICAgICAgICAgcGFyZW50S2V5ID0gc2VsZi5rZXksXG4gICAgICAgICAgICBjb21waWxlciAgPSBzZWxmLmNvbXBpbGVyLFxuICAgICAgICAgICAgb3duZXIgICAgID0gc2VsZi5iaW5kaW5nLmNvbXBpbGVyXG5cbiAgICAgICAgaWYgKGNvbXBpbGVyID09PSBvd25lcikge1xuICAgICAgICAgICAgdGhpcy5hbG9uZSA9IHRydWVcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkS2V5KSB7XG4gICAgICAgICAgICBpZiAoIWNvbXBpbGVyLmJpbmRpbmdzW2NoaWxkS2V5XSkge1xuICAgICAgICAgICAgICAgIGNvbXBpbGVyLmNyZWF0ZUJpbmRpbmcoY2hpbGRLZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzeW5jIGNoYW5nZXMgb24gY2hpbGQgYmFjayB0byBwYXJlbnRcbiAgICAgICAgICAgIGNvbXBpbGVyLm9ic2VydmVyLm9uKCdjaGFuZ2U6JyArIGNoaWxkS2V5LCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBpbGVyLmluaXQpIHJldHVyblxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5sb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9jayA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2NrID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3duZXIudm0uJHNldChwYXJlbnRLZXksIHZhbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gc3luYyBmcm9tIHBhcmVudFxuICAgICAgICBpZiAoIXRoaXMuYWxvbmUgJiYgIXRoaXMubG9jaykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52bS4kc2V0KHRoaXMuYXJnLCB2YWx1ZSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy52bS4kZGF0YSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZtLiRkYXRhID0gdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufSIsInZhciBzbGljZSA9IFtdLnNsaWNlXG5cbmZ1bmN0aW9uIEVtaXR0ZXIgKGN0eCkge1xuICAgIHRoaXMuX2N0eCA9IGN0eCB8fCB0aGlzXG59XG5cbnZhciBFbWl0dGVyUHJvdG8gPSBFbWl0dGVyLnByb3RvdHlwZVxuXG5FbWl0dGVyUHJvdG8ub24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdGhpcy5fY2JzID0gdGhpcy5fY2JzIHx8IHt9XG4gICAgOyh0aGlzLl9jYnNbZXZlbnRdID0gdGhpcy5fY2JzW2V2ZW50XSB8fCBbXSlcbiAgICAgICAgLnB1c2goZm4pXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuRW1pdHRlclByb3RvLm9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgdGhpcy5fY2JzID0gdGhpcy5fY2JzIHx8IHt9XG5cbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICAgIHNlbGYub2ZmKGV2ZW50LCBvbilcbiAgICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIG9uLmZuID0gZm5cbiAgICB0aGlzLm9uKGV2ZW50LCBvbilcbiAgICByZXR1cm4gdGhpc1xufVxuXG5FbWl0dGVyUHJvdG8ub2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHRoaXMuX2NicyA9IHRoaXMuX2NicyB8fCB7fVxuXG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2NicyA9IHt9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2JzW2V2ZW50XVxuICAgIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpc1xuXG4gICAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jYnNbZXZlbnRdXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2JcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYiA9IGNhbGxiYWNrc1tpXVxuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqICBUaGUgaW50ZXJuYWwsIGZhc3RlciBlbWl0IHdpdGggZml4ZWQgYW1vdW50IG9mIGFyZ3VtZW50c1xuICogIHVzaW5nIEZ1bmN0aW9uLmNhbGxcbiAqL1xuRW1pdHRlclByb3RvLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnQsIGEsIGIsIGMpIHtcbiAgICB0aGlzLl9jYnMgPSB0aGlzLl9jYnMgfHwge31cbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2JzW2V2ZW50XVxuXG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMClcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwodGhpcy5fY3R4LCBhLCBiLCBjKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiAgVGhlIGV4dGVybmFsIGVtaXQgdXNpbmcgRnVuY3Rpb24uYXBwbHlcbiAqL1xuRW1pdHRlclByb3RvLmFwcGx5RW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHRoaXMuX2NicyA9IHRoaXMuX2NicyB8fCB7fVxuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYnNbZXZlbnRdLCBhcmdzXG5cbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKVxuICAgICAgICBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLl9jdHgsIGFyZ3MpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXIiLCJ2YXIgdXRpbHMgICAgICAgICAgID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIFNUUl9TQVZFX1JFICAgICA9IC9cIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8Jyg/OlteJ1xcXFxdfFxcXFwuKSonL2csXG4gICAgU1RSX1JFU1RPUkVfUkUgID0gL1wiKFxcZCspXCIvZyxcbiAgICBORVdMSU5FX1JFICAgICAgPSAvXFxuL2csXG4gICAgQ1RPUl9SRSAgICAgICAgID0gbmV3IFJlZ0V4cCgnY29uc3RydWN0b3InLnNwbGl0KCcnKS5qb2luKCdbXFwnXCIrLCBdKicpKSxcbiAgICBVTklDT0RFX1JFICAgICAgPSAvXFxcXHVcXGRcXGRcXGRcXGQvXG5cbi8vIFZhcmlhYmxlIGV4dHJhY3Rpb24gc2Nvb3BlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SdWJ5TG91dnJlL2F2YWxvblxuXG52YXIgS0VZV09SRFMgPVxuICAgICAgICAvLyBrZXl3b3Jkc1xuICAgICAgICAnYnJlYWssY2FzZSxjYXRjaCxjb250aW51ZSxkZWJ1Z2dlcixkZWZhdWx0LGRlbGV0ZSxkbyxlbHNlLGZhbHNlJyArXG4gICAgICAgICcsZmluYWxseSxmb3IsZnVuY3Rpb24saWYsaW4saW5zdGFuY2VvZixuZXcsbnVsbCxyZXR1cm4sc3dpdGNoLHRoaXMnICtcbiAgICAgICAgJyx0aHJvdyx0cnVlLHRyeSx0eXBlb2YsdmFyLHZvaWQsd2hpbGUsd2l0aCx1bmRlZmluZWQnICtcbiAgICAgICAgLy8gcmVzZXJ2ZWRcbiAgICAgICAgJyxhYnN0cmFjdCxib29sZWFuLGJ5dGUsY2hhcixjbGFzcyxjb25zdCxkb3VibGUsZW51bSxleHBvcnQsZXh0ZW5kcycgK1xuICAgICAgICAnLGZpbmFsLGZsb2F0LGdvdG8saW1wbGVtZW50cyxpbXBvcnQsaW50LGludGVyZmFjZSxsb25nLG5hdGl2ZScgK1xuICAgICAgICAnLHBhY2thZ2UscHJpdmF0ZSxwcm90ZWN0ZWQscHVibGljLHNob3J0LHN0YXRpYyxzdXBlcixzeW5jaHJvbml6ZWQnICtcbiAgICAgICAgJyx0aHJvd3MsdHJhbnNpZW50LHZvbGF0aWxlJyArXG4gICAgICAgIC8vIEVDTUEgNSAtIHVzZSBzdHJpY3RcbiAgICAgICAgJyxhcmd1bWVudHMsbGV0LHlpZWxkJyArXG4gICAgICAgIC8vIGFsbG93IHVzaW5nIE1hdGggaW4gZXhwcmVzc2lvbnNcbiAgICAgICAgJyxNYXRoJyxcbiAgICAgICAgXG4gICAgS0VZV09SRFNfUkUgPSBuZXcgUmVnRXhwKFtcIlxcXFxiXCIgKyBLRVlXT1JEUy5yZXBsYWNlKC8sL2csICdcXFxcYnxcXFxcYicpICsgXCJcXFxcYlwiXS5qb2luKCd8JyksICdnJyksXG4gICAgUkVNT1ZFX1JFICAgPSAvXFwvXFwqKD86LnxcXG4pKj9cXCpcXC98XFwvXFwvW15cXG5dKlxcbnxcXC9cXC9bXlxcbl0qJHwnW14nXSonfFwiW15cIl0qXCJ8W1xcc1xcdFxcbl0qXFwuW1xcc1xcdFxcbl0qWyRcXHdcXC5dK3xbXFx7LF1cXHMqW1xcd1xcJF9dK1xccyo6L2csXG4gICAgU1BMSVRfUkUgICAgPSAvW15cXHckXSsvZyxcbiAgICBOVU1CRVJfUkUgICA9IC9cXGJcXGRbXixdKi9nLFxuICAgIEJPVU5EQVJZX1JFID0gL14sK3wsKyQvZ1xuXG4vKipcbiAqICBTdHJpcCB0b3AgbGV2ZWwgdmFyaWFibGUgbmFtZXMgZnJvbSBhIHNuaXBwZXQgb2YgSlMgZXhwcmVzc2lvblxuICovXG5mdW5jdGlvbiBnZXRWYXJpYWJsZXMgKGNvZGUpIHtcbiAgICBjb2RlID0gY29kZVxuICAgICAgICAucmVwbGFjZShSRU1PVkVfUkUsICcnKVxuICAgICAgICAucmVwbGFjZShTUExJVF9SRSwgJywnKVxuICAgICAgICAucmVwbGFjZShLRVlXT1JEU19SRSwgJycpXG4gICAgICAgIC5yZXBsYWNlKE5VTUJFUl9SRSwgJycpXG4gICAgICAgIC5yZXBsYWNlKEJPVU5EQVJZX1JFLCAnJylcbiAgICByZXR1cm4gY29kZVxuICAgICAgICA/IGNvZGUuc3BsaXQoLywrLylcbiAgICAgICAgOiBbXVxufVxuXG4vKipcbiAqICBBIGdpdmVuIHBhdGggY291bGQgcG90ZW50aWFsbHkgZXhpc3Qgbm90IG9uIHRoZVxuICogIGN1cnJlbnQgY29tcGlsZXIsIGJ1dCB1cCBpbiB0aGUgcGFyZW50IGNoYWluIHNvbWV3aGVyZS5cbiAqICBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBhbiBhY2Nlc3MgcmVsYXRpb25zaGlwIHN0cmluZ1xuICogIHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIGdldHRlciBmdW5jdGlvbiBieSB3YWxraW5nIHVwXG4gKiAgdGhlIHBhcmVudCBjaGFpbiB0byBjaGVjayBmb3Iga2V5IGV4aXN0ZW5jZS5cbiAqXG4gKiAgSXQgc3RvcHMgYXQgdG9wIHBhcmVudCBpZiBubyB2bSBpbiB0aGUgY2hhaW4gaGFzIHRoZVxuICogIGtleS4gSXQgdGhlbiBjcmVhdGVzIGFueSBtaXNzaW5nIGJpbmRpbmdzIG9uIHRoZVxuICogIGZpbmFsIHJlc29sdmVkIHZtLlxuICovXG5mdW5jdGlvbiB0cmFjZVNjb3BlIChwYXRoLCBjb21waWxlciwgZGF0YSkge1xuICAgIHZhciByZWwgID0gJycsXG4gICAgICAgIGRpc3QgPSAwLFxuICAgICAgICBzZWxmID0gY29tcGlsZXJcblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmdldChkYXRhLCBwYXRoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGhhY2s6IHRlbXBvcmFyaWx5IGF0dGFjaGVkIGRhdGFcbiAgICAgICAgcmV0dXJuICckdGVtcC4nXG4gICAgfVxuXG4gICAgd2hpbGUgKGNvbXBpbGVyKSB7XG4gICAgICAgIGlmIChjb21waWxlci5oYXNLZXkocGF0aCkpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21waWxlciA9IGNvbXBpbGVyLnBhcmVudFxuICAgICAgICAgICAgZGlzdCsrXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbXBpbGVyKSB7XG4gICAgICAgIHdoaWxlIChkaXN0LS0pIHtcbiAgICAgICAgICAgIHJlbCArPSAnJHBhcmVudC4nXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb21waWxlci5iaW5kaW5nc1twYXRoXSAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICBjb21waWxlci5jcmVhdGVCaW5kaW5nKHBhdGgpXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmNyZWF0ZUJpbmRpbmcocGF0aClcbiAgICB9XG4gICAgcmV0dXJuIHJlbFxufVxuXG4vKipcbiAqICBDcmVhdGUgYSBmdW5jdGlvbiBmcm9tIGEgc3RyaW5nLi4uXG4gKiAgdGhpcyBsb29rcyBsaWtlIGV2aWwgbWFnaWMgYnV0IHNpbmNlIGFsbCB2YXJpYWJsZXMgYXJlIGxpbWl0ZWRcbiAqICB0byB0aGUgVk0ncyBkYXRhIGl0J3MgYWN0dWFsbHkgcHJvcGVybHkgc2FuZGJveGVkXG4gKi9cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIgKGV4cCwgcmF3KSB7XG4gICAgdmFyIGZuXG4gICAgdHJ5IHtcbiAgICAgICAgZm4gPSBuZXcgRnVuY3Rpb24oZXhwKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdXRpbHMud2FybignRXJyb3IgcGFyc2luZyBleHByZXNzaW9uOiAnICsgcmF3KVxuICAgIH1cbiAgICByZXR1cm4gZm5cbn1cblxuLyoqXG4gKiAgRXNjYXBlIGEgbGVhZGluZyBkb2xsYXIgc2lnbiBmb3IgcmVnZXggY29uc3RydWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZURvbGxhciAodikge1xuICAgIHJldHVybiB2LmNoYXJBdCgwKSA9PT0gJyQnXG4gICAgICAgID8gJ1xcXFwnICsgdlxuICAgICAgICA6IHZcbn1cblxuLyoqXG4gKiAgUGFyc2UgYW5kIHJldHVybiBhbiBhbm9ueW1vdXMgY29tcHV0ZWQgcHJvcGVydHkgZ2V0dGVyIGZ1bmN0aW9uXG4gKiAgZnJvbSBhbiBhcmJpdHJhcnkgZXhwcmVzc2lvbiwgdG9nZXRoZXIgd2l0aCBhIGxpc3Qgb2YgcGF0aHMgdG8gYmVcbiAqICBjcmVhdGVkIGFzIGJpbmRpbmdzLlxuICovXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKGV4cCwgY29tcGlsZXIsIGRhdGEpIHtcbiAgICAvLyB1bmljb2RlIGFuZCAnY29uc3RydWN0b3InIGFyZSBub3QgYWxsb3dlZCBmb3IgWFNTIHNlY3VyaXR5LlxuICAgIGlmIChVTklDT0RFX1JFLnRlc3QoZXhwKSB8fCBDVE9SX1JFLnRlc3QoZXhwKSkge1xuICAgICAgICB1dGlscy53YXJuKCdVbnNhZmUgZXhwcmVzc2lvbjogJyArIGV4cClcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIGV4dHJhY3QgdmFyaWFibGUgbmFtZXNcbiAgICB2YXIgdmFycyA9IGdldFZhcmlhYmxlcyhleHApXG4gICAgaWYgKCF2YXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbWFrZUdldHRlcigncmV0dXJuICcgKyBleHAsIGV4cClcbiAgICB9XG4gICAgdmFycyA9IHV0aWxzLnVuaXF1ZSh2YXJzKVxuXG4gICAgdmFyIGFjY2Vzc29ycyA9ICcnLFxuICAgICAgICBoYXMgICAgICAgPSB1dGlscy5oYXNoKCksXG4gICAgICAgIHN0cmluZ3MgICA9IFtdLFxuICAgICAgICAvLyBjb25zdHJ1Y3QgYSByZWdleCB0byBleHRyYWN0IGFsbCB2YWxpZCB2YXJpYWJsZSBwYXRoc1xuICAgICAgICAvLyBvbmVzIHRoYXQgYmVnaW4gd2l0aCBcIiRcIiBhcmUgcGFydGljdWxhcmx5IHRyaWNreVxuICAgICAgICAvLyBiZWNhdXNlIHdlIGNhbid0IHVzZSBcXGIgZm9yIHRoZW1cbiAgICAgICAgcGF0aFJFID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgIFwiW14kXFxcXHdcXFxcLl0oXCIgK1xuICAgICAgICAgICAgdmFycy5tYXAoZXNjYXBlRG9sbGFyKS5qb2luKCd8JykgK1xuICAgICAgICAgICAgXCIpWyRcXFxcd1xcXFwuXSpcXFxcYlwiLCAnZydcbiAgICAgICAgKSxcbiAgICAgICAgYm9keSA9ICgnICcgKyBleHApXG4gICAgICAgICAgICAucmVwbGFjZShTVFJfU0FWRV9SRSwgc2F2ZVN0cmluZ3MpXG4gICAgICAgICAgICAucmVwbGFjZShwYXRoUkUsIHJlcGxhY2VQYXRoKVxuICAgICAgICAgICAgLnJlcGxhY2UoU1RSX1JFU1RPUkVfUkUsIHJlc3RvcmVTdHJpbmdzKVxuXG4gICAgYm9keSA9IGFjY2Vzc29ycyArICdyZXR1cm4gJyArIGJvZHlcblxuICAgIGZ1bmN0aW9uIHNhdmVTdHJpbmdzIChzdHIpIHtcbiAgICAgICAgdmFyIGkgPSBzdHJpbmdzLmxlbmd0aFxuICAgICAgICAvLyBlc2NhcGUgbmV3bGluZXMgaW4gc3RyaW5ncyBzbyB0aGUgZXhwcmVzc2lvblxuICAgICAgICAvLyBjYW4gYmUgY29ycmVjdGx5IGV2YWx1YXRlZFxuICAgICAgICBzdHJpbmdzW2ldID0gc3RyLnJlcGxhY2UoTkVXTElORV9SRSwgJ1xcXFxuJylcbiAgICAgICAgcmV0dXJuICdcIicgKyBpICsgJ1wiJ1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VQYXRoIChwYXRoKSB7XG4gICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGZpcnN0IGNoYXJcbiAgICAgICAgdmFyIGMgPSBwYXRoLmNoYXJBdCgwKVxuICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgxKVxuICAgICAgICB2YXIgdmFsID0gJ3RoaXMuJyArIHRyYWNlU2NvcGUocGF0aCwgY29tcGlsZXIsIGRhdGEpICsgcGF0aFxuICAgICAgICBpZiAoIWhhc1twYXRoXSkge1xuICAgICAgICAgICAgYWNjZXNzb3JzICs9IHZhbCArICc7J1xuICAgICAgICAgICAgaGFzW3BhdGhdID0gMVxuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IGZvcmdldCB0byBwdXQgdGhhdCBmaXJzdCBjaGFyIGJhY2tcbiAgICAgICAgcmV0dXJuIGMgKyB2YWxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN0b3JlU3RyaW5ncyAoc3RyLCBpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdzW2ldXG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VHZXR0ZXIoYm9keSwgZXhwKVxufVxuXG4vKipcbiAqICBFdmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGlsZXIuXG4gKiAgQWNjZXB0cyBhZGRpdGlvbmFsIGRhdGEuXG4gKi9cbmV4cG9ydHMuZXZhbCA9IGZ1bmN0aW9uIChleHAsIGNvbXBpbGVyLCBkYXRhKSB7XG4gICAgdmFyIGdldHRlciA9IGV4cG9ydHMucGFyc2UoZXhwLCBjb21waWxlciwgZGF0YSksIHJlc1xuICAgIGlmIChnZXR0ZXIpIHtcbiAgICAgICAgLy8gaGFjazogdGVtcG9yYXJpbHkgYXR0YWNoIHRoZSBhZGRpdGlvbmFsIGRhdGEgc29cbiAgICAgICAgLy8gaXQgY2FuIGJlIGFjY2Vzc2VkIGluIHRoZSBnZXR0ZXJcbiAgICAgICAgY29tcGlsZXIudm0uJHRlbXAgPSBkYXRhXG4gICAgICAgIHJlcyA9IGdldHRlci5jYWxsKGNvbXBpbGVyLnZtKVxuICAgICAgICBkZWxldGUgY29tcGlsZXIudm0uJHRlbXBcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xufSIsInZhciB1dGlscyAgICA9IHJlcXVpcmUoJy4vdXRpbHMnKSxcbiAgICBnZXQgICAgICA9IHV0aWxzLmdldCxcbiAgICBzbGljZSAgICA9IFtdLnNsaWNlLFxuICAgIFFVT1RFX1JFID0gL14nLionJC8sXG4gICAgZmlsdGVycyAgPSBtb2R1bGUuZXhwb3J0cyA9IHV0aWxzLmhhc2goKVxuXG4vKipcbiAqICAnYWJjJyA9PiAnQWJjJ1xuICovXG5maWx0ZXJzLmNhcGl0YWxpemUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSByZXR1cm4gJydcbiAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKClcbiAgICByZXR1cm4gdmFsdWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKVxufVxuXG4vKipcbiAqICAnYWJjJyA9PiAnQUJDJ1xuICovXG5maWx0ZXJzLnVwcGVyY2FzZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgfHwgdmFsdWUgPT09IDApXG4gICAgICAgID8gdmFsdWUudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpXG4gICAgICAgIDogJydcbn1cblxuLyoqXG4gKiAgJ0FiQycgPT4gJ2FiYydcbiAqL1xuZmlsdGVycy5sb3dlcmNhc2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIHx8IHZhbHVlID09PSAwKVxuICAgICAgICA/IHZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxuICAgICAgICA6ICcnXG59XG5cbi8qKlxuICogIDEyMzQ1ID0+ICQxMiwzNDUuMDBcbiAqL1xuZmlsdGVycy5jdXJyZW5jeSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2lnbikge1xuICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSlcbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSByZXR1cm4gJydcbiAgICBzaWduID0gc2lnbiB8fCAnJCdcbiAgICB2YXIgcyA9IE1hdGguZmxvb3IodmFsdWUpLnRvU3RyaW5nKCksXG4gICAgICAgIGkgPSBzLmxlbmd0aCAlIDMsXG4gICAgICAgIGggPSBpID4gMCA/IChzLnNsaWNlKDAsIGkpICsgKHMubGVuZ3RoID4gMyA/ICcsJyA6ICcnKSkgOiAnJyxcbiAgICAgICAgZiA9ICcuJyArIHZhbHVlLnRvRml4ZWQoMikuc2xpY2UoLTIpXG4gICAgcmV0dXJuIHNpZ24gKyBoICsgcy5zbGljZShpKS5yZXBsYWNlKC8oXFxkezN9KSg/PVxcZCkvZywgJyQxLCcpICsgZlxufVxuXG4vKipcbiAqICBhcmdzOiBhbiBhcnJheSBvZiBzdHJpbmdzIGNvcnJlc3BvbmRpbmcgdG9cbiAqICB0aGUgc2luZ2xlLCBkb3VibGUsIHRyaXBsZSAuLi4gZm9ybXMgb2YgdGhlIHdvcmQgdG9cbiAqICBiZSBwbHVyYWxpemVkLiBXaGVuIHRoZSBudW1iZXIgdG8gYmUgcGx1cmFsaXplZFxuICogIGV4Y2VlZHMgdGhlIGxlbmd0aCBvZiB0aGUgYXJncywgaXQgd2lsbCB1c2UgdGhlIGxhc3RcbiAqICBlbnRyeSBpbiB0aGUgYXJyYXkuXG4gKlxuICogIGUuZy4gWydzaW5nbGUnLCAnZG91YmxlJywgJ3RyaXBsZScsICdtdWx0aXBsZSddXG4gKi9cbmZpbHRlcnMucGx1cmFsaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICByZXR1cm4gYXJncy5sZW5ndGggPiAxXG4gICAgICAgID8gKGFyZ3NbdmFsdWUgLSAxXSB8fCBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pXG4gICAgICAgIDogKGFyZ3NbdmFsdWUgLSAxXSB8fCBhcmdzWzBdICsgJ3MnKVxufVxuXG4vKipcbiAqICBBIHNwZWNpYWwgZmlsdGVyIHRoYXQgdGFrZXMgYSBoYW5kbGVyIGZ1bmN0aW9uLFxuICogIHdyYXBzIGl0IHNvIGl0IG9ubHkgZ2V0cyB0cmlnZ2VyZWQgb24gc3BlY2lmaWMga2V5cHJlc3Nlcy5cbiAqXG4gKiAgdi1vbiBvbmx5XG4gKi9cblxudmFyIGtleUNvZGVzID0ge1xuICAgIGVudGVyICAgIDogMTMsXG4gICAgdGFiICAgICAgOiA5LFxuICAgICdkZWxldGUnIDogNDYsXG4gICAgdXAgICAgICAgOiAzOCxcbiAgICBsZWZ0ICAgICA6IDM3LFxuICAgIHJpZ2h0ICAgIDogMzksXG4gICAgZG93biAgICAgOiA0MCxcbiAgICBlc2MgICAgICA6IDI3XG59XG5cbmZpbHRlcnMua2V5ID0gZnVuY3Rpb24gKGhhbmRsZXIsIGtleSkge1xuICAgIGlmICghaGFuZGxlcikgcmV0dXJuXG4gICAgdmFyIGNvZGUgPSBrZXlDb2Rlc1trZXldXG4gICAgaWYgKCFjb2RlKSB7XG4gICAgICAgIGNvZGUgPSBwYXJzZUludChrZXksIDEwKVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbCh0aGlzLCBlKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqICBGaWx0ZXIgZmlsdGVyIGZvciB2LXJlcGVhdFxuICovXG5maWx0ZXJzLmZpbHRlckJ5ID0gZnVuY3Rpb24gKGFyciwgc2VhcmNoS2V5LCBkZWxpbWl0ZXIsIGRhdGFLZXkpIHtcblxuICAgIC8vIGFsbG93IG9wdGlvbmFsIGBpbmAgZGVsaW1pdGVyXG4gICAgLy8gYmVjYXVzZSB3aHkgbm90XG4gICAgaWYgKGRlbGltaXRlciAmJiBkZWxpbWl0ZXIgIT09ICdpbicpIHtcbiAgICAgICAgZGF0YUtleSA9IGRlbGltaXRlclxuICAgIH1cblxuICAgIC8vIGdldCB0aGUgc2VhcmNoIHN0cmluZ1xuICAgIHZhciBzZWFyY2ggPSBzdHJpcFF1b3RlcyhzZWFyY2hLZXkpIHx8IHRoaXMuJGdldChzZWFyY2hLZXkpXG4gICAgaWYgKCFzZWFyY2gpIHJldHVybiBhcnJcbiAgICBzZWFyY2ggPSBzZWFyY2gudG9Mb3dlckNhc2UoKVxuXG4gICAgLy8gZ2V0IHRoZSBvcHRpb25hbCBkYXRhS2V5XG4gICAgZGF0YUtleSA9IGRhdGFLZXkgJiYgKHN0cmlwUXVvdGVzKGRhdGFLZXkpIHx8IHRoaXMuJGdldChkYXRhS2V5KSlcblxuICAgIC8vIGNvbnZlcnQgb2JqZWN0IHRvIGFycmF5XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgYXJyID0gdXRpbHMub2JqZWN0VG9BcnJheShhcnIpXG4gICAgfVxuXG4gICAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGRhdGFLZXlcbiAgICAgICAgICAgID8gY29udGFpbnMoZ2V0KGl0ZW0sIGRhdGFLZXkpLCBzZWFyY2gpXG4gICAgICAgICAgICA6IGNvbnRhaW5zKGl0ZW0sIHNlYXJjaClcbiAgICB9KVxuXG59XG5cbmZpbHRlcnMuZmlsdGVyQnkuY29tcHV0ZWQgPSB0cnVlXG5cbi8qKlxuICogIFNvcnQgZml0bGVyIGZvciB2LXJlcGVhdFxuICovXG5maWx0ZXJzLm9yZGVyQnkgPSBmdW5jdGlvbiAoYXJyLCBzb3J0S2V5LCByZXZlcnNlS2V5KSB7XG5cbiAgICB2YXIga2V5ID0gc3RyaXBRdW90ZXMoc29ydEtleSkgfHwgdGhpcy4kZ2V0KHNvcnRLZXkpXG4gICAgaWYgKCFrZXkpIHJldHVybiBhcnJcblxuICAgIC8vIGNvbnZlcnQgb2JqZWN0IHRvIGFycmF5XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgYXJyID0gdXRpbHMub2JqZWN0VG9BcnJheShhcnIpXG4gICAgfVxuXG4gICAgdmFyIG9yZGVyID0gMVxuICAgIGlmIChyZXZlcnNlS2V5KSB7XG4gICAgICAgIGlmIChyZXZlcnNlS2V5ID09PSAnLTEnKSB7XG4gICAgICAgICAgICBvcmRlciA9IC0xXG4gICAgICAgIH0gZWxzZSBpZiAocmV2ZXJzZUtleS5jaGFyQXQoMCkgPT09ICchJykge1xuICAgICAgICAgICAgcmV2ZXJzZUtleSA9IHJldmVyc2VLZXkuc2xpY2UoMSlcbiAgICAgICAgICAgIG9yZGVyID0gdGhpcy4kZ2V0KHJldmVyc2VLZXkpID8gMSA6IC0xXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlciA9IHRoaXMuJGdldChyZXZlcnNlS2V5KSA/IC0xIDogMVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc29ydCBvbiBhIGNvcHkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgYXJyYXlcbiAgICByZXR1cm4gYXJyLnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBhID0gZ2V0KGEsIGtleSlcbiAgICAgICAgYiA9IGdldChiLCBrZXkpXG4gICAgICAgIHJldHVybiBhID09PSBiID8gMCA6IGEgPiBiID8gb3JkZXIgOiAtb3JkZXJcbiAgICB9KVxuXG59XG5cbmZpbHRlcnMub3JkZXJCeS5jb21wdXRlZCA9IHRydWVcblxuLy8gQXJyYXkgZmlsdGVyIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqICBTdHJpbmcgY29udGFpbiBoZWxwZXJcbiAqL1xuZnVuY3Rpb24gY29udGFpbnMgKHZhbCwgc2VhcmNoKSB7XG4gICAgLyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cbiAgICBpZiAodXRpbHMuaXNPYmplY3QodmFsKSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsKSB7XG4gICAgICAgICAgICBpZiAoY29udGFpbnModmFsW2tleV0sIHNlYXJjaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaCkgPiAtMVxuICAgIH1cbn1cblxuLyoqXG4gKiAgVGVzdCB3aGV0aGVyIGEgc3RyaW5nIGlzIGluIHF1b3RlcyxcbiAqICBpZiB5ZXMgcmV0dXJuIHN0cmlwcGVkIHN0cmluZ1xuICovXG5mdW5jdGlvbiBzdHJpcFF1b3RlcyAoc3RyKSB7XG4gICAgaWYgKFFVT1RFX1JFLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gc3RyLnNsaWNlKDEsIC0xKVxuICAgIH1cbn0iLCIvLyBzdHJpbmcgLT4gRE9NIGNvbnZlcnNpb25cbi8vIHdyYXBwZXJzIG9yaWdpbmFsbHkgZnJvbSBqUXVlcnksIHNjb29wZWQgZnJvbSBjb21wb25lbnQvZG9taWZ5XG52YXIgbWFwID0ge1xuICAgIGxlZ2VuZCAgIDogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICAgdHIgICAgICAgOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgICBjb2wgICAgICA6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAgIF9kZWZhdWx0IDogWzAsICcnLCAnJ11cbn1cblxubWFwLnRkID1cbm1hcC50aCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddXG5cbm1hcC5vcHRpb24gPVxubWFwLm9wdGdyb3VwID0gWzEsICc8c2VsZWN0IG11bHRpcGxlPVwibXVsdGlwbGVcIj4nLCAnPC9zZWxlY3Q+J11cblxubWFwLnRoZWFkID1cbm1hcC50Ym9keSA9XG5tYXAuY29sZ3JvdXAgPVxubWFwLmNhcHRpb24gPVxubWFwLnRmb290ID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J11cblxubWFwLnRleHQgPVxubWFwLmNpcmNsZSA9XG5tYXAuZWxsaXBzZSA9XG5tYXAubGluZSA9XG5tYXAucGF0aCA9XG5tYXAucG9seWdvbiA9XG5tYXAucG9seWxpbmUgPVxubWFwLnJlY3QgPSBbMSwgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIj4nLCc8L3N2Zz4nXVxuXG52YXIgVEFHX1JFID0gLzwoW1xcdzpdKykvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRlbXBsYXRlU3RyaW5nKSB7XG4gICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICAgIG0gPSBUQUdfUkUuZXhlYyh0ZW1wbGF0ZVN0cmluZylcbiAgICAvLyB0ZXh0IG9ubHlcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZW1wbGF0ZVN0cmluZykpXG4gICAgICAgIHJldHVybiBmcmFnXG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IG1bMV0sXG4gICAgICAgIHdyYXAgPSBtYXBbdGFnXSB8fCBtYXAuX2RlZmF1bHQsXG4gICAgICAgIGRlcHRoID0gd3JhcFswXSxcbiAgICAgICAgcHJlZml4ID0gd3JhcFsxXSxcbiAgICAgICAgc3VmZml4ID0gd3JhcFsyXSxcbiAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgICBub2RlLmlubmVySFRNTCA9IHByZWZpeCArIHRlbXBsYXRlU3RyaW5nLnRyaW0oKSArIHN1ZmZpeFxuICAgIHdoaWxlIChkZXB0aC0tKSBub2RlID0gbm9kZS5sYXN0Q2hpbGRcblxuICAgIC8vIG9uZSBlbGVtZW50XG4gICAgaWYgKG5vZGUuZmlyc3RDaGlsZCA9PT0gbm9kZS5sYXN0Q2hpbGQpIHtcbiAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlLmZpcnN0Q2hpbGQpXG4gICAgICAgIHJldHVybiBmcmFnXG4gICAgfVxuXG4gICAgLy8gbXVsdGlwbGUgbm9kZXMsIHJldHVybiBhIGZyYWdtZW50XG4gICAgdmFyIGNoaWxkXG4gICAgLyoganNoaW50IGJvc3M6IHRydWUgKi9cbiAgICB3aGlsZSAoY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZyYWdcbn0iLCJ2YXIgY29uZmlnICAgICAgPSByZXF1aXJlKCcuL2NvbmZpZycpLFxuICAgIFZpZXdNb2RlbCAgID0gcmVxdWlyZSgnLi92aWV3bW9kZWwnKSxcbiAgICB1dGlscyAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMnKSxcbiAgICBtYWtlSGFzaCAgICA9IHV0aWxzLmhhc2gsXG4gICAgYXNzZXRUeXBlcyAgPSBbJ2RpcmVjdGl2ZScsICdmaWx0ZXInLCAncGFydGlhbCcsICdlZmZlY3QnLCAnY29tcG9uZW50J10sXG4gICAgLy8gSW50ZXJuYWwgbW9kdWxlcyB0aGF0IGFyZSBleHBvc2VkIGZvciBwbHVnaW5zXG4gICAgcGx1Z2luQVBJICAgPSB7XG4gICAgICAgIHV0aWxzOiB1dGlscyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHRyYW5zaXRpb246IHJlcXVpcmUoJy4vdHJhbnNpdGlvbicpLFxuICAgICAgICBvYnNlcnZlcjogcmVxdWlyZSgnLi9vYnNlcnZlcicpXG4gICAgfVxuXG5WaWV3TW9kZWwub3B0aW9ucyA9IGNvbmZpZy5nbG9iYWxBc3NldHMgPSB7XG4gICAgZGlyZWN0aXZlcyAgOiByZXF1aXJlKCcuL2RpcmVjdGl2ZXMnKSxcbiAgICBmaWx0ZXJzICAgICA6IHJlcXVpcmUoJy4vZmlsdGVycycpLFxuICAgIHBhcnRpYWxzICAgIDogbWFrZUhhc2goKSxcbiAgICBlZmZlY3RzICAgICA6IG1ha2VIYXNoKCksXG4gICAgY29tcG9uZW50cyAgOiBtYWtlSGFzaCgpXG59XG5cbi8qKlxuICogIEV4cG9zZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kc1xuICovXG5hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWaWV3TW9kZWxbdHlwZV0gPSBmdW5jdGlvbiAoaWQsIHZhbHVlKSB7XG4gICAgICAgIHZhciBoYXNoID0gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddXG4gICAgICAgIGlmICghaGFzaCkge1xuICAgICAgICAgICAgaGFzaCA9IHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXSA9IG1ha2VIYXNoKClcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gaGFzaFtpZF1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdwYXJ0aWFsJykge1xuICAgICAgICAgICAgdmFsdWUgPSB1dGlscy5wYXJzZVRlbXBsYXRlT3B0aW9uKHZhbHVlKVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHV0aWxzLnRvQ29uc3RydWN0b3IodmFsdWUpXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ZpbHRlcicpIHtcbiAgICAgICAgICAgIHV0aWxzLmNoZWNrRmlsdGVyKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIGhhc2hbaWRdID0gdmFsdWVcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG59KVxuXG4vKipcbiAqICBTZXQgY29uZmlnIG9wdGlvbnNcbiAqL1xuVmlld01vZGVsLmNvbmZpZyA9IGZ1bmN0aW9uIChvcHRzLCB2YWwpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ1tvcHRzXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnW29wdHNdID0gdmFsXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB1dGlscy5leHRlbmQoY29uZmlnLCBvcHRzKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqICBFeHBvc2UgYW4gaW50ZXJmYWNlIGZvciBwbHVnaW5zXG4gKi9cblZpZXdNb2RlbC51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbHVnaW4gPSByZXF1aXJlKHBsdWdpbilcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdXRpbHMud2FybignQ2Fubm90IGZpbmQgcGx1Z2luOiAnICsgcGx1Z2luKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgIGFyZ3MudW5zaGlmdCh0aGlzKVxuXG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogIEV4cG9zZSBpbnRlcm5hbCBtb2R1bGVzIGZvciBwbHVnaW5zXG4gKi9cblZpZXdNb2RlbC5yZXF1aXJlID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgIHJldHVybiBwbHVnaW5BUElbbW9kdWxlXVxufVxuXG5WaWV3TW9kZWwuZXh0ZW5kID0gZXh0ZW5kXG5WaWV3TW9kZWwubmV4dFRpY2sgPSB1dGlscy5uZXh0VGlja1xuXG4vKipcbiAqICBFeHBvc2UgdGhlIG1haW4gVmlld01vZGVsIGNsYXNzXG4gKiAgYW5kIGFkZCBleHRlbmQgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAob3B0aW9ucykge1xuXG4gICAgdmFyIFBhcmVudFZNID0gdGhpc1xuXG4gICAgLy8gZXh0ZW5kIGRhdGEgb3B0aW9ucyBuZWVkIHRvIGJlIGNvcGllZFxuICAgIC8vIG9uIGluc3RhbnRpYXRpb25cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdERhdGEgPSBvcHRpb25zLmRhdGFcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuZGF0YVxuICAgIH1cblxuICAgIC8vIGluaGVyaXQgb3B0aW9uc1xuICAgIC8vIGJ1dCBvbmx5IHdoZW4gdGhlIHN1cGVyIGNsYXNzIGlzIG5vdCB0aGUgbmF0aXZlIFZ1ZS5cbiAgICBpZiAoUGFyZW50Vk0gIT09IFZpZXdNb2RlbCkge1xuICAgICAgICBvcHRpb25zID0gaW5oZXJpdE9wdGlvbnMob3B0aW9ucywgUGFyZW50Vk0ub3B0aW9ucywgdHJ1ZSlcbiAgICB9XG4gICAgdXRpbHMucHJvY2Vzc09wdGlvbnMob3B0aW9ucylcblxuICAgIHZhciBFeHRlbmRlZFZNID0gZnVuY3Rpb24gKG9wdHMsIGFzUGFyZW50KSB7XG4gICAgICAgIGlmICghYXNQYXJlbnQpIHtcbiAgICAgICAgICAgIG9wdHMgPSBpbmhlcml0T3B0aW9ucyhvcHRzLCBvcHRpb25zLCB0cnVlKVxuICAgICAgICB9XG4gICAgICAgIFBhcmVudFZNLmNhbGwodGhpcywgb3B0cywgdHJ1ZSlcbiAgICB9XG5cbiAgICAvLyBpbmhlcml0IHByb3RvdHlwZSBwcm9wc1xuICAgIHZhciBwcm90byA9IEV4dGVuZGVkVk0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQYXJlbnRWTS5wcm90b3R5cGUpXG4gICAgdXRpbHMuZGVmUHJvdGVjdGVkKHByb3RvLCAnY29uc3RydWN0b3InLCBFeHRlbmRlZFZNKVxuXG4gICAgLy8gYWxsb3cgZXh0ZW5kZWQgVk0gdG8gYmUgZnVydGhlciBleHRlbmRlZFxuICAgIEV4dGVuZGVkVk0uZXh0ZW5kICA9IGV4dGVuZFxuICAgIEV4dGVuZGVkVk0uc3VwZXIgICA9IFBhcmVudFZNXG4gICAgRXh0ZW5kZWRWTS5vcHRpb25zID0gb3B0aW9uc1xuXG4gICAgLy8gYWxsb3cgZXh0ZW5kZWQgVk0gdG8gYWRkIGl0cyBvd24gYXNzZXRzXG4gICAgYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIEV4dGVuZGVkVk1bdHlwZV0gPSBWaWV3TW9kZWxbdHlwZV1cbiAgICB9KVxuXG4gICAgLy8gYWxsb3cgZXh0ZW5kZWQgVk0gdG8gdXNlIHBsdWdpbnNcbiAgICBFeHRlbmRlZFZNLnVzZSAgICAgPSBWaWV3TW9kZWwudXNlXG4gICAgRXh0ZW5kZWRWTS5yZXF1aXJlID0gVmlld01vZGVsLnJlcXVpcmVcblxuICAgIHJldHVybiBFeHRlbmRlZFZNXG59XG5cbi8qKlxuICogIEluaGVyaXQgb3B0aW9uc1xuICpcbiAqICBGb3Igb3B0aW9ucyBzdWNoIGFzIGBkYXRhYCwgYHZtc2AsIGBkaXJlY3RpdmVzYCwgJ3BhcnRpYWxzJyxcbiAqICB0aGV5IHNob3VsZCBiZSBmdXJ0aGVyIGV4dGVuZGVkLiBIb3dldmVyIGV4dGVuZGluZyBzaG91bGQgb25seVxuICogIGJlIGRvbmUgYXQgdG9wIGxldmVsLlxuICogIFxuICogIGBwcm90b2AgaXMgYW4gZXhjZXB0aW9uIGJlY2F1c2UgaXQncyBoYW5kbGVkIGRpcmVjdGx5IG9uIHRoZVxuICogIHByb3RvdHlwZS5cbiAqXG4gKiAgYGVsYCBpcyBhbiBleGNlcHRpb24gYmVjYXVzZSBpdCdzIG5vdCBhbGxvd2VkIGFzIGFuXG4gKiAgZXh0ZW5zaW9uIG9wdGlvbiwgYnV0IG9ubHkgYXMgYW4gaW5zdGFuY2Ugb3B0aW9uLlxuICovXG5mdW5jdGlvbiBpbmhlcml0T3B0aW9ucyAoY2hpbGQsIHBhcmVudCwgdG9wTGV2ZWwpIHtcbiAgICBjaGlsZCA9IGNoaWxkIHx8IHt9XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybiBjaGlsZFxuICAgIGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2VsJykgY29udGludWVcbiAgICAgICAgdmFyIHZhbCA9IGNoaWxkW2tleV0sXG4gICAgICAgICAgICBwYXJlbnRWYWwgPSBwYXJlbnRba2V5XVxuICAgICAgICBpZiAodG9wTGV2ZWwgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwYXJlbnRWYWwpIHtcbiAgICAgICAgICAgIC8vIG1lcmdlIGhvb2sgZnVuY3Rpb25zIGludG8gYW4gYXJyYXlcbiAgICAgICAgICAgIGNoaWxkW2tleV0gPSBbdmFsXVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyZW50VmFsKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkW2tleV0gPSBjaGlsZFtrZXldLmNvbmNhdChwYXJlbnRWYWwpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoaWxkW2tleV0ucHVzaChwYXJlbnRWYWwpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0b3BMZXZlbCAmJlxuICAgICAgICAgICAgKHV0aWxzLmlzVHJ1ZU9iamVjdCh2YWwpIHx8IHV0aWxzLmlzVHJ1ZU9iamVjdChwYXJlbnRWYWwpKVxuICAgICAgICAgICAgJiYgIShwYXJlbnRWYWwgaW5zdGFuY2VvZiBWaWV3TW9kZWwpXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gbWVyZ2UgdG9wbGV2ZWwgb2JqZWN0IG9wdGlvbnNcbiAgICAgICAgICAgIGNoaWxkW2tleV0gPSBpbmhlcml0T3B0aW9ucyh2YWwsIHBhcmVudFZhbClcbiAgICAgICAgfSBlbHNlIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gaW5oZXJpdCBpZiBjaGlsZCBkb2Vzbid0IG92ZXJyaWRlXG4gICAgICAgICAgICBjaGlsZFtrZXldID0gcGFyZW50VmFsXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld01vZGVsIiwiLyoganNoaW50IHByb3RvOnRydWUgKi9cblxudmFyIEVtaXR0ZXIgID0gcmVxdWlyZSgnLi9lbWl0dGVyJyksXG4gICAgdXRpbHMgICAgPSByZXF1aXJlKCcuL3V0aWxzJyksXG4gICAgLy8gY2FjaGUgbWV0aG9kc1xuICAgIGRlZiAgICAgID0gdXRpbHMuZGVmUHJvdGVjdGVkLFxuICAgIGlzT2JqZWN0ID0gdXRpbHMuaXNPYmplY3QsXG4gICAgaXNBcnJheSAgPSBBcnJheS5pc0FycmF5LFxuICAgIGhhc093biAgID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBvRGVmICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBzbGljZSAgICA9IFtdLnNsaWNlLFxuICAgIC8vIGZpeCBmb3IgSUUgKyBfX3Byb3RvX18gcHJvYmxlbVxuICAgIC8vIGRlZmluZSBtZXRob2RzIGFzIGluZW51bWVyYWJsZSBpZiBfX3Byb3RvX18gaXMgcHJlc2VudCxcbiAgICAvLyBvdGhlcndpc2UgZW51bWVyYWJsZSBzbyB3ZSBjYW4gbG9vcCB0aHJvdWdoIGFuZCBtYW51YWxseVxuICAgIC8vIGF0dGFjaCB0byBhcnJheSBpbnN0YW5jZXNcbiAgICBoYXNQcm90byA9ICh7fSkuX19wcm90b19fXG5cbi8vIEFycmF5IE11dGF0aW9uIEhhbmRsZXJzICYgQXVnbWVudGF0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gVGhlIHByb3h5IHByb3RvdHlwZSB0byByZXBsYWNlIHRoZSBfX3Byb3RvX18gb2Zcbi8vIGFuIG9ic2VydmVkIGFycmF5XG52YXIgQXJyYXlQcm94eSA9IE9iamVjdC5jcmVhdGUoQXJyYXkucHJvdG90eXBlKVxuXG4vLyBpbnRlcmNlcHQgbXV0YXRpb24gbWV0aG9kc1xuO1tcbiAgICAncHVzaCcsXG4gICAgJ3BvcCcsXG4gICAgJ3NoaWZ0JyxcbiAgICAndW5zaGlmdCcsXG4gICAgJ3NwbGljZScsXG4gICAgJ3NvcnQnLFxuICAgICdyZXZlcnNlJ1xuXS5mb3JFYWNoKHdhdGNoTXV0YXRpb24pXG5cbi8vIEF1Z21lbnQgdGhlIEFycmF5UHJveHkgd2l0aCBjb252ZW5pZW5jZSBtZXRob2RzXG5kZWYoQXJyYXlQcm94eSwgJyRzZXQnLCBmdW5jdGlvbiAoaW5kZXgsIGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEsIGRhdGEpWzBdXG59LCAhaGFzUHJvdG8pXG5cbmRlZihBcnJheVByb3h5LCAnJHJlbW92ZScsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICAgIGluZGV4ID0gdGhpcy5pbmRleE9mKGluZGV4KVxuICAgIH1cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEpWzBdXG4gICAgfVxufSwgIWhhc1Byb3RvKVxuXG4vKipcbiAqICBJbnRlcmNlcCBhIG11dGF0aW9uIGV2ZW50IHNvIHdlIGNhbiBlbWl0IHRoZSBtdXRhdGlvbiBpbmZvLlxuICogIHdlIGFsc28gYW5hbHl6ZSB3aGF0IGVsZW1lbnRzIGFyZSBhZGRlZC9yZW1vdmVkIGFuZCBsaW5rL3VubGlua1xuICogIHRoZW0gd2l0aCB0aGUgcGFyZW50IEFycmF5LlxuICovXG5mdW5jdGlvbiB3YXRjaE11dGF0aW9uIChtZXRob2QpIHtcbiAgICBkZWYoQXJyYXlQcm94eSwgbWV0aG9kLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICByZXN1bHQgPSBBcnJheS5wcm90b3R5cGVbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmdzKSxcbiAgICAgICAgICAgIGluc2VydGVkLCByZW1vdmVkXG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIG5ldyAvIHJlbW92ZWQgZWxlbWVudHNcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3B1c2gnIHx8IG1ldGhvZCA9PT0gJ3Vuc2hpZnQnKSB7XG4gICAgICAgICAgICBpbnNlcnRlZCA9IGFyZ3NcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdwb3AnIHx8IG1ldGhvZCA9PT0gJ3NoaWZ0Jykge1xuICAgICAgICAgICAgcmVtb3ZlZCA9IFtyZXN1bHRdXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAnc3BsaWNlJykge1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpXG4gICAgICAgICAgICByZW1vdmVkID0gcmVzdWx0XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGxpbmsgJiB1bmxpbmtcbiAgICAgICAgbGlua0FycmF5RWxlbWVudHModGhpcywgaW5zZXJ0ZWQpXG4gICAgICAgIHVubGlua0FycmF5RWxlbWVudHModGhpcywgcmVtb3ZlZClcblxuICAgICAgICAvLyBlbWl0IHRoZSBtdXRhdGlvbiBldmVudFxuICAgICAgICB0aGlzLl9fZW1pdHRlcl9fLmVtaXQoJ211dGF0ZScsICcnLCB0aGlzLCB7XG4gICAgICAgICAgICBtZXRob2QgICA6IG1ldGhvZCxcbiAgICAgICAgICAgIGFyZ3MgICAgIDogYXJncyxcbiAgICAgICAgICAgIHJlc3VsdCAgIDogcmVzdWx0LFxuICAgICAgICAgICAgaW5zZXJ0ZWQgOiBpbnNlcnRlZCxcbiAgICAgICAgICAgIHJlbW92ZWQgIDogcmVtb3ZlZFxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfSwgIWhhc1Byb3RvKVxufVxuXG4vKipcbiAqICBMaW5rIG5ldyBlbGVtZW50cyB0byBhbiBBcnJheSwgc28gd2hlbiB0aGV5IGNoYW5nZVxuICogIGFuZCBlbWl0IGV2ZW50cywgdGhlIG93bmVyIEFycmF5IGNhbiBiZSBub3RpZmllZC5cbiAqL1xuZnVuY3Rpb24gbGlua0FycmF5RWxlbWVudHMgKGFyciwgaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMpIHtcbiAgICAgICAgdmFyIGkgPSBpdGVtcy5sZW5ndGgsIGl0ZW0sIG93bmVyc1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNbaV1cbiAgICAgICAgICAgIGlmIChpc1dhdGNoYWJsZShpdGVtKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG9iamVjdCBpcyBub3QgY29udmVydGVkIGZvciBvYnNlcnZpbmdcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGl0Li4uXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtLl9fZW1pdHRlcl9fKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnZlcnQoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2goaXRlbSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3duZXJzID0gaXRlbS5fX2VtaXR0ZXJfXy5vd25lcnNcbiAgICAgICAgICAgICAgICBpZiAob3duZXJzLmluZGV4T2YoYXJyKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3duZXJzLnB1c2goYXJyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiAgVW5saW5rIHJlbW92ZWQgZWxlbWVudHMgZnJvbSB0aGUgZXgtb3duZXIgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVubGlua0FycmF5RWxlbWVudHMgKGFyciwgaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMpIHtcbiAgICAgICAgdmFyIGkgPSBpdGVtcy5sZW5ndGgsIGl0ZW1cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldXG4gICAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLl9fZW1pdHRlcl9fKSB7XG4gICAgICAgICAgICAgICAgdmFyIG93bmVycyA9IGl0ZW0uX19lbWl0dGVyX18ub3duZXJzXG4gICAgICAgICAgICAgICAgaWYgKG93bmVycykgb3duZXJzLnNwbGljZShvd25lcnMuaW5kZXhPZihhcnIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBPYmplY3QgYWRkL2RlbGV0ZSBrZXkgYXVnbWVudGF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBPYmpQcm94eSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LnByb3RvdHlwZSlcblxuZGVmKE9ialByb3h5LCAnJGFkZCcsIGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgIGlmIChoYXNPd24uY2FsbCh0aGlzLCBrZXkpKSByZXR1cm5cbiAgICB0aGlzW2tleV0gPSB2YWxcbiAgICBjb252ZXJ0S2V5KHRoaXMsIGtleSwgdHJ1ZSlcbn0sICFoYXNQcm90bylcblxuZGVmKE9ialByb3h5LCAnJGRlbGV0ZScsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIShoYXNPd24uY2FsbCh0aGlzLCBrZXkpKSkgcmV0dXJuXG4gICAgLy8gdHJpZ2dlciBzZXQgZXZlbnRzXG4gICAgdGhpc1trZXldID0gdW5kZWZpbmVkXG4gICAgZGVsZXRlIHRoaXNba2V5XVxuICAgIHRoaXMuX19lbWl0dGVyX18uZW1pdCgnZGVsZXRlJywga2V5KVxufSwgIWhhc1Byb3RvKVxuXG4vLyBXYXRjaCBIZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogIENoZWNrIGlmIGEgdmFsdWUgaXMgd2F0Y2hhYmxlXG4gKi9cbmZ1bmN0aW9uIGlzV2F0Y2hhYmxlIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICYmICFvYmouJGNvbXBpbGVyXG59XG5cbi8qKlxuICogIENvbnZlcnQgYW4gT2JqZWN0L0FycmF5IHRvIGdpdmUgaXQgYSBjaGFuZ2UgZW1pdHRlci5cbiAqL1xuZnVuY3Rpb24gY29udmVydCAob2JqKSB7XG4gICAgaWYgKG9iai5fX2VtaXR0ZXJfXykgcmV0dXJuIHRydWVcbiAgICB2YXIgZW1pdHRlciA9IG5ldyBFbWl0dGVyKClcbiAgICBkZWYob2JqLCAnX19lbWl0dGVyX18nLCBlbWl0dGVyKVxuICAgIGVtaXR0ZXJcbiAgICAgICAgLm9uKCdzZXQnLCBmdW5jdGlvbiAoa2V5LCB2YWwsIHByb3BhZ2F0ZSkge1xuICAgICAgICAgICAgaWYgKHByb3BhZ2F0ZSkgcHJvcGFnYXRlQ2hhbmdlKG9iailcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtdXRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwcm9wYWdhdGVDaGFuZ2Uob2JqKVxuICAgICAgICB9KVxuICAgIGVtaXR0ZXIudmFsdWVzID0gdXRpbHMuaGFzaCgpXG4gICAgZW1pdHRlci5vd25lcnMgPSBbXVxuICAgIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqICBQcm9wYWdhdGUgYW4gYXJyYXkgZWxlbWVudCdzIGNoYW5nZSB0byBpdHMgb3duZXIgYXJyYXlzXG4gKi9cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZSAob2JqKSB7XG4gICAgdmFyIG93bmVycyA9IG9iai5fX2VtaXR0ZXJfXy5vd25lcnMsXG4gICAgICAgIGkgPSBvd25lcnMubGVuZ3RoXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvd25lcnNbaV0uX19lbWl0dGVyX18uZW1pdCgnc2V0JywgJycsICcnLCB0cnVlKVxuICAgIH1cbn1cblxuLyoqXG4gKiAgV2F0Y2ggdGFyZ2V0IGJhc2VkIG9uIGl0cyB0eXBlXG4gKi9cbmZ1bmN0aW9uIHdhdGNoIChvYmopIHtcbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgIHdhdGNoQXJyYXkob2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdhdGNoT2JqZWN0KG9iailcbiAgICB9XG59XG5cbi8qKlxuICogIEF1Z21lbnQgdGFyZ2V0IG9iamVjdHMgd2l0aCBtb2RpZmllZFxuICogIG1ldGhvZHNcbiAqL1xuZnVuY3Rpb24gYXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgICAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyY1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgICAgICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogIFdhdGNoIGFuIE9iamVjdCwgcmVjdXJzaXZlLlxuICovXG5mdW5jdGlvbiB3YXRjaE9iamVjdCAob2JqKSB7XG4gICAgYXVnbWVudChvYmosIE9ialByb3h5KVxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgY29udmVydEtleShvYmosIGtleSlcbiAgICB9XG59XG5cbi8qKlxuICogIFdhdGNoIGFuIEFycmF5LCBvdmVybG9hZCBtdXRhdGlvbiBtZXRob2RzXG4gKiAgYW5kIGFkZCBhdWdtZW50YXRpb25zIGJ5IGludGVyY2VwdGluZyB0aGUgcHJvdG90eXBlIGNoYWluXG4gKi9cbmZ1bmN0aW9uIHdhdGNoQXJyYXkgKGFycikge1xuICAgIGF1Z21lbnQoYXJyLCBBcnJheVByb3h5KVxuICAgIGxpbmtBcnJheUVsZW1lbnRzKGFyciwgYXJyKVxufVxuXG4vKipcbiAqICBEZWZpbmUgYWNjZXNzb3JzIGZvciBhIHByb3BlcnR5IG9uIGFuIE9iamVjdFxuICogIHNvIGl0IGVtaXRzIGdldC9zZXQgZXZlbnRzLlxuICogIFRoZW4gd2F0Y2ggdGhlIHZhbHVlIGl0c2VsZi5cbiAqL1xuZnVuY3Rpb24gY29udmVydEtleSAob2JqLCBrZXksIHByb3BhZ2F0ZSkge1xuICAgIHZhciBrZXlQcmVmaXggPSBrZXkuY2hhckF0KDApXG4gICAgaWYgKGtleVByZWZpeCA9PT0gJyQnIHx8IGtleVByZWZpeCA9PT0gJ18nKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyBlbWl0IHNldCBvbiBiaW5kXG4gICAgLy8gdGhpcyBtZWFucyB3aGVuIGFuIG9iamVjdCBpcyBvYnNlcnZlZCBpdCB3aWxsIGVtaXRcbiAgICAvLyBhIGZpcnN0IGJhdGNoIG9mIHNldCBldmVudHMuXG4gICAgdmFyIGVtaXR0ZXIgPSBvYmouX19lbWl0dGVyX18sXG4gICAgICAgIHZhbHVlcyAgPSBlbWl0dGVyLnZhbHVlc1xuXG4gICAgaW5pdChvYmpba2V5XSwgcHJvcGFnYXRlKVxuXG4gICAgb0RlZihvYmosIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzW2tleV1cbiAgICAgICAgICAgIC8vIG9ubHkgZW1pdCBnZXQgb24gdGlwIHZhbHVlc1xuICAgICAgICAgICAgaWYgKHB1Yi5zaG91bGRHZXQpIHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ2dldCcsIGtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdWYWwpIHtcbiAgICAgICAgICAgIHZhciBvbGRWYWwgPSB2YWx1ZXNba2V5XVxuICAgICAgICAgICAgdW5vYnNlcnZlKG9sZFZhbCwga2V5LCBlbWl0dGVyKVxuICAgICAgICAgICAgY29weVBhdGhzKG5ld1ZhbCwgb2xkVmFsKVxuICAgICAgICAgICAgLy8gYW4gaW1tZWRpYXRlIHByb3BlcnR5IHNob3VsZCBub3RpZnkgaXRzIHBhcmVudFxuICAgICAgICAgICAgLy8gdG8gZW1pdCBzZXQgZm9yIGl0c2VsZiB0b29cbiAgICAgICAgICAgIGluaXQobmV3VmFsLCB0cnVlKVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGluaXQgKHZhbCwgcHJvcGFnYXRlKSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gdmFsXG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnc2V0Jywga2V5LCB2YWwsIHByb3BhZ2F0ZSlcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdzZXQnLCBrZXkgKyAnLmxlbmd0aCcsIHZhbC5sZW5ndGgsIHByb3BhZ2F0ZSlcbiAgICAgICAgfVxuICAgICAgICBvYnNlcnZlKHZhbCwga2V5LCBlbWl0dGVyKVxuICAgIH1cbn1cblxuLyoqXG4gKiAgV2hlbiBhIHZhbHVlIHRoYXQgaXMgYWxyZWFkeSBjb252ZXJ0ZWQgaXNcbiAqICBvYnNlcnZlZCBhZ2FpbiBieSBhbm90aGVyIG9ic2VydmVyLCB3ZSBjYW4gc2tpcFxuICogIHRoZSB3YXRjaCBjb252ZXJzaW9uIGFuZCBzaW1wbHkgZW1pdCBzZXQgZXZlbnQgZm9yXG4gKiAgYWxsIG9mIGl0cyBwcm9wZXJ0aWVzLlxuICovXG5mdW5jdGlvbiBlbWl0U2V0IChvYmopIHtcbiAgICB2YXIgZW1pdHRlciA9IG9iaiAmJiBvYmouX19lbWl0dGVyX19cbiAgICBpZiAoIWVtaXR0ZXIpIHJldHVyblxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgZW1pdHRlci5lbWl0KCdzZXQnLCAnbGVuZ3RoJywgb2JqLmxlbmd0aClcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIga2V5LCB2YWxcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICB2YWwgPSBvYmpba2V5XVxuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdzZXQnLCBrZXksIHZhbClcbiAgICAgICAgICAgIGVtaXRTZXQodmFsKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqICBNYWtlIHN1cmUgYWxsIHRoZSBwYXRocyBpbiBhbiBvbGQgb2JqZWN0IGV4aXN0c1xuICogIGluIGEgbmV3IG9iamVjdC5cbiAqICBTbyB3aGVuIGFuIG9iamVjdCBjaGFuZ2VzLCBhbGwgbWlzc2luZyBrZXlzIHdpbGxcbiAqICBlbWl0IGEgc2V0IGV2ZW50IHdpdGggdW5kZWZpbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBjb3B5UGF0aHMgKG5ld09iaiwgb2xkT2JqKSB7XG4gICAgaWYgKCFpc09iamVjdChuZXdPYmopIHx8ICFpc09iamVjdChvbGRPYmopKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcGF0aCwgb2xkVmFsLCBuZXdWYWxcbiAgICBmb3IgKHBhdGggaW4gb2xkT2JqKSB7XG4gICAgICAgIGlmICghKGhhc093bi5jYWxsKG5ld09iaiwgcGF0aCkpKSB7XG4gICAgICAgICAgICBvbGRWYWwgPSBvbGRPYmpbcGF0aF1cbiAgICAgICAgICAgIGlmIChpc0FycmF5KG9sZFZhbCkpIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpbcGF0aF0gPSBbXVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChvbGRWYWwpKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsID0gbmV3T2JqW3BhdGhdID0ge31cbiAgICAgICAgICAgICAgICBjb3B5UGF0aHMobmV3VmFsLCBvbGRWYWwpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld09ialtwYXRoXSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqICB3YWxrIGFsb25nIGEgcGF0aCBhbmQgbWFrZSBzdXJlIGl0IGNhbiBiZSBhY2Nlc3NlZFxuICogIGFuZCBlbnVtZXJhdGVkIGluIHRoYXQgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGVuc3VyZVBhdGggKG9iaiwga2V5KSB7XG4gICAgdmFyIHBhdGggPSBrZXkuc3BsaXQoJy4nKSwgc2VjXG4gICAgZm9yICh2YXIgaSA9IDAsIGQgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPCBkOyBpKyspIHtcbiAgICAgICAgc2VjID0gcGF0aFtpXVxuICAgICAgICBpZiAoIW9ialtzZWNdKSB7XG4gICAgICAgICAgICBvYmpbc2VjXSA9IHt9XG4gICAgICAgICAgICBpZiAob2JqLl9fZW1pdHRlcl9fKSBjb252ZXJ0S2V5KG9iaiwgc2VjKVxuICAgICAgICB9XG4gICAgICAgIG9iaiA9IG9ialtzZWNdXG4gICAgfVxuICAgIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgICAgIHNlYyA9IHBhdGhbaV1cbiAgICAgICAgaWYgKCEoaGFzT3duLmNhbGwob2JqLCBzZWMpKSkge1xuICAgICAgICAgICAgb2JqW3NlY10gPSB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChvYmouX19lbWl0dGVyX18pIGNvbnZlcnRLZXkob2JqLCBzZWMpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIE1haW4gQVBJIE1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiAgT2JzZXJ2ZSBhbiBvYmplY3Qgd2l0aCBhIGdpdmVuIHBhdGgsXG4gKiAgYW5kIHByb3h5IGdldC9zZXQvbXV0YXRlIGV2ZW50cyB0byB0aGUgcHJvdmlkZWQgb2JzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKG9iaiwgcmF3UGF0aCwgb2JzZXJ2ZXIpIHtcblxuICAgIGlmICghaXNXYXRjaGFibGUob2JqKSkgcmV0dXJuXG5cbiAgICB2YXIgcGF0aCA9IHJhd1BhdGggPyByYXdQYXRoICsgJy4nIDogJycsXG4gICAgICAgIGFscmVhZHlDb252ZXJ0ZWQgPSBjb252ZXJ0KG9iaiksXG4gICAgICAgIGVtaXR0ZXIgPSBvYmouX19lbWl0dGVyX19cblxuICAgIC8vIHNldHVwIHByb3h5IGxpc3RlbmVycyBvbiB0aGUgcGFyZW50IG9ic2VydmVyLlxuICAgIC8vIHdlIG5lZWQgdG8ga2VlcCByZWZlcmVuY2UgdG8gdGhlbSBzbyB0aGF0IHRoZXlcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZCB3aGVuIHRoZSBvYmplY3QgaXMgdW4tb2JzZXJ2ZWQuXG4gICAgb2JzZXJ2ZXIucHJveGllcyA9IG9ic2VydmVyLnByb3hpZXMgfHwge31cbiAgICB2YXIgcHJveGllcyA9IG9ic2VydmVyLnByb3hpZXNbcGF0aF0gPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZW1pdCgnZ2V0JywgcGF0aCArIGtleSlcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWwsIHByb3BhZ2F0ZSkge1xuICAgICAgICAgICAgaWYgKGtleSkgb2JzZXJ2ZXIuZW1pdCgnc2V0JywgcGF0aCArIGtleSwgdmFsKVxuICAgICAgICAgICAgLy8gYWxzbyBub3RpZnkgb2JzZXJ2ZXIgdGhhdCB0aGUgb2JqZWN0IGl0c2VsZiBjaGFuZ2VkXG4gICAgICAgICAgICAvLyBidXQgb25seSBkbyBzbyB3aGVuIGl0J3MgYSBpbW1lZGlhdGUgcHJvcGVydHkuIHRoaXNcbiAgICAgICAgICAgIC8vIGF2b2lkcyBkdXBsaWNhdGUgZXZlbnQgZmlyaW5nLlxuICAgICAgICAgICAgaWYgKHJhd1BhdGggJiYgcHJvcGFnYXRlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZW1pdCgnc2V0JywgcmF3UGF0aCwgb2JqLCB0cnVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtdXRhdGU6IGZ1bmN0aW9uIChrZXksIHZhbCwgbXV0YXRpb24pIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBBcnJheSBpcyBhIHJvb3QgdmFsdWVcbiAgICAgICAgICAgIC8vIHRoZSBrZXkgd2lsbCBiZSBudWxsXG4gICAgICAgICAgICB2YXIgZml4ZWRQYXRoID0ga2V5ID8gcGF0aCArIGtleSA6IHJhd1BhdGhcbiAgICAgICAgICAgIG9ic2VydmVyLmVtaXQoJ211dGF0ZScsIGZpeGVkUGF0aCwgdmFsLCBtdXRhdGlvbilcbiAgICAgICAgICAgIC8vIGFsc28gZW1pdCBzZXQgZm9yIEFycmF5J3MgbGVuZ3RoIHdoZW4gaXQgbXV0YXRlc1xuICAgICAgICAgICAgdmFyIG0gPSBtdXRhdGlvbi5tZXRob2RcbiAgICAgICAgICAgIGlmIChtICE9PSAnc29ydCcgJiYgbSAhPT0gJ3JldmVyc2UnKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZW1pdCgnc2V0JywgZml4ZWRQYXRoICsgJy5sZW5ndGgnLCB2YWwubGVuZ3RoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXR0YWNoIHRoZSBsaXN0ZW5lcnMgdG8gdGhlIGNoaWxkIG9ic2VydmVyLlxuICAgIC8vIG5vdyBhbGwgdGhlIGV2ZW50cyB3aWxsIHByb3BhZ2F0ZSB1cHdhcmRzLlxuICAgIGVtaXR0ZXJcbiAgICAgICAgLm9uKCdnZXQnLCBwcm94aWVzLmdldClcbiAgICAgICAgLm9uKCdzZXQnLCBwcm94aWVzLnNldClcbiAgICAgICAgLm9uKCdtdXRhdGUnLCBwcm94aWVzLm11dGF0ZSlcblxuICAgIGlmIChhbHJlYWR5Q29udmVydGVkKSB7XG4gICAgICAgIC8vIGZvciBvYmplY3RzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gY29udmVydGVkLFxuICAgICAgICAvLyBlbWl0IHNldCBldmVudHMgZm9yIGV2ZXJ5dGhpbmcgaW5zaWRlXG4gICAgICAgIGVtaXRTZXQob2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdhdGNoKG9iailcbiAgICB9XG59XG5cbi8qKlxuICogIENhbmNlbCBvYnNlcnZhdGlvbiwgdHVybiBvZmYgdGhlIGxpc3RlbmVycy5cbiAqL1xuZnVuY3Rpb24gdW5vYnNlcnZlIChvYmosIHBhdGgsIG9ic2VydmVyKSB7XG5cbiAgICBpZiAoIW9iaiB8fCAhb2JqLl9fZW1pdHRlcl9fKSByZXR1cm5cblxuICAgIHBhdGggPSBwYXRoID8gcGF0aCArICcuJyA6ICcnXG4gICAgdmFyIHByb3hpZXMgPSBvYnNlcnZlci5wcm94aWVzW3BhdGhdXG4gICAgaWYgKCFwcm94aWVzKSByZXR1cm5cblxuICAgIC8vIHR1cm4gb2ZmIGxpc3RlbmVyc1xuICAgIG9iai5fX2VtaXR0ZXJfX1xuICAgICAgICAub2ZmKCdnZXQnLCBwcm94aWVzLmdldClcbiAgICAgICAgLm9mZignc2V0JywgcHJveGllcy5zZXQpXG4gICAgICAgIC5vZmYoJ211dGF0ZScsIHByb3hpZXMubXV0YXRlKVxuXG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZVxuICAgIG9ic2VydmVyLnByb3hpZXNbcGF0aF0gPSBudWxsXG59XG5cbi8vIEV4cG9zZSBBUEkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHB1YiA9IG1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLy8gd2hldGhlciB0byBlbWl0IGdldCBldmVudHNcbiAgICAvLyBvbmx5IGVuYWJsZWQgZHVyaW5nIGRlcGVuZGVuY3kgcGFyc2luZ1xuICAgIHNob3VsZEdldCAgIDogZmFsc2UsXG5cbiAgICBvYnNlcnZlICAgICA6IG9ic2VydmUsXG4gICAgdW5vYnNlcnZlICAgOiB1bm9ic2VydmUsXG4gICAgZW5zdXJlUGF0aCAgOiBlbnN1cmVQYXRoLFxuICAgIGNvcHlQYXRocyAgIDogY29weVBhdGhzLFxuICAgIHdhdGNoICAgICAgIDogd2F0Y2gsXG4gICAgY29udmVydCAgICAgOiBjb252ZXJ0LFxuICAgIGNvbnZlcnRLZXkgIDogY29udmVydEtleVxufSIsInZhciB0b0ZyYWdtZW50ID0gcmVxdWlyZSgnLi9mcmFnbWVudCcpO1xuXG4vKipcbiAqIFBhcnNlcyBhIHRlbXBsYXRlIHN0cmluZyBvciBub2RlIGFuZCBub3JtYWxpemVzIGl0IGludG8gYVxuICogYSBub2RlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBwYXJ0aWFsIG9mIGEgdGVtcGxhdGUgb3B0aW9uXG4gKlxuICogUG9zc2libGUgdmFsdWVzIGluY2x1ZGVcbiAqIGlkIHNlbGVjdG9yOiAnI3NvbWUtdGVtcGxhdGUtaWQnXG4gKiB0ZW1wbGF0ZSBzdHJpbmc6ICc8ZGl2PjxzcGFuPm15IHRlbXBsYXRlPC9zcGFuPjwvZGl2PidcbiAqIERvY3VtZW50RnJhZ21lbnQgb2JqZWN0XG4gKiBOb2RlIG9iamVjdCBvZiB0eXBlIFRlbXBsYXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICB2YXIgdGVtcGxhdGVOb2RlO1xuXG4gICAgaWYgKHRlbXBsYXRlIGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgLy8gaWYgdGhlIHRlbXBsYXRlIGlzIGFscmVhZHkgYSBkb2N1bWVudCBmcmFnbWVudCAtLSBkbyBub3RoaW5nXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIHRlbXBsYXRlIGJ5IElEXG4gICAgICAgIGlmICh0ZW1wbGF0ZS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgdGVtcGxhdGVOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGUuc2xpY2UoMSkpXG4gICAgICAgICAgICBpZiAoIXRlbXBsYXRlTm9kZSkgcmV0dXJuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdG9GcmFnbWVudCh0ZW1wbGF0ZSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHtcbiAgICAgICAgdGVtcGxhdGVOb2RlID0gdGVtcGxhdGVcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBpZiBpdHMgYSB0ZW1wbGF0ZSB0YWcgYW5kIHRoZSBicm93c2VyIHN1cHBvcnRzIGl0LFxuICAgIC8vIGl0cyBjb250ZW50IGlzIGFscmVhZHkgYSBkb2N1bWVudCBmcmFnbWVudCFcbiAgICBpZiAodGVtcGxhdGVOb2RlLnRhZ05hbWUgPT09ICdURU1QTEFURScgJiYgdGVtcGxhdGVOb2RlLmNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlTm9kZS5jb250ZW50XG4gICAgfVxuXG4gICAgaWYgKHRlbXBsYXRlTm9kZS50YWdOYW1lID09PSAnU0NSSVBUJykge1xuICAgICAgICByZXR1cm4gdG9GcmFnbWVudCh0ZW1wbGF0ZU5vZGUuaW5uZXJIVE1MKVxuICAgIH1cblxuICAgIHJldHVybiB0b0ZyYWdtZW50KHRlbXBsYXRlTm9kZS5vdXRlckhUTUwpO1xufVxuIiwidmFyIG9wZW5DaGFyICAgICAgICA9ICd7JyxcbiAgICBlbmRDaGFyICAgICAgICAgPSAnfScsXG4gICAgRVNDQVBFX1JFICAgICAgID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZyxcbiAgICAvLyBsYXp5IHJlcXVpcmVcbiAgICBEaXJlY3RpdmVcblxuZXhwb3J0cy5SZWdleCA9IGJ1aWxkSW50ZXJwb2xhdGlvblJlZ2V4KClcblxuZnVuY3Rpb24gYnVpbGRJbnRlcnBvbGF0aW9uUmVnZXggKCkge1xuICAgIHZhciBvcGVuID0gZXNjYXBlUmVnZXgob3BlbkNoYXIpLFxuICAgICAgICBlbmQgID0gZXNjYXBlUmVnZXgoZW5kQ2hhcilcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgb3BlbiArIG9wZW4gKyAnPyguKz8pJyArIGVuZCArICc/JyArIGVuZCArIGVuZClcbn1cblxuZnVuY3Rpb24gZXNjYXBlUmVnZXggKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShFU0NBUEVfUkUsICdcXFxcJCYnKVxufVxuXG5mdW5jdGlvbiBzZXREZWxpbWl0ZXJzIChkZWxpbWl0ZXJzKSB7XG4gICAgb3BlbkNoYXIgPSBkZWxpbWl0ZXJzWzBdXG4gICAgZW5kQ2hhciA9IGRlbGltaXRlcnNbMV1cbiAgICBleHBvcnRzLmRlbGltaXRlcnMgPSBkZWxpbWl0ZXJzXG4gICAgZXhwb3J0cy5SZWdleCA9IGJ1aWxkSW50ZXJwb2xhdGlvblJlZ2V4KClcbn1cblxuLyoqIFxuICogIFBhcnNlIGEgcGllY2Ugb2YgdGV4dCwgcmV0dXJuIGFuIGFycmF5IG9mIHRva2Vuc1xuICogIHRva2VuIHR5cGVzOlxuICogIDEuIHBsYWluIHN0cmluZ1xuICogIDIuIG9iamVjdCB3aXRoIGtleSA9IGJpbmRpbmcga2V5XG4gKiAgMy4gb2JqZWN0IHdpdGgga2V5ICYgaHRtbCA9IHRydWVcbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHRleHQpIHtcbiAgICBpZiAoIWV4cG9ydHMuUmVnZXgudGVzdCh0ZXh0KSkgcmV0dXJuIG51bGxcbiAgICB2YXIgbSwgaSwgdG9rZW4sIG1hdGNoLCB0b2tlbnMgPSBbXVxuICAgIC8qIGpzaGludCBib3NzOiB0cnVlICovXG4gICAgd2hpbGUgKG0gPSB0ZXh0Lm1hdGNoKGV4cG9ydHMuUmVnZXgpKSB7XG4gICAgICAgIGkgPSBtLmluZGV4XG4gICAgICAgIGlmIChpID4gMCkgdG9rZW5zLnB1c2godGV4dC5zbGljZSgwLCBpKSlcbiAgICAgICAgdG9rZW4gPSB7IGtleTogbVsxXS50cmltKCkgfVxuICAgICAgICBtYXRjaCA9IG1bMF1cbiAgICAgICAgdG9rZW4uaHRtbCA9XG4gICAgICAgICAgICBtYXRjaC5jaGFyQXQoMikgPT09IG9wZW5DaGFyICYmXG4gICAgICAgICAgICBtYXRjaC5jaGFyQXQobWF0Y2gubGVuZ3RoIC0gMykgPT09IGVuZENoYXJcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pXG4gICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKGkgKyBtWzBdLmxlbmd0aClcbiAgICB9XG4gICAgaWYgKHRleHQubGVuZ3RoKSB0b2tlbnMucHVzaCh0ZXh0KVxuICAgIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiAgUGFyc2UgYW4gYXR0cmlidXRlIHZhbHVlIHdpdGggcG9zc2libGUgaW50ZXJwb2xhdGlvbiB0YWdzXG4gKiAgcmV0dXJuIGEgRGlyZWN0aXZlLWZyaWVuZGx5IGV4cHJlc3Npb25cbiAqXG4gKiAgZS5nLiAgYSB7e2J9fSBjICA9PiAgXCJhIFwiICsgYiArIFwiIGNcIlxuICovXG5mdW5jdGlvbiBwYXJzZUF0dHIgKGF0dHIpIHtcbiAgICBEaXJlY3RpdmUgPSBEaXJlY3RpdmUgfHwgcmVxdWlyZSgnLi9kaXJlY3RpdmUnKVxuICAgIHZhciB0b2tlbnMgPSBwYXJzZShhdHRyKVxuICAgIGlmICghdG9rZW5zKSByZXR1cm4gbnVsbFxuICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAxKSByZXR1cm4gdG9rZW5zWzBdLmtleVxuICAgIHZhciByZXMgPSBbXSwgdG9rZW5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV1cbiAgICAgICAgcmVzLnB1c2goXG4gICAgICAgICAgICB0b2tlbi5rZXlcbiAgICAgICAgICAgICAgICA/IGlubGluZUZpbHRlcnModG9rZW4ua2V5KVxuICAgICAgICAgICAgICAgIDogKCdcIicgKyB0b2tlbiArICdcIicpXG4gICAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5qb2luKCcrJylcbn1cblxuLyoqXG4gKiAgSW5saW5lcyBhbnkgcG9zc2libGUgZmlsdGVycyBpbiBhIGJpbmRpbmdcbiAqICBzbyB0aGF0IHdlIGNhbiBjb21iaW5lIGV2ZXJ5dGhpbmcgaW50byBhIGh1Z2UgZXhwcmVzc2lvblxuICovXG5mdW5jdGlvbiBpbmxpbmVGaWx0ZXJzIChrZXkpIHtcbiAgICBpZiAoa2V5LmluZGV4T2YoJ3wnKSA+IC0xKSB7XG4gICAgICAgIHZhciBkaXJzID0gRGlyZWN0aXZlLnBhcnNlKGtleSksXG4gICAgICAgICAgICBkaXIgPSBkaXJzICYmIGRpcnNbMF1cbiAgICAgICAgaWYgKGRpciAmJiBkaXIuZmlsdGVycykge1xuICAgICAgICAgICAga2V5ID0gRGlyZWN0aXZlLmlubGluZUZpbHRlcnMoXG4gICAgICAgICAgICAgICAgZGlyLmtleSxcbiAgICAgICAgICAgICAgICBkaXIuZmlsdGVyc1xuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnKCcgKyBrZXkgKyAnKSdcbn1cblxuZXhwb3J0cy5wYXJzZSAgICAgICAgID0gcGFyc2VcbmV4cG9ydHMucGFyc2VBdHRyICAgICA9IHBhcnNlQXR0clxuZXhwb3J0cy5zZXREZWxpbWl0ZXJzID0gc2V0RGVsaW1pdGVyc1xuZXhwb3J0cy5kZWxpbWl0ZXJzICAgID0gW29wZW5DaGFyLCBlbmRDaGFyXSIsInZhciBlbmRFdmVudHMgID0gc25pZmZFbmRFdmVudHMoKSxcbiAgICBjb25maWcgICAgID0gcmVxdWlyZSgnLi9jb25maWcnKSxcbiAgICAvLyBiYXRjaCBlbnRlciBhbmltYXRpb25zIHNvIHdlIG9ubHkgZm9yY2UgdGhlIGxheW91dCBvbmNlXG4gICAgQmF0Y2hlciAgICA9IHJlcXVpcmUoJy4vYmF0Y2hlcicpLFxuICAgIGJhdGNoZXIgICAgPSBuZXcgQmF0Y2hlcigpLFxuICAgIC8vIGNhY2hlIHRpbWVyIGZ1bmN0aW9uc1xuICAgIHNldFRPICAgICAgPSB3aW5kb3cuc2V0VGltZW91dCxcbiAgICBjbGVhclRPICAgID0gd2luZG93LmNsZWFyVGltZW91dCxcbiAgICAvLyBleGl0IGNvZGVzIGZvciB0ZXN0aW5nXG4gICAgY29kZXMgPSB7XG4gICAgICAgIENTU19FICAgICA6IDEsXG4gICAgICAgIENTU19MICAgICA6IDIsXG4gICAgICAgIEpTX0UgICAgICA6IDMsXG4gICAgICAgIEpTX0wgICAgICA6IDQsXG4gICAgICAgIENTU19TS0lQICA6IC0xLFxuICAgICAgICBKU19TS0lQICAgOiAtMixcbiAgICAgICAgSlNfU0tJUF9FIDogLTMsXG4gICAgICAgIEpTX1NLSVBfTCA6IC00LFxuICAgICAgICBJTklUICAgICAgOiAtNSxcbiAgICAgICAgU0tJUCAgICAgIDogLTZcbiAgICB9XG5cbi8vIGZvcmNlIGxheW91dCBiZWZvcmUgdHJpZ2dlcmluZyB0cmFuc2l0aW9ucy9hbmltYXRpb25zXG5iYXRjaGVyLl9wcmVGbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKiBqc2hpbnQgdW51c2VkOiBmYWxzZSAqL1xuICAgIHZhciBmID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHRcbn1cblxuLyoqXG4gKiAgc3RhZ2U6XG4gKiAgICAxID0gZW50ZXJcbiAqICAgIDIgPSBsZWF2ZVxuICovXG52YXIgdHJhbnNpdGlvbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVsLCBzdGFnZSwgY2IsIGNvbXBpbGVyKSB7XG5cbiAgICB2YXIgY2hhbmdlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNiKClcbiAgICAgICAgY29tcGlsZXIuZXhlY0hvb2soc3RhZ2UgPiAwID8gJ2F0dGFjaGVkJyA6ICdkZXRhY2hlZCcpXG4gICAgfVxuXG4gICAgaWYgKGNvbXBpbGVyLmluaXQpIHtcbiAgICAgICAgY2hhbmdlU3RhdGUoKVxuICAgICAgICByZXR1cm4gY29kZXMuSU5JVFxuICAgIH1cblxuICAgIHZhciBoYXNUcmFuc2l0aW9uID0gZWwudnVlX3RyYW5zID09PSAnJyxcbiAgICAgICAgaGFzQW5pbWF0aW9uICA9IGVsLnZ1ZV9hbmltID09PSAnJyxcbiAgICAgICAgZWZmZWN0SWQgICAgICA9IGVsLnZ1ZV9lZmZlY3RcblxuICAgIGlmIChlZmZlY3RJZCkge1xuICAgICAgICByZXR1cm4gYXBwbHlUcmFuc2l0aW9uRnVuY3Rpb25zKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBzdGFnZSxcbiAgICAgICAgICAgIGNoYW5nZVN0YXRlLFxuICAgICAgICAgICAgZWZmZWN0SWQsXG4gICAgICAgICAgICBjb21waWxlclxuICAgICAgICApXG4gICAgfSBlbHNlIGlmIChoYXNUcmFuc2l0aW9uIHx8IGhhc0FuaW1hdGlvbikge1xuICAgICAgICByZXR1cm4gYXBwbHlUcmFuc2l0aW9uQ2xhc3MoXG4gICAgICAgICAgICBlbCxcbiAgICAgICAgICAgIHN0YWdlLFxuICAgICAgICAgICAgY2hhbmdlU3RhdGUsXG4gICAgICAgICAgICBoYXNBbmltYXRpb25cbiAgICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZVN0YXRlKClcbiAgICAgICAgcmV0dXJuIGNvZGVzLlNLSVBcbiAgICB9XG5cbn1cblxuLyoqXG4gKiAgVG9nZ2dsZSBhIENTUyBjbGFzcyB0byB0cmlnZ2VyIHRyYW5zaXRpb25cbiAqL1xuZnVuY3Rpb24gYXBwbHlUcmFuc2l0aW9uQ2xhc3MgKGVsLCBzdGFnZSwgY2hhbmdlU3RhdGUsIGhhc0FuaW1hdGlvbikge1xuXG4gICAgaWYgKCFlbmRFdmVudHMudHJhbnMpIHtcbiAgICAgICAgY2hhbmdlU3RhdGUoKVxuICAgICAgICByZXR1cm4gY29kZXMuQ1NTX1NLSVBcbiAgICB9XG5cbiAgICAvLyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0cmFuc2l0aW9uLFxuICAgIC8vIGl0IG11c3QgaGF2ZSBjbGFzc0xpc3QuLi5cbiAgICB2YXIgb25FbmQsXG4gICAgICAgIGNsYXNzTGlzdCAgICAgICAgPSBlbC5jbGFzc0xpc3QsXG4gICAgICAgIGV4aXN0aW5nQ2FsbGJhY2sgPSBlbC52dWVfdHJhbnNfY2IsXG4gICAgICAgIGVudGVyQ2xhc3MgICAgICAgPSBjb25maWcuZW50ZXJDbGFzcyxcbiAgICAgICAgbGVhdmVDbGFzcyAgICAgICA9IGNvbmZpZy5sZWF2ZUNsYXNzLFxuICAgICAgICBlbmRFdmVudCAgICAgICAgID0gaGFzQW5pbWF0aW9uID8gZW5kRXZlbnRzLmFuaW0gOiBlbmRFdmVudHMudHJhbnNcblxuICAgIC8vIGNhbmNlbCB1bmZpbmlzaGVkIGNhbGxiYWNrcyBhbmQgam9ic1xuICAgIGlmIChleGlzdGluZ0NhbGxiYWNrKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIGV4aXN0aW5nQ2FsbGJhY2spXG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoZW50ZXJDbGFzcylcbiAgICAgICAgY2xhc3NMaXN0LnJlbW92ZShsZWF2ZUNsYXNzKVxuICAgICAgICBlbC52dWVfdHJhbnNfY2IgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKHN0YWdlID4gMCkgeyAvLyBlbnRlclxuXG4gICAgICAgIC8vIHNldCB0byBlbnRlciBzdGF0ZSBiZWZvcmUgYXBwZW5kaW5nXG4gICAgICAgIGNsYXNzTGlzdC5hZGQoZW50ZXJDbGFzcylcbiAgICAgICAgLy8gYXBwZW5kXG4gICAgICAgIGNoYW5nZVN0YXRlKClcbiAgICAgICAgLy8gdHJpZ2dlciB0cmFuc2l0aW9uXG4gICAgICAgIGlmICghaGFzQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBiYXRjaGVyLnB1c2goe1xuICAgICAgICAgICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZShlbnRlckNsYXNzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZClcbiAgICAgICAgICAgICAgICAgICAgZWwudnVlX3RyYW5zX2NiID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGVudGVyQ2xhc3MpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpXG4gICAgICAgICAgICBlbC52dWVfdHJhbnNfY2IgPSBvbkVuZFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2Rlcy5DU1NfRVxuXG4gICAgfSBlbHNlIHsgLy8gbGVhdmVcblxuICAgICAgICBpZiAoZWwub2Zmc2V0V2lkdGggfHwgZWwub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyB0cmlnZ2VyIGhpZGUgdHJhbnNpdGlvblxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZChsZWF2ZUNsYXNzKVxuICAgICAgICAgICAgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpXG4gICAgICAgICAgICAgICAgICAgIGVsLnZ1ZV90cmFuc19jYiA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgLy8gYWN0dWFsbHkgcmVtb3ZlIG5vZGUgaGVyZVxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VTdGF0ZSgpXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUobGVhdmVDbGFzcylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhdHRhY2ggdHJhbnNpdGlvbiBlbmQgbGlzdGVuZXJcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKVxuICAgICAgICAgICAgZWwudnVlX3RyYW5zX2NiID0gb25FbmRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRpcmVjdGx5IHJlbW92ZSBpbnZpc2libGUgZWxlbWVudHNcbiAgICAgICAgICAgIGNoYW5nZVN0YXRlKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZXMuQ1NTX0xcbiAgICAgICAgXG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNpdGlvbkZ1bmN0aW9ucyAoZWwsIHN0YWdlLCBjaGFuZ2VTdGF0ZSwgZWZmZWN0SWQsIGNvbXBpbGVyKSB7XG5cbiAgICB2YXIgZnVuY3MgPSBjb21waWxlci5nZXRPcHRpb24oJ2VmZmVjdHMnLCBlZmZlY3RJZClcbiAgICBpZiAoIWZ1bmNzKSB7XG4gICAgICAgIGNoYW5nZVN0YXRlKClcbiAgICAgICAgcmV0dXJuIGNvZGVzLkpTX1NLSVBcbiAgICB9XG5cbiAgICB2YXIgZW50ZXIgPSBmdW5jcy5lbnRlcixcbiAgICAgICAgbGVhdmUgPSBmdW5jcy5sZWF2ZSxcbiAgICAgICAgdGltZW91dHMgPSBlbC52dWVfdGltZW91dHNcblxuICAgIC8vIGNsZWFyIHByZXZpb3VzIHRpbWVvdXRzXG4gICAgaWYgKHRpbWVvdXRzKSB7XG4gICAgICAgIHZhciBpID0gdGltZW91dHMubGVuZ3RoXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGNsZWFyVE8odGltZW91dHNbaV0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lb3V0cyA9IGVsLnZ1ZV90aW1lb3V0cyA9IFtdXG4gICAgZnVuY3Rpb24gdGltZW91dCAoY2IsIGRlbGF5KSB7XG4gICAgICAgIHZhciBpZCA9IHNldFRPKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNiKClcbiAgICAgICAgICAgIHRpbWVvdXRzLnNwbGljZSh0aW1lb3V0cy5pbmRleE9mKGlkKSwgMSlcbiAgICAgICAgICAgIGlmICghdGltZW91dHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZWwudnVlX3RpbWVvdXRzID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkZWxheSlcbiAgICAgICAgdGltZW91dHMucHVzaChpZClcbiAgICB9XG5cbiAgICBpZiAoc3RhZ2UgPiAwKSB7IC8vIGVudGVyXG4gICAgICAgIGlmICh0eXBlb2YgZW50ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNoYW5nZVN0YXRlKClcbiAgICAgICAgICAgIHJldHVybiBjb2Rlcy5KU19TS0lQX0VcbiAgICAgICAgfVxuICAgICAgICBlbnRlcihlbCwgY2hhbmdlU3RhdGUsIHRpbWVvdXQpXG4gICAgICAgIHJldHVybiBjb2Rlcy5KU19FXG4gICAgfSBlbHNlIHsgLy8gbGVhdmVcbiAgICAgICAgaWYgKHR5cGVvZiBsZWF2ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2hhbmdlU3RhdGUoKVxuICAgICAgICAgICAgcmV0dXJuIGNvZGVzLkpTX1NLSVBfTFxuICAgICAgICB9XG4gICAgICAgIGxlYXZlKGVsLCBjaGFuZ2VTdGF0ZSwgdGltZW91dClcbiAgICAgICAgcmV0dXJuIGNvZGVzLkpTX0xcbiAgICB9XG5cbn1cblxuLyoqXG4gKiAgU25pZmYgcHJvcGVyIHRyYW5zaXRpb24gZW5kIGV2ZW50IG5hbWVcbiAqL1xuZnVuY3Rpb24gc25pZmZFbmRFdmVudHMgKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Z1ZScpLFxuICAgICAgICBkZWZhdWx0RXZlbnQgPSAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgIGV2ZW50cyA9IHtcbiAgICAgICAgICAgICd3ZWJraXRUcmFuc2l0aW9uJyA6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgICAgICd0cmFuc2l0aW9uJyAgICAgICA6IGRlZmF1bHRFdmVudCxcbiAgICAgICAgICAgICdtb3pUcmFuc2l0aW9uJyAgICA6IGRlZmF1bHRFdmVudFxuICAgICAgICB9LFxuICAgICAgICByZXQgPSB7fVxuICAgIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXQudHJhbnMgPSBldmVudHNbbmFtZV1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0LmFuaW0gPSBlbC5zdHlsZS5hbmltYXRpb24gPT09ICcnXG4gICAgICAgID8gJ2FuaW1hdGlvbmVuZCdcbiAgICAgICAgOiAnd2Via2l0QW5pbWF0aW9uRW5kJ1xuICAgIHJldHVybiByZXRcbn1cblxuLy8gRXhwb3NlIHNvbWUgc3R1ZmYgZm9yIHRlc3RpbmcgcHVycG9zZXNcbnRyYW5zaXRpb24uY29kZXMgPSBjb2Rlc1xudHJhbnNpdGlvbi5zbmlmZiA9IHNuaWZmRW5kRXZlbnRzIiwidmFyIGNvbmZpZyAgICAgICA9IHJlcXVpcmUoJy4vY29uZmlnJyksXG4gICAgdG9TdHJpbmcgICAgID0gKHt9KS50b1N0cmluZyxcbiAgICB3aW4gICAgICAgICAgPSB3aW5kb3csXG4gICAgY29uc29sZSAgICAgID0gd2luLmNvbnNvbGUsXG4gICAgZGVmICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgIE9CSkVDVCAgICAgICA9ICdvYmplY3QnLFxuICAgIFRISVNfUkUgICAgICA9IC9bXlxcd110aGlzW15cXHddLyxcbiAgICBCUkFDS0VUX1JFX1MgPSAvXFxbJyhbXiddKyknXFxdL2csXG4gICAgQlJBQ0tFVF9SRV9EID0gL1xcW1wiKFteXCJdKylcIlxcXS9nLFxuICAgIGhhc0NsYXNzTGlzdCA9ICdjbGFzc0xpc3QnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBWaWV3TW9kZWwgLy8gbGF0ZSBkZWZcblxudmFyIGRlZmVyID1cbiAgICB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHdpbi5zZXRUaW1lb3V0XG5cbi8qKlxuICogIE5vcm1hbGl6ZSBrZXlwYXRoIHdpdGggcG9zc2libGUgYnJhY2tldHMgaW50byBkb3Qgbm90YXRpb25zXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleXBhdGggKGtleSkge1xuICAgIHJldHVybiBrZXkuaW5kZXhPZignWycpIDwgMFxuICAgICAgICA/IGtleVxuICAgICAgICA6IGtleS5yZXBsYWNlKEJSQUNLRVRfUkVfUywgJy4kMScpXG4gICAgICAgICAgICAgLnJlcGxhY2UoQlJBQ0tFVF9SRV9ELCAnLiQxJylcbn1cblxudmFyIHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiAgQ29udmVydCBhIHN0cmluZyB0ZW1wbGF0ZSB0byBhIGRvbSBmcmFnbWVudFxuICAgICAqL1xuICAgIHRvRnJhZ21lbnQ6IHJlcXVpcmUoJy4vZnJhZ21lbnQnKSxcblxuICAgIC8qKlxuICAgICAqICBQYXJzZSB0aGUgdmFyaW91cyB0eXBlcyBvZiB0ZW1wbGF0ZSBvcHRpb25zXG4gICAgICovXG4gICAgcGFyc2VUZW1wbGF0ZU9wdGlvbjogcmVxdWlyZSgnLi90ZW1wbGF0ZS1wYXJzZXIuanMnKSxcblxuICAgIC8qKlxuICAgICAqICBnZXQgYSB2YWx1ZSBmcm9tIGFuIG9iamVjdCBrZXlwYXRoXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICAgICAgLyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cbiAgICAgICAga2V5ID0gbm9ybWFsaXplS2V5cGF0aChrZXkpXG4gICAgICAgIGlmIChrZXkuaW5kZXhPZignLicpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtrZXldXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhdGggPSBrZXkuc3BsaXQoJy4nKSxcbiAgICAgICAgICAgIGQgPSAtMSwgbCA9IHBhdGgubGVuZ3RoXG4gICAgICAgIHdoaWxlICgrK2QgPCBsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICBvYmogPSBvYmpbcGF0aFtkXV1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBzZXQgYSB2YWx1ZSB0byBhbiBvYmplY3Qga2V5cGF0aFxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gKG9iaiwga2V5LCB2YWwpIHtcbiAgICAgICAgLyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cbiAgICAgICAga2V5ID0gbm9ybWFsaXplS2V5cGF0aChrZXkpXG4gICAgICAgIGlmIChrZXkuaW5kZXhPZignLicpIDwgMCkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB2YWxcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciBwYXRoID0ga2V5LnNwbGl0KCcuJyksXG4gICAgICAgICAgICBkID0gLTEsIGwgPSBwYXRoLmxlbmd0aCAtIDFcbiAgICAgICAgd2hpbGUgKCsrZCA8IGwpIHtcbiAgICAgICAgICAgIGlmIChvYmpbcGF0aFtkXV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9ialtwYXRoW2RdXSA9IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmogPSBvYmpbcGF0aFtkXV1cbiAgICAgICAgfVxuICAgICAgICBvYmpbcGF0aFtkXV0gPSB2YWxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIHJldHVybiB0aGUgYmFzZSBzZWdtZW50IG9mIGEga2V5cGF0aFxuICAgICAqL1xuICAgIGJhc2VLZXk6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKCcuJykgPiAwXG4gICAgICAgICAgICA/IGtleS5zcGxpdCgnLicpWzBdXG4gICAgICAgICAgICA6IGtleVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgcHJvdG90eXBlLWxlc3Mgb2JqZWN0XG4gICAgICogIHdoaWNoIGlzIGEgYmV0dGVyIGhhc2gvbWFwXG4gICAgICovXG4gICAgaGFzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgZ2V0IGFuIGF0dHJpYnV0ZSBhbmQgcmVtb3ZlIGl0LlxuICAgICAqL1xuICAgIGF0dHI6IGZ1bmN0aW9uIChlbCwgdHlwZSkge1xuICAgICAgICB2YXIgYXR0ciA9IGNvbmZpZy5wcmVmaXggKyAnLScgKyB0eXBlLFxuICAgICAgICAgICAgdmFsID0gZWwuZ2V0QXR0cmlidXRlKGF0dHIpXG4gICAgICAgIGlmICh2YWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIERlZmluZSBhbiBpZW51bWVyYWJsZSBwcm9wZXJ0eVxuICAgICAqICBUaGlzIGF2b2lkcyBpdCBiZWluZyBpbmNsdWRlZCBpbiBKU09OLnN0cmluZ2lmeVxuICAgICAqICBvciBmb3IuLi5pbiBsb29wcy5cbiAgICAgKi9cbiAgICBkZWZQcm90ZWN0ZWQ6IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlLCB3cml0YWJsZSkge1xuICAgICAgICBkZWYob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlICAgICAgICA6IHZhbCxcbiAgICAgICAgICAgIGVudW1lcmFibGUgICA6IGVudW1lcmFibGUsXG4gICAgICAgICAgICB3cml0YWJsZSAgICAgOiB3cml0YWJsZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZSA6IHRydWVcbiAgICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIEEgbGVzcyBidWxsZXQtcHJvb2YgYnV0IG1vcmUgZWZmaWNpZW50IHR5cGUgY2hlY2tcbiAgICAgKiAgdGhhbiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gICAgICovXG4gICAgaXNPYmplY3Q6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IE9CSkVDVCAmJiBvYmogJiYgIUFycmF5LmlzQXJyYXkob2JqKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgQSBtb3JlIGFjY3VyYXRlIGJ1dCBsZXNzIGVmZmljaWVudCB0eXBlIGNoZWNrXG4gICAgICovXG4gICAgaXNUcnVlT2JqZWN0OiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBNb3N0IHNpbXBsZSBiaW5kXG4gICAgICogIGVub3VnaCBmb3IgdGhlIHVzZWNhc2UgYW5kIGZhc3QgdGhhbiBuYXRpdmUgYmluZCgpXG4gICAgICovXG4gICAgYmluZDogZnVuY3Rpb24gKGZuLCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKGN0eCwgYXJnKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBNYWtlIHN1cmUgbnVsbCBhbmQgdW5kZWZpbmVkIG91dHB1dCBlbXB0eSBzdHJpbmdcbiAgICAgKi9cbiAgICBndWFyZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8qIGpzaGludCBlcWVxZXE6IGZhbHNlLCBlcW51bGw6IHRydWUgKi9cbiAgICAgICAgcmV0dXJuIHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JylcbiAgICAgICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgICAgICAgICAgICAgIDogdmFsdWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIFdoZW4gc2V0dGluZyB2YWx1ZSBvbiB0aGUgVk0sIHBhcnNlIHBvc3NpYmxlIG51bWJlcnNcbiAgICAgKi9cbiAgICBjaGVja051bWJlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgOiBOdW1iZXIodmFsdWUpXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBzaW1wbGUgZXh0ZW5kXG4gICAgICovXG4gICAgZXh0ZW5kOiBmdW5jdGlvbiAob2JqLCBleHQpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGV4dCkge1xuICAgICAgICAgICAgaWYgKG9ialtrZXldICE9PSBleHRba2V5XSkge1xuICAgICAgICAgICAgICAgIG9ialtrZXldID0gZXh0W2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBmaWx0ZXIgYW4gYXJyYXkgd2l0aCBkdXBsaWNhdGVzIGludG8gdW5pcXVlc1xuICAgICAqL1xuICAgIHVuaXF1ZTogZnVuY3Rpb24gKGFycikge1xuICAgICAgICB2YXIgaGFzaCA9IHV0aWxzLmhhc2goKSxcbiAgICAgICAgICAgIGkgPSBhcnIubGVuZ3RoLFxuICAgICAgICAgICAga2V5LCByZXMgPSBbXVxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBrZXkgPSBhcnJbaV1cbiAgICAgICAgICAgIGlmIChoYXNoW2tleV0pIGNvbnRpbnVlXG4gICAgICAgICAgICBoYXNoW2tleV0gPSAxXG4gICAgICAgICAgICByZXMucHVzaChrZXkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgQ29udmVydCB0aGUgb2JqZWN0IHRvIGEgVmlld01vZGVsIGNvbnN0cnVjdG9yXG4gICAgICogIGlmIGl0IGlzIG5vdCBhbHJlYWR5IG9uZVxuICAgICAqL1xuICAgIHRvQ29uc3RydWN0b3I6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgVmlld01vZGVsID0gVmlld01vZGVsIHx8IHJlcXVpcmUoJy4vdmlld21vZGVsJylcbiAgICAgICAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KG9iailcbiAgICAgICAgICAgID8gVmlld01vZGVsLmV4dGVuZChvYmopXG4gICAgICAgICAgICA6IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IG9ialxuICAgICAgICAgICAgICAgIDogbnVsbFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgQ2hlY2sgaWYgYSBmaWx0ZXIgZnVuY3Rpb24gY29udGFpbnMgcmVmZXJlbmNlcyB0byBgdGhpc2BcbiAgICAgKiAgSWYgeWVzLCBtYXJrIGl0IGFzIGEgY29tcHV0ZWQgZmlsdGVyLlxuICAgICAqL1xuICAgIGNoZWNrRmlsdGVyOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgIGlmIChUSElTX1JFLnRlc3QoZmlsdGVyLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICBmaWx0ZXIuY29tcHV0ZWQgPSB0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIGNvbnZlcnQgY2VydGFpbiBvcHRpb24gdmFsdWVzIHRvIHRoZSBkZXNpcmVkIGZvcm1hdC5cbiAgICAgKi9cbiAgICBwcm9jZXNzT3B0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudHMgPSBvcHRpb25zLmNvbXBvbmVudHMsXG4gICAgICAgICAgICBwYXJ0aWFscyAgID0gb3B0aW9ucy5wYXJ0aWFscyxcbiAgICAgICAgICAgIHRlbXBsYXRlICAgPSBvcHRpb25zLnRlbXBsYXRlLFxuICAgICAgICAgICAgZmlsdGVycyAgICA9IG9wdGlvbnMuZmlsdGVycyxcbiAgICAgICAgICAgIGtleVxuICAgICAgICBpZiAoY29tcG9uZW50cykge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gY29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHNba2V5XSA9IHV0aWxzLnRvQ29uc3RydWN0b3IoY29tcG9uZW50c1trZXldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gcGFydGlhbHMpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsc1trZXldID0gdXRpbHMucGFyc2VUZW1wbGF0ZU9wdGlvbihwYXJ0aWFsc1trZXldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWx0ZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBmaWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuY2hlY2tGaWx0ZXIoZmlsdGVyc1trZXldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IHV0aWxzLnBhcnNlVGVtcGxhdGVPcHRpb24odGVtcGxhdGUpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIHVzZWQgdG8gZGVmZXIgYmF0Y2ggdXBkYXRlc1xuICAgICAqL1xuICAgIG5leHRUaWNrOiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgZGVmZXIoY2IsIDApXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBhZGQgY2xhc3MgZm9yIElFOVxuICAgICAqICB1c2VzIGNsYXNzTGlzdCBpZiBhdmFpbGFibGVcbiAgICAgKi9cbiAgICBhZGRDbGFzczogZnVuY3Rpb24gKGVsLCBjbHMpIHtcbiAgICAgICAgaWYgKGhhc0NsYXNzTGlzdCkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3VyID0gJyAnICsgZWwuY2xhc3NOYW1lICsgJyAnXG4gICAgICAgICAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgPSAoY3VyICsgY2xzKS50cmltKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgcmVtb3ZlIGNsYXNzIGZvciBJRTlcbiAgICAgKi9cbiAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKGVsLCBjbHMpIHtcbiAgICAgICAgaWYgKGhhc0NsYXNzTGlzdCkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3VyID0gJyAnICsgZWwuY2xhc3NOYW1lICsgJyAnLFxuICAgICAgICAgICAgICAgIHRhciA9ICcgJyArIGNscyArICcgJ1xuICAgICAgICAgICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgICAgICAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gY3VyLnRyaW0oKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICBDb252ZXJ0IGFuIG9iamVjdCB0byBBcnJheVxuICAgICAqICB1c2VkIGluIHYtcmVwZWF0IGFuZCBhcnJheSBmaWx0ZXJzXG4gICAgICovXG4gICAgb2JqZWN0VG9BcnJheTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgcmVzID0gW10sIHZhbCwgZGF0YVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICB2YWwgPSBvYmpba2V5XVxuICAgICAgICAgICAgZGF0YSA9IHV0aWxzLmlzT2JqZWN0KHZhbClcbiAgICAgICAgICAgICAgICA/IHZhbFxuICAgICAgICAgICAgICAgIDogeyAkdmFsdWU6IHZhbCB9XG4gICAgICAgICAgICBkYXRhLiRrZXkgPSBrZXlcbiAgICAgICAgICAgIHJlcy5wdXNoKGRhdGEpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbn1cblxuZW5hYmxlRGVidWcoKVxuZnVuY3Rpb24gZW5hYmxlRGVidWcgKCkge1xuICAgIC8qKlxuICAgICAqICBsb2cgZm9yIGRlYnVnZ2luZ1xuICAgICAqL1xuICAgIHV0aWxzLmxvZyA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5kZWJ1ZyAmJiBjb25zb2xlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogIHdhcm5pbmdzLCB0cmFjZXMgYnkgZGVmYXVsdFxuICAgICAqICBjYW4gYmUgc3VwcHJlc3NlZCBieSBgc2lsZW50YCBvcHRpb24uXG4gICAgICovXG4gICAgdXRpbHMud2FybiA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgaWYgKCFjb25maWcuc2lsZW50ICYmIGNvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihtc2cpXG4gICAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnICYmIGNvbnNvbGUudHJhY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRyYWNlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJ2YXIgQ29tcGlsZXIgICA9IHJlcXVpcmUoJy4vY29tcGlsZXInKSxcbiAgICB1dGlscyAgICAgID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIHRyYW5zaXRpb24gPSByZXF1aXJlKCcuL3RyYW5zaXRpb24nKSxcbiAgICBCYXRjaGVyICAgID0gcmVxdWlyZSgnLi9iYXRjaGVyJyksXG4gICAgc2xpY2UgICAgICA9IFtdLnNsaWNlLFxuICAgIGRlZiAgICAgICAgPSB1dGlscy5kZWZQcm90ZWN0ZWQsXG4gICAgbmV4dFRpY2sgICA9IHV0aWxzLm5leHRUaWNrLFxuXG4gICAgLy8gYmF0Y2ggJHdhdGNoIGNhbGxiYWNrc1xuICAgIHdhdGNoZXJCYXRjaGVyID0gbmV3IEJhdGNoZXIoKSxcbiAgICB3YXRjaGVySWQgICAgICA9IDFcblxuLyoqXG4gKiAgVmlld01vZGVsIGV4cG9zZWQgdG8gdGhlIHVzZXIgdGhhdCBob2xkcyBkYXRhLFxuICogIGNvbXB1dGVkIHByb3BlcnRpZXMsIGV2ZW50IGhhbmRsZXJzXG4gKiAgYW5kIGEgZmV3IHJlc2VydmVkIG1ldGhvZHNcbiAqL1xuZnVuY3Rpb24gVmlld01vZGVsIChvcHRpb25zKSB7XG4gICAgLy8gY29tcGlsZSBpZiBvcHRpb25zIHBhc3NlZCwgaWYgZmFsc2UgcmV0dXJuLiBvcHRpb25zIGFyZSBwYXNzZWQgZGlyZWN0bHkgdG8gY29tcGlsZXJcbiAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHJldHVyblxuICAgIG5ldyBDb21waWxlcih0aGlzLCBvcHRpb25zKVxufVxuXG4vLyBBbGwgVk0gcHJvdG90eXBlIG1ldGhvZHMgYXJlIGluZW51bWVyYWJsZVxuLy8gc28gaXQgY2FuIGJlIHN0cmluZ2lmaWVkL2xvb3BlZCB0aHJvdWdoIGFzIHJhdyBkYXRhXG52YXIgVk1Qcm90byA9IFZpZXdNb2RlbC5wcm90b3R5cGVcblxuLyoqXG4gKiAgaW5pdCBhbGxvd3MgY29uZmlnIGNvbXBpbGF0aW9uIGFmdGVyIGluc3RhbnRpYXRpb246XG4gKiAgICB2YXIgYSA9IG5ldyBWdWUoZmFsc2UpXG4gKiAgICBhLmluaXQoY29uZmlnKVxuICovXG5kZWYoVk1Qcm90bywgJyRpbml0JywgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBuZXcgQ29tcGlsZXIodGhpcywgb3B0aW9ucylcbn0pXG5cbi8qKlxuICogIENvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIGdldCBhIHZhbHVlIGZyb21cbiAqICBhIGtleXBhdGhcbiAqL1xuZGVmKFZNUHJvdG8sICckZ2V0JywgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSB1dGlscy5nZXQodGhpcywga2V5KVxuICAgIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZCAmJiB0aGlzLiRwYXJlbnRcbiAgICAgICAgPyB0aGlzLiRwYXJlbnQuJGdldChrZXkpXG4gICAgICAgIDogdmFsXG59KVxuXG4vKipcbiAqICBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBzZXQgYW4gYWN0dWFsIG5lc3RlZCB2YWx1ZVxuICogIGZyb20gYSBmbGF0IGtleSBzdHJpbmcuIFVzZWQgaW4gZGlyZWN0aXZlcy5cbiAqL1xuZGVmKFZNUHJvdG8sICckc2V0JywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB1dGlscy5zZXQodGhpcywga2V5LCB2YWx1ZSlcbn0pXG5cbi8qKlxuICogIHdhdGNoIGEga2V5IG9uIHRoZSB2aWV3bW9kZWwgZm9yIGNoYW5nZXNcbiAqICBmaXJlIGNhbGxiYWNrIHdpdGggbmV3IHZhbHVlXG4gKi9cbmRlZihWTVByb3RvLCAnJHdhdGNoJywgZnVuY3Rpb24gKGtleSwgY2FsbGJhY2spIHtcbiAgICAvLyBzYXZlIGEgdW5pcXVlIGlkIGZvciBlYWNoIHdhdGNoZXJcbiAgICB2YXIgaWQgPSB3YXRjaGVySWQrKyxcbiAgICAgICAgc2VsZiA9IHRoaXNcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgIHdhdGNoZXJCYXRjaGVyLnB1c2goe1xuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgb3ZlcnJpZGU6IHRydWUsXG4gICAgICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJncylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgY2FsbGJhY2suX2ZuID0gb25cbiAgICBzZWxmLiRjb21waWxlci5vYnNlcnZlci5vbignY2hhbmdlOicgKyBrZXksIG9uKVxufSlcblxuLyoqXG4gKiAgdW53YXRjaCBhIGtleVxuICovXG5kZWYoVk1Qcm90bywgJyR1bndhdGNoJywgZnVuY3Rpb24gKGtleSwgY2FsbGJhY2spIHtcbiAgICAvLyB3b3JrYXJvdW5kIGhlcmVcbiAgICAvLyBzaW5jZSB0aGUgZW1pdHRlciBtb2R1bGUgY2hlY2tzIGNhbGxiYWNrIGV4aXN0ZW5jZVxuICAgIC8vIGJ5IGNoZWNraW5nIHRoZSBsZW5ndGggb2YgYXJndW1lbnRzXG4gICAgdmFyIGFyZ3MgPSBbJ2NoYW5nZTonICsga2V5XSxcbiAgICAgICAgb2IgPSB0aGlzLiRjb21waWxlci5vYnNlcnZlclxuICAgIGlmIChjYWxsYmFjaykgYXJncy5wdXNoKGNhbGxiYWNrLl9mbilcbiAgICBvYi5vZmYuYXBwbHkob2IsIGFyZ3MpXG59KVxuXG4vKipcbiAqICB1bmJpbmQgZXZlcnl0aGluZywgcmVtb3ZlIGV2ZXJ5dGhpbmdcbiAqL1xuZGVmKFZNUHJvdG8sICckZGVzdHJveScsIGZ1bmN0aW9uIChub1JlbW92ZSkge1xuICAgIHRoaXMuJGNvbXBpbGVyLmRlc3Ryb3kobm9SZW1vdmUpXG59KVxuXG4vKipcbiAqICBicm9hZGNhc3QgYW4gZXZlbnQgdG8gYWxsIGNoaWxkIFZNcyByZWN1cnNpdmVseS5cbiAqL1xuZGVmKFZNUHJvdG8sICckYnJvYWRjYXN0JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJGNvbXBpbGVyLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICBjaGlsZFxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXVxuICAgICAgICBjaGlsZC5lbWl0dGVyLmFwcGx5RW1pdC5hcHBseShjaGlsZC5lbWl0dGVyLCBhcmd1bWVudHMpXG4gICAgICAgIGNoaWxkLnZtLiRicm9hZGNhc3QuYXBwbHkoY2hpbGQudm0sIGFyZ3VtZW50cylcbiAgICB9XG59KVxuXG4vKipcbiAqICBlbWl0IGFuIGV2ZW50IHRoYXQgcHJvcGFnYXRlcyBhbGwgdGhlIHdheSB1cCB0byBwYXJlbnQgVk1zLlxuICovXG5kZWYoVk1Qcm90bywgJyRkaXNwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29tcGlsZXIgPSB0aGlzLiRjb21waWxlcixcbiAgICAgICAgZW1pdHRlciA9IGNvbXBpbGVyLmVtaXR0ZXIsXG4gICAgICAgIHBhcmVudCA9IGNvbXBpbGVyLnBhcmVudFxuICAgIGVtaXR0ZXIuYXBwbHlFbWl0LmFwcGx5KGVtaXR0ZXIsIGFyZ3VtZW50cylcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC52bS4kZGlzcGF0Y2guYXBwbHkocGFyZW50LnZtLCBhcmd1bWVudHMpXG4gICAgfVxufSlcblxuLyoqXG4gKiAgZGVsZWdhdGUgb24vb2ZmL29uY2UgdG8gdGhlIGNvbXBpbGVyJ3MgZW1pdHRlclxuICovXG47WydlbWl0JywgJ29uJywgJ29mZicsICdvbmNlJ10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgLy8gaW50ZXJuYWwgZW1pdCBoYXMgZml4ZWQgbnVtYmVyIG9mIGFyZ3VtZW50cy5cbiAgICAvLyBleHBvc2VkIGVtaXQgdXNlcyB0aGUgZXh0ZXJuYWwgdmVyc2lvblxuICAgIC8vIHdpdGggZm4uYXBwbHkuXG4gICAgdmFyIHJlYWxNZXRob2QgPSBtZXRob2QgPT09ICdlbWl0J1xuICAgICAgICA/ICdhcHBseUVtaXQnXG4gICAgICAgIDogbWV0aG9kXG4gICAgZGVmKFZNUHJvdG8sICckJyArIG1ldGhvZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1pdHRlciA9IHRoaXMuJGNvbXBpbGVyLmVtaXR0ZXJcbiAgICAgICAgZW1pdHRlcltyZWFsTWV0aG9kXS5hcHBseShlbWl0dGVyLCBhcmd1bWVudHMpXG4gICAgfSlcbn0pXG5cbi8vIERPTSBjb252ZW5pZW5jZSBtZXRob2RzXG5cbmRlZihWTVByb3RvLCAnJGFwcGVuZFRvJywgZnVuY3Rpb24gKHRhcmdldCwgY2IpIHtcbiAgICB0YXJnZXQgPSBxdWVyeSh0YXJnZXQpXG4gICAgdmFyIGVsID0gdGhpcy4kZWxcbiAgICB0cmFuc2l0aW9uKGVsLCAxLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChlbClcbiAgICAgICAgaWYgKGNiKSBuZXh0VGljayhjYilcbiAgICB9LCB0aGlzLiRjb21waWxlcilcbn0pXG5cbmRlZihWTVByb3RvLCAnJHJlbW92ZScsIGZ1bmN0aW9uIChjYikge1xuICAgIHZhciBlbCA9IHRoaXMuJGVsXG4gICAgdHJhbnNpdGlvbihlbCwgLTEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiKSBuZXh0VGljayhjYilcbiAgICB9LCB0aGlzLiRjb21waWxlcilcbn0pXG5cbmRlZihWTVByb3RvLCAnJGJlZm9yZScsIGZ1bmN0aW9uICh0YXJnZXQsIGNiKSB7XG4gICAgdGFyZ2V0ID0gcXVlcnkodGFyZ2V0KVxuICAgIHZhciBlbCA9IHRoaXMuJGVsXG4gICAgdHJhbnNpdGlvbihlbCwgMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIHRhcmdldClcbiAgICAgICAgaWYgKGNiKSBuZXh0VGljayhjYilcbiAgICB9LCB0aGlzLiRjb21waWxlcilcbn0pXG5cbmRlZihWTVByb3RvLCAnJGFmdGVyJywgZnVuY3Rpb24gKHRhcmdldCwgY2IpIHtcbiAgICB0YXJnZXQgPSBxdWVyeSh0YXJnZXQpXG4gICAgdmFyIGVsID0gdGhpcy4kZWxcbiAgICB0cmFuc2l0aW9uKGVsLCAxLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0YXJnZXQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgdGFyZ2V0Lm5leHRTaWJsaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZWwpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiKSBuZXh0VGljayhjYilcbiAgICB9LCB0aGlzLiRjb21waWxlcilcbn0pXG5cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICAgIHJldHVybiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbClcbiAgICAgICAgOiBlbFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdNb2RlbFxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9